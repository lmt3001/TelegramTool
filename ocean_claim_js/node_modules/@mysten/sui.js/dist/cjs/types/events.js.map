{
  "version": 3,
  "sources": ["../../../src/types/events.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { object, string, array, record, any, optional, boolean, nullable } from 'superstruct';\nimport type { SuiJsonValue } from './common.js';\nimport { ObjectId, SuiAddress, TransactionDigest, SequenceNumber } from './common.js';\n\nexport const EventId = object({\n\ttxDigest: TransactionDigest,\n\teventSeq: SequenceNumber,\n});\n\n// event types mirror those in \"sui-json-rpc-types/src/sui_event.rs\"\n\nexport const SuiEvent = object({\n\tid: EventId,\n\t// Move package where this event was emitted.\n\tpackageId: ObjectId,\n\t// Move module where this event was emitted.\n\ttransactionModule: string(),\n\t// Sender's Sui address.\n\tsender: SuiAddress,\n\t// Move event type.\n\ttype: string(),\n\t// Parsed json value of the event\n\tparsedJson: optional(record(string(), any())),\n\t// Base 58 encoded bcs bytes of the move event\n\tbcs: optional(string()),\n\ttimestampMs: optional(string()),\n});\n\nexport type SuiEvent = Infer<typeof SuiEvent>;\n\nexport type MoveEventField = {\n\tpath: string;\n\tvalue: SuiJsonValue;\n};\n\n/**\n * Sequential event ID, ie (transaction seq number, event seq number).\n * 1) Serves as a unique event ID for each fullnode\n * 2) Also serves to sequence events for the purposes of pagination and querying.\n *    A higher id is an event seen later by that fullnode.\n * This ID is the \"cursor\" for event querying.\n */\nexport type EventId = Infer<typeof EventId>;\n\n// mirrors sui_json_rpc_types::SuiEventFilter\nexport type SuiEventFilter =\n\t| { Package: ObjectId }\n\t| { MoveModule: { package: ObjectId; module: string } }\n\t| { MoveEventType: string }\n\t| { MoveEventField: MoveEventField }\n\t| { Transaction: TransactionDigest }\n\t| {\n\t\t\tTimeRange: {\n\t\t\t\t// left endpoint of time interval, milliseconds since epoch, inclusive\n\t\t\t\tstartTime: string;\n\t\t\t\t// right endpoint of time interval, milliseconds since epoch, exclusive\n\t\t\t\tendTime: string;\n\t\t\t};\n\t  }\n\t| { Sender: SuiAddress }\n\t| { All: SuiEventFilter[] }\n\t| { Any: SuiEventFilter[] }\n\t| { And: [SuiEventFilter, SuiEventFilter] }\n\t| { Or: [SuiEventFilter, SuiEventFilter] };\n\nexport const PaginatedEvents = object({\n\tdata: array(SuiEvent),\n\tnextCursor: nullable(EventId),\n\thasNextPage: boolean(),\n});\nexport type PaginatedEvents = Infer<typeof PaginatedEvents>;\n\n/* ------------------------------- EventData ------------------------------ */\n\nexport function getEventSender(event: SuiEvent): SuiAddress {\n\treturn event.sender;\n}\n\nexport function getEventPackage(event: SuiEvent): ObjectId {\n\treturn event.packageId;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,yBAAgF;AAEhF,oBAAwE;AAEjE,MAAM,cAAU,2BAAO;AAAA,EAC7B,UAAU;AAAA,EACV,UAAU;AACX,CAAC;AAIM,MAAM,eAAW,2BAAO;AAAA,EAC9B,IAAI;AAAA;AAAA,EAEJ,WAAW;AAAA;AAAA,EAEX,uBAAmB,2BAAO;AAAA;AAAA,EAE1B,QAAQ;AAAA;AAAA,EAER,UAAM,2BAAO;AAAA;AAAA,EAEb,gBAAY,iCAAS,+BAAO,2BAAO,OAAG,wBAAI,CAAC,CAAC;AAAA;AAAA,EAE5C,SAAK,iCAAS,2BAAO,CAAC;AAAA,EACtB,iBAAa,iCAAS,2BAAO,CAAC;AAC/B,CAAC;AAuCM,MAAM,sBAAkB,2BAAO;AAAA,EACrC,UAAM,0BAAM,QAAQ;AAAA,EACpB,gBAAY,6BAAS,OAAO;AAAA,EAC5B,iBAAa,4BAAQ;AACtB,CAAC;AAKM,SAAS,eAAe,OAA6B;AAC3D,SAAO,MAAM;AACd;AAEO,SAAS,gBAAgB,OAA2B;AAC1D,SAAO,MAAM;AACd;",
  "names": []
}
