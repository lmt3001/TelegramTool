{
  "version": 3,
  "sources": ["../../../../src/keypairs/secp256k1/publickey.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../../types/index.js';\nimport type { PublicKey, PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { bytesEqual } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature.js';\n\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey implements PublicKey {\n\tstatic SIZE = SECP256K1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256k1PublicKey object\n\t * @param value secp256k1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256k1 public keys are equal\n\t */\n\tequals(publicKey: Secp256k1PublicKey): boolean {\n\t\treturn bytesEqual(this.toBytes(), publicKey.toBytes());\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Secp256k1 public key\n\t */\n\ttoBase64(): string {\n\t\treturn toB64(this.toBytes());\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256k1 public key\n\t */\n\ttoBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Secp256k1 public key\n\t */\n\ttoString(): string {\n\t\treturn this.toBase64();\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256k1 public key\n\t */\n\ttoSuiAddress(): string {\n\t\tlet tmp = new Uint8Array(SECP256K1_PUBLIC_KEY_SIZE + 1);\n\t\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['Secp256k1']]);\n\t\ttmp.set(this.toBytes(), 1);\n\t\t// Each hex char represents half a byte, hence hex address doubles the length\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(tmp, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256k1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256k1'];\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,iBAA+B;AAC/B,qBAAwB;AACxB,mBAA2B;AAC3B,mBAAwD;AAExD,uBAA2B;AAC3B,uBAAyC;AAEzC,MAAM,4BAA4B;AAK3B,MAAM,mBAAwC;AAAA;AAAA;AAAA;AAAA;AAAA,EAQpD,YAAY,OAA0B;AACrC,QAAI,OAAO,UAAU,UAAU;AAC9B,WAAK,WAAO,oBAAQ,KAAK;AAAA,IAC1B,WAAW,iBAAiB,YAAY;AACvC,WAAK,OAAO;AAAA,IACb,OAAO;AACN,WAAK,OAAO,WAAW,KAAK,KAAK;AAAA,IAClC;AAEA,QAAI,KAAK,KAAK,WAAW,2BAA2B;AACnD,YAAM,IAAI;AAAA,QACT,sCAAsC,wCAAwC,KAAK,KAAK;AAAA,MACzF;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,WAAwC;AAC9C,eAAO,6BAAW,KAAK,QAAQ,GAAG,UAAU,QAAQ,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA,EAKA,WAAmB;AAClB,eAAO,kBAAM,KAAK,QAAQ,CAAC;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,UAAsB;AACrB,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAKA,WAAmB;AAClB,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,eAAuB;AACtB,QAAI,MAAM,IAAI,WAAW,4BAA4B,CAAC;AACtD,QAAI,IAAI,CAAC,0CAAyB,WAAW,CAAC,CAAC;AAC/C,QAAI,IAAI,KAAK,QAAQ,GAAG,CAAC;AAEzB,eAAO;AAAA,UACN,6BAAW,wBAAQ,KAAK,EAAE,OAAO,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,kCAAqB,CAAC;AAAA,IACxE;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe;AACd,WAAO,0CAAyB,WAAW;AAAA,EAC5C;AACD;AAvEa,mBACL,OAAO;",
  "names": []
}
