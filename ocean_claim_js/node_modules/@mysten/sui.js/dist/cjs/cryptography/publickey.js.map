{
  "version": 3,
  "sources": ["../../../src/cryptography/publickey.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Value to be converted into public key.\n */\nexport type PublicKeyInitData = string | Uint8Array | Iterable<number>;\n\nexport function bytesEqual(a: Uint8Array, b: Uint8Array) {\n\tif (a === b) return true;\n\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * A public key\n */\nexport interface PublicKey {\n\t/**\n\t * Checks if two public keys are equal\n\t */\n\tequals(publicKey: PublicKey): boolean;\n\n\t/**\n\t * Return the base-64 representation of the public key\n\t */\n\ttoBase64(): string;\n\n\t/**\n\t * Return the byte array representation of the public key\n\t */\n\ttoBytes(): Uint8Array;\n\n\t/**\n\t * Return the base-64 representation of the public key\n\t */\n\ttoString(): string;\n\n\t/**\n\t * Return the Sui address associated with this public key\n\t */\n\ttoSuiAddress(): string;\n\n\t/**\n\t * Return signature scheme flag of the public key\n\t */\n\tflag(): number;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQO,SAAS,WAAW,GAAe,GAAe;AACxD,MAAI,MAAM;AAAG,WAAO;AAEpB,MAAI,EAAE,WAAW,EAAE,QAAQ;AAC1B,WAAO;AAAA,EACR;AAEA,WAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAClC,QAAI,EAAE,CAAC,MAAM,EAAE,CAAC,GAAG;AAClB,aAAO;AAAA,IACR;AAAA,EACD;AACA,SAAO;AACR;",
  "names": []
}
