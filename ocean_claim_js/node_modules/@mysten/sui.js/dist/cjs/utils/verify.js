"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var verify_exports = {};
__export(verify_exports, {
  verifyMessage: () => verifyMessage
});
module.exports = __toCommonJS(verify_exports);
var import_bcs = require("@mysten/bcs");
var import_tweetnacl = __toESM(require("tweetnacl"));
var import_intent = require("./intent.js");
var import_secp256k1 = require("@noble/curves/secp256k1");
var import_sha256 = require("@noble/hashes/sha256");
var import_blake2b = require("@noble/hashes/blake2b");
var import_utils = require("../cryptography/utils.js");
async function verifyMessage(message, serializedSignature, scope) {
  const signature = (0, import_utils.toSingleSignaturePubkeyPair)(serializedSignature);
  const messageBytes = (0, import_intent.messageWithIntent)(
    scope,
    typeof message === "string" ? (0, import_bcs.fromB64)(message) : message
  );
  const digest = (0, import_blake2b.blake2b)(messageBytes, { dkLen: 32 });
  switch (signature.signatureScheme) {
    case "ED25519":
      return import_tweetnacl.default.sign.detached.verify(digest, signature.signature, signature.pubKey.toBytes());
    case "Secp256k1":
      return import_secp256k1.secp256k1.verify(
        import_secp256k1.secp256k1.Signature.fromCompact(signature.signature),
        (0, import_sha256.sha256)(digest),
        signature.pubKey.toBytes()
      );
    default:
      throw new Error(`Unknown signature scheme: "${signature.signatureScheme}"`);
  }
}
//# sourceMappingURL=verify.js.map
