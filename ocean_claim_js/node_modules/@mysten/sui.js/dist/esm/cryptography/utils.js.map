{
  "version": 3,
  "sources": ["../../../src/cryptography/utils.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n/* eslint-disable import/no-cycle */\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { SerializedSignature, SignaturePubkeyPair, SignatureScheme } from './signature.js';\nimport { SIGNATURE_FLAG_TO_SCHEME, SIGNATURE_SCHEME_TO_FLAG } from './signature.js';\nimport { Secp256r1PublicKey } from '../keypairs/secp256r1/publickey.js';\nimport { Secp256k1PublicKey } from '../keypairs/secp256k1/publickey.js';\nimport { Ed25519PublicKey } from '../keypairs/ed25519/publickey.js';\nimport { decodeMultiSig } from './multisig.js';\nimport type { PublicKey } from './publickey.js';\nimport { Ed25519Keypair } from '../keypairs/ed25519/keypair.js';\nimport { Secp256k1Keypair } from '../keypairs/secp256k1/keypair.js';\nimport type { ExportedKeypair, Keypair } from './keypair.js';\nimport { LEGACY_PRIVATE_KEY_SIZE, PRIVATE_KEY_SIZE } from './keypair.js';\n\nexport function toSerializedSignature({\n\tsignature,\n\tsignatureScheme,\n\tpubKey,\n}: SignaturePubkeyPair): SerializedSignature {\n\tconst serializedSignature = new Uint8Array(1 + signature.length + pubKey.toBytes().length);\n\tserializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n\tserializedSignature.set(signature, 1);\n\tserializedSignature.set(pubKey.toBytes(), 1 + signature.length);\n\treturn toB64(serializedSignature);\n}\n\n/// Expects to parse a serialized signature by its signature scheme to a list of signature\n/// and public key pairs. The list is of length 1 if it is not multisig.\nexport function toParsedSignaturePubkeyPair(\n\tserializedSignature: SerializedSignature,\n): SignaturePubkeyPair[] {\n\tconst bytes = fromB64(serializedSignature);\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n\tif (signatureScheme === 'MultiSig') {\n\t\ttry {\n\t\t\treturn decodeMultiSig(serializedSignature);\n\t\t} catch (e) {\n\t\t\t// Legacy format multisig do not render.\n\t\t\tthrow new Error('legacy multisig viewing unsupported');\n\t\t}\n\t}\n\n\tconst SIGNATURE_SCHEME_TO_PUBLIC_KEY = {\n\t\tED25519: Ed25519PublicKey,\n\t\tSecp256k1: Secp256k1PublicKey,\n\t\tSecp256r1: Secp256r1PublicKey,\n\t};\n\n\tconst PublicKey = SIGNATURE_SCHEME_TO_PUBLIC_KEY[signatureScheme];\n\n\tconst signature = bytes.slice(1, bytes.length - PublicKey.SIZE);\n\tconst pubkeyBytes = bytes.slice(1 + signature.length);\n\tconst pubKey = new PublicKey(pubkeyBytes);\n\n\treturn [\n\t\t{\n\t\t\tsignatureScheme,\n\t\t\tsignature,\n\t\t\tpubKey,\n\t\t},\n\t];\n}\n\n/// Expects to parse a single signature pubkey pair from the serialized\n/// signature. Use this only if multisig is not expected.\nexport function toSingleSignaturePubkeyPair(\n\tserializedSignature: SerializedSignature,\n): SignaturePubkeyPair {\n\tconst res = toParsedSignaturePubkeyPair(serializedSignature);\n\tif (res.length !== 1) {\n\t\tthrow Error('Expected a single signature');\n\t}\n\treturn res[0];\n}\n\nexport function publicKeyFromSerialized(schema: SignatureScheme, pubKey: string): PublicKey {\n\tif (schema === 'ED25519') {\n\t\treturn new Ed25519PublicKey(pubKey);\n\t}\n\tif (schema === 'Secp256k1') {\n\t\treturn new Secp256k1PublicKey(pubKey);\n\t}\n\tthrow new Error('Unknown public key schema');\n}\n\nexport function fromExportedKeypair(keypair: ExportedKeypair): Keypair {\n\tconst secretKey = fromB64(keypair.privateKey);\n\tswitch (keypair.schema) {\n\t\tcase 'ED25519':\n\t\t\tlet pureSecretKey = secretKey;\n\t\t\tif (secretKey.length === LEGACY_PRIVATE_KEY_SIZE) {\n\t\t\t\t// This is a legacy secret key, we need to strip the public key bytes and only read the first 32 bytes\n\t\t\t\tpureSecretKey = secretKey.slice(0, PRIVATE_KEY_SIZE);\n\t\t\t}\n\t\t\treturn Ed25519Keypair.fromSecretKey(pureSecretKey);\n\t\tcase 'Secp256k1':\n\t\t\treturn Secp256k1Keypair.fromSecretKey(secretKey);\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid keypair schema ${keypair.schema}`);\n\t}\n}\n"],
  "mappings": "AAIA,SAAS,SAAS,aAAa;AAE/B,SAAS,0BAA0B,gCAAgC;AACnE,SAAS,0BAA0B;AACnC,SAAS,0BAA0B;AACnC,SAAS,wBAAwB;AACjC,SAAS,sBAAsB;AAE/B,SAAS,sBAAsB;AAC/B,SAAS,wBAAwB;AAEjC,SAAS,yBAAyB,wBAAwB;AAEnD,SAAS,sBAAsB;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AACD,GAA6C;AAC5C,QAAM,sBAAsB,IAAI,WAAW,IAAI,UAAU,SAAS,OAAO,QAAQ,EAAE,MAAM;AACzF,sBAAoB,IAAI,CAAC,yBAAyB,eAAe,CAAC,CAAC;AACnE,sBAAoB,IAAI,WAAW,CAAC;AACpC,sBAAoB,IAAI,OAAO,QAAQ,GAAG,IAAI,UAAU,MAAM;AAC9D,SAAO,MAAM,mBAAmB;AACjC;AAIO,SAAS,4BACf,qBACwB;AACxB,QAAM,QAAQ,QAAQ,mBAAmB;AACzC,QAAM,kBACL,yBAAyB,MAAM,CAAC,CAA0C;AAE3E,MAAI,oBAAoB,YAAY;AACnC,QAAI;AACH,aAAO,eAAe,mBAAmB;AAAA,IAC1C,SAAS,GAAP;AAED,YAAM,IAAI,MAAM,qCAAqC;AAAA,IACtD;AAAA,EACD;AAEA,QAAM,iCAAiC;AAAA,IACtC,SAAS;AAAA,IACT,WAAW;AAAA,IACX,WAAW;AAAA,EACZ;AAEA,QAAM,YAAY,+BAA+B,eAAe;AAEhE,QAAM,YAAY,MAAM,MAAM,GAAG,MAAM,SAAS,UAAU,IAAI;AAC9D,QAAM,cAAc,MAAM,MAAM,IAAI,UAAU,MAAM;AACpD,QAAM,SAAS,IAAI,UAAU,WAAW;AAExC,SAAO;AAAA,IACN;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,EACD;AACD;AAIO,SAAS,4BACf,qBACsB;AACtB,QAAM,MAAM,4BAA4B,mBAAmB;AAC3D,MAAI,IAAI,WAAW,GAAG;AACrB,UAAM,MAAM,6BAA6B;AAAA,EAC1C;AACA,SAAO,IAAI,CAAC;AACb;AAEO,SAAS,wBAAwB,QAAyB,QAA2B;AAC3F,MAAI,WAAW,WAAW;AACzB,WAAO,IAAI,iBAAiB,MAAM;AAAA,EACnC;AACA,MAAI,WAAW,aAAa;AAC3B,WAAO,IAAI,mBAAmB,MAAM;AAAA,EACrC;AACA,QAAM,IAAI,MAAM,2BAA2B;AAC5C;AAEO,SAAS,oBAAoB,SAAmC;AACtE,QAAM,YAAY,QAAQ,QAAQ,UAAU;AAC5C,UAAQ,QAAQ,QAAQ;AAAA,IACvB,KAAK;AACJ,UAAI,gBAAgB;AACpB,UAAI,UAAU,WAAW,yBAAyB;AAEjD,wBAAgB,UAAU,MAAM,GAAG,gBAAgB;AAAA,MACpD;AACA,aAAO,eAAe,cAAc,aAAa;AAAA,IAClD,KAAK;AACJ,aAAO,iBAAiB,cAAc,SAAS;AAAA,IAChD;AACC,YAAM,IAAI,MAAM,0BAA0B,QAAQ,QAAQ;AAAA,EAC5D;AACD;",
  "names": []
}
