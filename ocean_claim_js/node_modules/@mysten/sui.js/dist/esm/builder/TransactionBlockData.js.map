{
  "version": 3,
  "sources": ["../../../src/builder/TransactionBlockData.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toB58 } from '@mysten/bcs';\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tassert,\n\tdefine,\n\tinteger,\n\tis,\n\tliteral,\n\tnullable,\n\tobject,\n\toptional,\n\tstring,\n\tunion,\n} from 'superstruct';\nimport { hashTypedData } from '../cryptography/hash.js';\nimport { normalizeSuiAddress, SuiObjectRef } from '../types/index.js';\nimport { builder } from './bcs.js';\nimport { TransactionType, TransactionBlockInput } from './Transactions.js';\nimport { BuilderCallArg, PureCallArg } from './Inputs.js';\nimport { create } from './utils.js';\n\nexport const TransactionExpiration = optional(\n\tnullable(\n\t\tunion([object({ Epoch: integer() }), object({ None: union([literal(true), literal(null)]) })]),\n\t),\n);\nexport type TransactionExpiration = Infer<typeof TransactionExpiration>;\n\nconst SuiAddress = string();\n\nconst StringEncodedBigint = define<string>('StringEncodedBigint', (val) => {\n\tif (!['string', 'number', 'bigint'].includes(typeof val)) return false;\n\n\ttry {\n\t\tBigInt(val as string);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n});\n\nconst GasConfig = object({\n\tbudget: optional(StringEncodedBigint),\n\tprice: optional(StringEncodedBigint),\n\tpayment: optional(array(SuiObjectRef)),\n\towner: optional(SuiAddress),\n});\ntype GasConfig = Infer<typeof GasConfig>;\n\nexport const SerializedTransactionDataBuilder = object({\n\tversion: literal(1),\n\tsender: optional(SuiAddress),\n\texpiration: TransactionExpiration,\n\tgasConfig: GasConfig,\n\tinputs: array(TransactionBlockInput),\n\ttransactions: array(TransactionType),\n});\nexport type SerializedTransactionDataBuilder = Infer<typeof SerializedTransactionDataBuilder>;\n\nfunction prepareSuiAddress(address: string) {\n\treturn normalizeSuiAddress(address).replace('0x', '');\n}\n\nexport class TransactionBlockDataBuilder {\n\tstatic fromKindBytes(bytes: Uint8Array) {\n\t\tconst kind = builder.de('TransactionKind', bytes);\n\t\tconst programmableTx = kind?.ProgrammableTransaction;\n\t\tif (!programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\tconst serialized = create(\n\t\t\t{\n\t\t\t\tversion: 1,\n\t\t\t\tgasConfig: {},\n\t\t\t\tinputs: programmableTx.inputs.map((value: unknown, index: number) =>\n\t\t\t\t\tcreate(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: 'Input',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\ttype: is(value, PureCallArg) ? 'pure' : 'object',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTransactionBlockInput,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\ttransactions: programmableTx.transactions,\n\t\t\t},\n\t\t\tSerializedTransactionDataBuilder,\n\t\t);\n\n\t\treturn TransactionBlockDataBuilder.restore(serialized);\n\t}\n\n\tstatic fromBytes(bytes: Uint8Array) {\n\t\tconst rawData = builder.de('TransactionData', bytes);\n\t\tconst data = rawData?.V1;\n\t\tconst programmableTx = data?.kind?.ProgrammableTransaction;\n\t\tif (!data || !programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\tconst serialized = create(\n\t\t\t{\n\t\t\t\tversion: 1,\n\t\t\t\tsender: data.sender,\n\t\t\t\texpiration: data.expiration,\n\t\t\t\tgasConfig: data.gasData,\n\t\t\t\tinputs: programmableTx.inputs.map((value: unknown, index: number) =>\n\t\t\t\t\tcreate(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: 'Input',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\ttype: is(value, PureCallArg) ? 'pure' : 'object',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTransactionBlockInput,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\ttransactions: programmableTx.transactions,\n\t\t\t},\n\t\t\tSerializedTransactionDataBuilder,\n\t\t);\n\n\t\treturn TransactionBlockDataBuilder.restore(serialized);\n\t}\n\n\tstatic restore(data: SerializedTransactionDataBuilder) {\n\t\tassert(data, SerializedTransactionDataBuilder);\n\t\tconst transactionData = new TransactionBlockDataBuilder();\n\t\tObject.assign(transactionData, data);\n\t\treturn transactionData;\n\t}\n\n\t/**\n\t * Generate transaction digest.\n\t *\n\t * @param bytes BCS serialized transaction data\n\t * @returns transaction digest.\n\t */\n\tstatic getDigestFromBytes(bytes: Uint8Array) {\n\t\tconst hash = hashTypedData('TransactionData', bytes);\n\t\treturn toB58(hash);\n\t}\n\n\tversion = 1 as const;\n\tsender?: string;\n\texpiration?: TransactionExpiration;\n\tgasConfig: GasConfig;\n\tinputs: TransactionBlockInput[];\n\ttransactions: TransactionType[];\n\n\tconstructor(clone?: SerializedTransactionDataBuilder) {\n\t\tthis.sender = clone?.sender;\n\t\tthis.expiration = clone?.expiration;\n\t\tthis.gasConfig = clone?.gasConfig ?? {};\n\t\tthis.inputs = clone?.inputs ?? [];\n\t\tthis.transactions = clone?.transactions ?? [];\n\t}\n\n\tbuild({\n\t\tmaxSizeBytes = Infinity,\n\t\toverrides,\n\t\tonlyTransactionKind,\n\t}: {\n\t\tmaxSizeBytes?: number;\n\t\toverrides?: Pick<Partial<TransactionBlockDataBuilder>, 'sender' | 'gasConfig' | 'expiration'>;\n\t\tonlyTransactionKind?: boolean;\n\t} = {}) {\n\t\t// Resolve inputs down to values:\n\t\tconst inputs = this.inputs.map((input) => {\n\t\t\tassert(input.value, BuilderCallArg);\n\t\t\treturn input.value;\n\t\t});\n\n\t\tconst kind = {\n\t\t\tProgrammableTransaction: {\n\t\t\t\tinputs,\n\t\t\t\ttransactions: this.transactions,\n\t\t\t},\n\t\t};\n\n\t\tif (onlyTransactionKind) {\n\t\t\treturn builder.ser('TransactionKind', kind, { maxSize: maxSizeBytes }).toBytes();\n\t\t}\n\n\t\tconst expiration = overrides?.expiration ?? this.expiration;\n\t\tconst sender = overrides?.sender ?? this.sender;\n\t\tconst gasConfig = { ...this.gasConfig, ...overrides?.gasConfig };\n\n\t\tif (!sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tif (!gasConfig.budget) {\n\t\t\tthrow new Error('Missing gas budget');\n\t\t}\n\n\t\tif (!gasConfig.payment) {\n\t\t\tthrow new Error('Missing gas payment');\n\t\t}\n\n\t\tif (!gasConfig.price) {\n\t\t\tthrow new Error('Missing gas price');\n\t\t}\n\n\t\tconst transactionData = {\n\t\t\tsender: prepareSuiAddress(sender),\n\t\t\texpiration: expiration ? expiration : { None: true },\n\t\t\tgasData: {\n\t\t\t\tpayment: gasConfig.payment,\n\t\t\t\towner: prepareSuiAddress(this.gasConfig.owner ?? sender),\n\t\t\t\tprice: BigInt(gasConfig.price),\n\t\t\t\tbudget: BigInt(gasConfig.budget),\n\t\t\t},\n\t\t\tkind: {\n\t\t\t\tProgrammableTransaction: {\n\t\t\t\t\tinputs,\n\t\t\t\t\ttransactions: this.transactions,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn builder\n\t\t\t.ser('TransactionData', { V1: transactionData }, { maxSize: maxSizeBytes })\n\t\t\t.toBytes();\n\t}\n\n\tgetDigest() {\n\t\tconst bytes = this.build({ onlyTransactionKind: false });\n\t\treturn TransactionBlockDataBuilder.getDigestFromBytes(bytes);\n\t}\n\n\tsnapshot(): SerializedTransactionDataBuilder {\n\t\treturn create(this, SerializedTransactionDataBuilder);\n\t}\n}\n"],
  "mappings": "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",
  "names": []
}
