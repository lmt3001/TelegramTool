import type { Infer } from 'superstruct';
export declare const EndOfEpochInfo: import("superstruct").Struct<{
    storageRebate: string;
    protocolVersion: string;
    referenceGasPrice: string;
    totalStake: string;
    lastCheckpointId: string;
    epochEndTimestamp: string;
    storageFundReinvestment: string;
    storageCharge: string;
    storageFundBalance: string;
    stakeSubsidyAmount: string;
    totalGasFees: string;
    totalStakeRewardsDistributed: string;
    leftoverStorageFundInflow: string;
}, {
    lastCheckpointId: import("superstruct").Struct<string, null>;
    epochEndTimestamp: import("superstruct").Struct<string, null>;
    protocolVersion: import("superstruct").Struct<string, null>;
    referenceGasPrice: import("superstruct").Struct<string, null>;
    totalStake: import("superstruct").Struct<string, null>;
    storageFundReinvestment: import("superstruct").Struct<string, null>;
    storageCharge: import("superstruct").Struct<string, null>;
    storageRebate: import("superstruct").Struct<string, null>;
    storageFundBalance: import("superstruct").Struct<string, null>;
    stakeSubsidyAmount: import("superstruct").Struct<string, null>;
    totalGasFees: import("superstruct").Struct<string, null>;
    totalStakeRewardsDistributed: import("superstruct").Struct<string, null>;
    leftoverStorageFundInflow: import("superstruct").Struct<string, null>;
}>;
export type EndOfEpochInfo = Infer<typeof EndOfEpochInfo>;
export declare const EpochInfo: import("superstruct").Struct<{
    epoch: string;
    validators: {
        description: string;
        name: string;
        pendingStake: string;
        pendingPoolTokenWithdraw: string;
        pendingTotalSuiWithdraw: string;
        poolTokenBalance: string;
        rewardsPool: string;
        suiAddress: string;
        protocolPubkeyBytes: string;
        networkPubkeyBytes: string;
        workerPubkeyBytes: string;
        proofOfPossessionBytes: string;
        operationCapId: string;
        imageUrl: string;
        projectUrl: string;
        p2pAddress: string;
        netAddress: string;
        primaryAddress: string;
        workerAddress: string;
        nextEpochProtocolPubkeyBytes: string | null;
        nextEpochProofOfPossession: string | null;
        nextEpochNetworkPubkeyBytes: string | null;
        nextEpochWorkerPubkeyBytes: string | null;
        nextEpochNetAddress: string | null;
        nextEpochP2pAddress: string | null;
        nextEpochPrimaryAddress: string | null;
        nextEpochWorkerAddress: string | null;
        votingPower: string;
        gasPrice: string;
        commissionRate: string;
        nextEpochStake: string;
        nextEpochGasPrice: string;
        nextEpochCommissionRate: string;
        stakingPoolId: string;
        stakingPoolActivationEpoch: string | null;
        stakingPoolDeactivationEpoch: string | null;
        stakingPoolSuiBalance: string;
        exchangeRatesId: string;
        exchangeRatesSize: string;
    }[];
    referenceGasPrice: number | null;
    epochTotalTransactions: string;
    firstCheckpointId: string;
    epochStartTimestamp: string;
    endOfEpochInfo: {
        storageRebate: string;
        protocolVersion: string;
        referenceGasPrice: string;
        totalStake: string;
        lastCheckpointId: string;
        epochEndTimestamp: string;
        storageFundReinvestment: string;
        storageCharge: string;
        storageFundBalance: string;
        stakeSubsidyAmount: string;
        totalGasFees: string;
        totalStakeRewardsDistributed: string;
        leftoverStorageFundInflow: string;
    } | null;
}, {
    epoch: import("superstruct").Struct<string, null>;
    validators: import("superstruct").Struct<{
        description: string;
        name: string;
        pendingStake: string;
        pendingPoolTokenWithdraw: string;
        pendingTotalSuiWithdraw: string;
        poolTokenBalance: string;
        rewardsPool: string;
        suiAddress: string;
        protocolPubkeyBytes: string;
        networkPubkeyBytes: string;
        workerPubkeyBytes: string;
        proofOfPossessionBytes: string;
        operationCapId: string;
        imageUrl: string;
        projectUrl: string;
        p2pAddress: string;
        netAddress: string;
        primaryAddress: string;
        workerAddress: string;
        nextEpochProtocolPubkeyBytes: string | null;
        nextEpochProofOfPossession: string | null;
        nextEpochNetworkPubkeyBytes: string | null;
        nextEpochWorkerPubkeyBytes: string | null;
        nextEpochNetAddress: string | null;
        nextEpochP2pAddress: string | null;
        nextEpochPrimaryAddress: string | null;
        nextEpochWorkerAddress: string | null;
        votingPower: string;
        gasPrice: string;
        commissionRate: string;
        nextEpochStake: string;
        nextEpochGasPrice: string;
        nextEpochCommissionRate: string;
        stakingPoolId: string;
        stakingPoolActivationEpoch: string | null;
        stakingPoolDeactivationEpoch: string | null;
        stakingPoolSuiBalance: string;
        exchangeRatesId: string;
        exchangeRatesSize: string;
    }[], import("superstruct").Struct<{
        description: string;
        name: string;
        pendingStake: string;
        pendingPoolTokenWithdraw: string;
        pendingTotalSuiWithdraw: string;
        poolTokenBalance: string;
        rewardsPool: string;
        suiAddress: string;
        protocolPubkeyBytes: string;
        networkPubkeyBytes: string;
        workerPubkeyBytes: string;
        proofOfPossessionBytes: string;
        operationCapId: string;
        imageUrl: string;
        projectUrl: string;
        p2pAddress: string;
        netAddress: string;
        primaryAddress: string;
        workerAddress: string;
        nextEpochProtocolPubkeyBytes: string | null;
        nextEpochProofOfPossession: string | null;
        nextEpochNetworkPubkeyBytes: string | null;
        nextEpochWorkerPubkeyBytes: string | null;
        nextEpochNetAddress: string | null;
        nextEpochP2pAddress: string | null;
        nextEpochPrimaryAddress: string | null;
        nextEpochWorkerAddress: string | null;
        votingPower: string;
        gasPrice: string;
        commissionRate: string;
        nextEpochStake: string;
        nextEpochGasPrice: string;
        nextEpochCommissionRate: string;
        stakingPoolId: string;
        stakingPoolActivationEpoch: string | null;
        stakingPoolDeactivationEpoch: string | null;
        stakingPoolSuiBalance: string;
        exchangeRatesId: string;
        exchangeRatesSize: string;
    }, {
        suiAddress: import("superstruct").Struct<string, null>;
        protocolPubkeyBytes: import("superstruct").Struct<string, null>;
        networkPubkeyBytes: import("superstruct").Struct<string, null>;
        workerPubkeyBytes: import("superstruct").Struct<string, null>;
        proofOfPossessionBytes: import("superstruct").Struct<string, null>;
        operationCapId: import("superstruct").Struct<string, null>;
        name: import("superstruct").Struct<string, null>;
        description: import("superstruct").Struct<string, null>;
        imageUrl: import("superstruct").Struct<string, null>;
        projectUrl: import("superstruct").Struct<string, null>;
        p2pAddress: import("superstruct").Struct<string, null>;
        netAddress: import("superstruct").Struct<string, null>;
        primaryAddress: import("superstruct").Struct<string, null>;
        workerAddress: import("superstruct").Struct<string, null>;
        nextEpochProtocolPubkeyBytes: import("superstruct").Struct<string | null, null>;
        nextEpochProofOfPossession: import("superstruct").Struct<string | null, null>;
        nextEpochNetworkPubkeyBytes: import("superstruct").Struct<string | null, null>;
        nextEpochWorkerPubkeyBytes: import("superstruct").Struct<string | null, null>;
        nextEpochNetAddress: import("superstruct").Struct<string | null, null>;
        nextEpochP2pAddress: import("superstruct").Struct<string | null, null>;
        nextEpochPrimaryAddress: import("superstruct").Struct<string | null, null>;
        nextEpochWorkerAddress: import("superstruct").Struct<string | null, null>;
        votingPower: import("superstruct").Struct<string, null>;
        gasPrice: import("superstruct").Struct<string, null>;
        commissionRate: import("superstruct").Struct<string, null>;
        nextEpochStake: import("superstruct").Struct<string, null>;
        nextEpochGasPrice: import("superstruct").Struct<string, null>;
        nextEpochCommissionRate: import("superstruct").Struct<string, null>;
        stakingPoolId: import("superstruct").Struct<string, null>;
        stakingPoolActivationEpoch: import("superstruct").Struct<string | null, null>;
        stakingPoolDeactivationEpoch: import("superstruct").Struct<string | null, null>;
        stakingPoolSuiBalance: import("superstruct").Struct<string, null>;
        rewardsPool: import("superstruct").Struct<string, null>;
        poolTokenBalance: import("superstruct").Struct<string, null>;
        pendingStake: import("superstruct").Struct<string, null>;
        pendingPoolTokenWithdraw: import("superstruct").Struct<string, null>;
        pendingTotalSuiWithdraw: import("superstruct").Struct<string, null>;
        exchangeRatesId: import("superstruct").Struct<string, null>;
        exchangeRatesSize: import("superstruct").Struct<string, null>;
    }>>;
    epochTotalTransactions: import("superstruct").Struct<string, null>;
    firstCheckpointId: import("superstruct").Struct<string, null>;
    epochStartTimestamp: import("superstruct").Struct<string, null>;
    endOfEpochInfo: import("superstruct").Struct<{
        storageRebate: string;
        protocolVersion: string;
        referenceGasPrice: string;
        totalStake: string;
        lastCheckpointId: string;
        epochEndTimestamp: string;
        storageFundReinvestment: string;
        storageCharge: string;
        storageFundBalance: string;
        stakeSubsidyAmount: string;
        totalGasFees: string;
        totalStakeRewardsDistributed: string;
        leftoverStorageFundInflow: string;
    } | null, {
        lastCheckpointId: import("superstruct").Struct<string, null>;
        epochEndTimestamp: import("superstruct").Struct<string, null>;
        protocolVersion: import("superstruct").Struct<string, null>;
        referenceGasPrice: import("superstruct").Struct<string, null>;
        totalStake: import("superstruct").Struct<string, null>;
        storageFundReinvestment: import("superstruct").Struct<string, null>;
        storageCharge: import("superstruct").Struct<string, null>;
        storageRebate: import("superstruct").Struct<string, null>;
        storageFundBalance: import("superstruct").Struct<string, null>;
        stakeSubsidyAmount: import("superstruct").Struct<string, null>;
        totalGasFees: import("superstruct").Struct<string, null>;
        totalStakeRewardsDistributed: import("superstruct").Struct<string, null>;
        leftoverStorageFundInflow: import("superstruct").Struct<string, null>;
    }>;
    referenceGasPrice: import("superstruct").Struct<number | null, null>;
}>;
export type EpochInfo = Infer<typeof EpochInfo>;
export declare const EpochPage: import("superstruct").Struct<{
    data: {
        epoch: string;
        validators: {
            description: string;
            name: string;
            pendingStake: string;
            pendingPoolTokenWithdraw: string;
            pendingTotalSuiWithdraw: string;
            poolTokenBalance: string;
            rewardsPool: string;
            suiAddress: string;
            protocolPubkeyBytes: string;
            networkPubkeyBytes: string;
            workerPubkeyBytes: string;
            proofOfPossessionBytes: string;
            operationCapId: string;
            imageUrl: string;
            projectUrl: string;
            p2pAddress: string;
            netAddress: string;
            primaryAddress: string;
            workerAddress: string;
            nextEpochProtocolPubkeyBytes: string | null;
            nextEpochProofOfPossession: string | null;
            nextEpochNetworkPubkeyBytes: string | null;
            nextEpochWorkerPubkeyBytes: string | null;
            nextEpochNetAddress: string | null;
            nextEpochP2pAddress: string | null;
            nextEpochPrimaryAddress: string | null;
            nextEpochWorkerAddress: string | null;
            votingPower: string;
            gasPrice: string;
            commissionRate: string;
            nextEpochStake: string;
            nextEpochGasPrice: string;
            nextEpochCommissionRate: string;
            stakingPoolId: string;
            stakingPoolActivationEpoch: string | null;
            stakingPoolDeactivationEpoch: string | null;
            stakingPoolSuiBalance: string;
            exchangeRatesId: string;
            exchangeRatesSize: string;
        }[];
        referenceGasPrice: number | null;
        epochTotalTransactions: string;
        firstCheckpointId: string;
        epochStartTimestamp: string;
        endOfEpochInfo: {
            storageRebate: string;
            protocolVersion: string;
            referenceGasPrice: string;
            totalStake: string;
            lastCheckpointId: string;
            epochEndTimestamp: string;
            storageFundReinvestment: string;
            storageCharge: string;
            storageFundBalance: string;
            stakeSubsidyAmount: string;
            totalGasFees: string;
            totalStakeRewardsDistributed: string;
            leftoverStorageFundInflow: string;
        } | null;
    }[];
    nextCursor: string | null;
    hasNextPage: boolean;
}, {
    data: import("superstruct").Struct<{
        epoch: string;
        validators: {
            description: string;
            name: string;
            pendingStake: string;
            pendingPoolTokenWithdraw: string;
            pendingTotalSuiWithdraw: string;
            poolTokenBalance: string;
            rewardsPool: string;
            suiAddress: string;
            protocolPubkeyBytes: string;
            networkPubkeyBytes: string;
            workerPubkeyBytes: string;
            proofOfPossessionBytes: string;
            operationCapId: string;
            imageUrl: string;
            projectUrl: string;
            p2pAddress: string;
            netAddress: string;
            primaryAddress: string;
            workerAddress: string;
            nextEpochProtocolPubkeyBytes: string | null;
            nextEpochProofOfPossession: string | null;
            nextEpochNetworkPubkeyBytes: string | null;
            nextEpochWorkerPubkeyBytes: string | null;
            nextEpochNetAddress: string | null;
            nextEpochP2pAddress: string | null;
            nextEpochPrimaryAddress: string | null;
            nextEpochWorkerAddress: string | null;
            votingPower: string;
            gasPrice: string;
            commissionRate: string;
            nextEpochStake: string;
            nextEpochGasPrice: string;
            nextEpochCommissionRate: string;
            stakingPoolId: string;
            stakingPoolActivationEpoch: string | null;
            stakingPoolDeactivationEpoch: string | null;
            stakingPoolSuiBalance: string;
            exchangeRatesId: string;
            exchangeRatesSize: string;
        }[];
        referenceGasPrice: number | null;
        epochTotalTransactions: string;
        firstCheckpointId: string;
        epochStartTimestamp: string;
        endOfEpochInfo: {
            storageRebate: string;
            protocolVersion: string;
            referenceGasPrice: string;
            totalStake: string;
            lastCheckpointId: string;
            epochEndTimestamp: string;
            storageFundReinvestment: string;
            storageCharge: string;
            storageFundBalance: string;
            stakeSubsidyAmount: string;
            totalGasFees: string;
            totalStakeRewardsDistributed: string;
            leftoverStorageFundInflow: string;
        } | null;
    }[], import("superstruct").Struct<{
        epoch: string;
        validators: {
            description: string;
            name: string;
            pendingStake: string;
            pendingPoolTokenWithdraw: string;
            pendingTotalSuiWithdraw: string;
            poolTokenBalance: string;
            rewardsPool: string;
            suiAddress: string;
            protocolPubkeyBytes: string;
            networkPubkeyBytes: string;
            workerPubkeyBytes: string;
            proofOfPossessionBytes: string;
            operationCapId: string;
            imageUrl: string;
            projectUrl: string;
            p2pAddress: string;
            netAddress: string;
            primaryAddress: string;
            workerAddress: string;
            nextEpochProtocolPubkeyBytes: string | null;
            nextEpochProofOfPossession: string | null;
            nextEpochNetworkPubkeyBytes: string | null;
            nextEpochWorkerPubkeyBytes: string | null;
            nextEpochNetAddress: string | null;
            nextEpochP2pAddress: string | null;
            nextEpochPrimaryAddress: string | null;
            nextEpochWorkerAddress: string | null;
            votingPower: string;
            gasPrice: string;
            commissionRate: string;
            nextEpochStake: string;
            nextEpochGasPrice: string;
            nextEpochCommissionRate: string;
            stakingPoolId: string;
            stakingPoolActivationEpoch: string | null;
            stakingPoolDeactivationEpoch: string | null;
            stakingPoolSuiBalance: string;
            exchangeRatesId: string;
            exchangeRatesSize: string;
        }[];
        referenceGasPrice: number | null;
        epochTotalTransactions: string;
        firstCheckpointId: string;
        epochStartTimestamp: string;
        endOfEpochInfo: {
            storageRebate: string;
            protocolVersion: string;
            referenceGasPrice: string;
            totalStake: string;
            lastCheckpointId: string;
            epochEndTimestamp: string;
            storageFundReinvestment: string;
            storageCharge: string;
            storageFundBalance: string;
            stakeSubsidyAmount: string;
            totalGasFees: string;
            totalStakeRewardsDistributed: string;
            leftoverStorageFundInflow: string;
        } | null;
    }, {
        epoch: import("superstruct").Struct<string, null>;
        validators: import("superstruct").Struct<{
            description: string;
            name: string;
            pendingStake: string;
            pendingPoolTokenWithdraw: string;
            pendingTotalSuiWithdraw: string;
            poolTokenBalance: string;
            rewardsPool: string;
            suiAddress: string;
            protocolPubkeyBytes: string;
            networkPubkeyBytes: string;
            workerPubkeyBytes: string;
            proofOfPossessionBytes: string;
            operationCapId: string;
            imageUrl: string;
            projectUrl: string;
            p2pAddress: string;
            netAddress: string;
            primaryAddress: string;
            workerAddress: string;
            nextEpochProtocolPubkeyBytes: string | null;
            nextEpochProofOfPossession: string | null;
            nextEpochNetworkPubkeyBytes: string | null;
            nextEpochWorkerPubkeyBytes: string | null;
            nextEpochNetAddress: string | null;
            nextEpochP2pAddress: string | null;
            nextEpochPrimaryAddress: string | null;
            nextEpochWorkerAddress: string | null;
            votingPower: string;
            gasPrice: string;
            commissionRate: string;
            nextEpochStake: string;
            nextEpochGasPrice: string;
            nextEpochCommissionRate: string;
            stakingPoolId: string;
            stakingPoolActivationEpoch: string | null;
            stakingPoolDeactivationEpoch: string | null;
            stakingPoolSuiBalance: string;
            exchangeRatesId: string;
            exchangeRatesSize: string;
        }[], import("superstruct").Struct<{
            description: string;
            name: string;
            pendingStake: string;
            pendingPoolTokenWithdraw: string;
            pendingTotalSuiWithdraw: string;
            poolTokenBalance: string;
            rewardsPool: string;
            suiAddress: string;
            protocolPubkeyBytes: string;
            networkPubkeyBytes: string;
            workerPubkeyBytes: string;
            proofOfPossessionBytes: string;
            operationCapId: string;
            imageUrl: string;
            projectUrl: string;
            p2pAddress: string;
            netAddress: string;
            primaryAddress: string;
            workerAddress: string;
            nextEpochProtocolPubkeyBytes: string | null;
            nextEpochProofOfPossession: string | null;
            nextEpochNetworkPubkeyBytes: string | null;
            nextEpochWorkerPubkeyBytes: string | null;
            nextEpochNetAddress: string | null;
            nextEpochP2pAddress: string | null;
            nextEpochPrimaryAddress: string | null;
            nextEpochWorkerAddress: string | null;
            votingPower: string;
            gasPrice: string;
            commissionRate: string;
            nextEpochStake: string;
            nextEpochGasPrice: string;
            nextEpochCommissionRate: string;
            stakingPoolId: string;
            stakingPoolActivationEpoch: string | null;
            stakingPoolDeactivationEpoch: string | null;
            stakingPoolSuiBalance: string;
            exchangeRatesId: string;
            exchangeRatesSize: string;
        }, {
            suiAddress: import("superstruct").Struct<string, null>;
            protocolPubkeyBytes: import("superstruct").Struct<string, null>;
            networkPubkeyBytes: import("superstruct").Struct<string, null>;
            workerPubkeyBytes: import("superstruct").Struct<string, null>;
            proofOfPossessionBytes: import("superstruct").Struct<string, null>;
            operationCapId: import("superstruct").Struct<string, null>;
            name: import("superstruct").Struct<string, null>;
            description: import("superstruct").Struct<string, null>;
            imageUrl: import("superstruct").Struct<string, null>;
            projectUrl: import("superstruct").Struct<string, null>;
            p2pAddress: import("superstruct").Struct<string, null>;
            netAddress: import("superstruct").Struct<string, null>;
            primaryAddress: import("superstruct").Struct<string, null>;
            workerAddress: import("superstruct").Struct<string, null>;
            nextEpochProtocolPubkeyBytes: import("superstruct").Struct<string | null, null>;
            nextEpochProofOfPossession: import("superstruct").Struct<string | null, null>;
            nextEpochNetworkPubkeyBytes: import("superstruct").Struct<string | null, null>;
            nextEpochWorkerPubkeyBytes: import("superstruct").Struct<string | null, null>;
            nextEpochNetAddress: import("superstruct").Struct<string | null, null>;
            nextEpochP2pAddress: import("superstruct").Struct<string | null, null>;
            nextEpochPrimaryAddress: import("superstruct").Struct<string | null, null>;
            nextEpochWorkerAddress: import("superstruct").Struct<string | null, null>;
            votingPower: import("superstruct").Struct<string, null>;
            gasPrice: import("superstruct").Struct<string, null>;
            commissionRate: import("superstruct").Struct<string, null>;
            nextEpochStake: import("superstruct").Struct<string, null>;
            nextEpochGasPrice: import("superstruct").Struct<string, null>;
            nextEpochCommissionRate: import("superstruct").Struct<string, null>;
            stakingPoolId: import("superstruct").Struct<string, null>;
            stakingPoolActivationEpoch: import("superstruct").Struct<string | null, null>;
            stakingPoolDeactivationEpoch: import("superstruct").Struct<string | null, null>;
            stakingPoolSuiBalance: import("superstruct").Struct<string, null>;
            rewardsPool: import("superstruct").Struct<string, null>;
            poolTokenBalance: import("superstruct").Struct<string, null>;
            pendingStake: import("superstruct").Struct<string, null>;
            pendingPoolTokenWithdraw: import("superstruct").Struct<string, null>;
            pendingTotalSuiWithdraw: import("superstruct").Struct<string, null>;
            exchangeRatesId: import("superstruct").Struct<string, null>;
            exchangeRatesSize: import("superstruct").Struct<string, null>;
        }>>;
        epochTotalTransactions: import("superstruct").Struct<string, null>;
        firstCheckpointId: import("superstruct").Struct<string, null>;
        epochStartTimestamp: import("superstruct").Struct<string, null>;
        endOfEpochInfo: import("superstruct").Struct<{
            storageRebate: string;
            protocolVersion: string;
            referenceGasPrice: string;
            totalStake: string;
            lastCheckpointId: string;
            epochEndTimestamp: string;
            storageFundReinvestment: string;
            storageCharge: string;
            storageFundBalance: string;
            stakeSubsidyAmount: string;
            totalGasFees: string;
            totalStakeRewardsDistributed: string;
            leftoverStorageFundInflow: string;
        } | null, {
            lastCheckpointId: import("superstruct").Struct<string, null>;
            epochEndTimestamp: import("superstruct").Struct<string, null>;
            protocolVersion: import("superstruct").Struct<string, null>;
            referenceGasPrice: import("superstruct").Struct<string, null>;
            totalStake: import("superstruct").Struct<string, null>;
            storageFundReinvestment: import("superstruct").Struct<string, null>;
            storageCharge: import("superstruct").Struct<string, null>;
            storageRebate: import("superstruct").Struct<string, null>;
            storageFundBalance: import("superstruct").Struct<string, null>;
            stakeSubsidyAmount: import("superstruct").Struct<string, null>;
            totalGasFees: import("superstruct").Struct<string, null>;
            totalStakeRewardsDistributed: import("superstruct").Struct<string, null>;
            leftoverStorageFundInflow: import("superstruct").Struct<string, null>;
        }>;
        referenceGasPrice: import("superstruct").Struct<number | null, null>;
    }>>;
    nextCursor: import("superstruct").Struct<string | null, null>;
    hasNextPage: import("superstruct").Struct<boolean, null>;
}>;
export type EpochPage = Infer<typeof EpochPage>;
