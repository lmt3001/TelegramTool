{
  "version": 3,
  "sources": ["../../../src/types/transactions.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tis,\n\tarray,\n\tliteral,\n\tnumber,\n\tobject,\n\toptional,\n\tstring,\n\tunion,\n\tboolean,\n\ttuple,\n\tassign,\n\tnullable,\n} from 'superstruct';\n\nimport {\n\tObjectId,\n\tObjectOwner,\n\tSequenceNumber,\n\tSuiAddress,\n\tSuiJsonValue,\n\tTransactionDigest,\n\tTransactionEventDigest,\n} from './common.js';\nimport { SuiEvent } from './events.js';\nimport { ObjectDigest, SuiGasData, SuiMovePackage, SuiObjectRef } from './objects.js';\n\nexport const EpochId = string();\n\nexport const SuiChangeEpoch = object({\n\tepoch: EpochId,\n\tstorage_charge: string(),\n\tcomputation_charge: string(),\n\tstorage_rebate: string(),\n\tepoch_start_timestamp_ms: optional(string()),\n});\nexport type SuiChangeEpoch = Infer<typeof SuiChangeEpoch>;\n\nexport const SuiConsensusCommitPrologue = object({\n\tepoch: EpochId,\n\tround: string(),\n\tcommit_timestamp_ms: string(),\n});\nexport type SuiConsensusCommitPrologue = Infer<typeof SuiConsensusCommitPrologue>;\n\nexport const Genesis = object({\n\tobjects: array(ObjectId),\n});\nexport type Genesis = Infer<typeof Genesis>;\n\nexport const SuiArgument = union([\n\tliteral('GasCoin'),\n\tobject({ Input: number() }),\n\tobject({ Result: number() }),\n\tobject({ NestedResult: tuple([number(), number()]) }),\n]);\nexport type SuiArgument = Infer<typeof SuiArgument>;\n\nexport const MoveCallSuiTransaction = object({\n\targuments: optional(array(SuiArgument)),\n\ttype_arguments: optional(array(string())),\n\tpackage: ObjectId,\n\tmodule: string(),\n\tfunction: string(),\n});\nexport type MoveCallSuiTransaction = Infer<typeof MoveCallSuiTransaction>;\n\nexport const SuiTransaction = union([\n\tobject({ MoveCall: MoveCallSuiTransaction }),\n\tobject({ TransferObjects: tuple([array(SuiArgument), SuiArgument]) }),\n\tobject({ SplitCoins: tuple([SuiArgument, array(SuiArgument)]) }),\n\tobject({ MergeCoins: tuple([SuiArgument, array(SuiArgument)]) }),\n\tobject({\n\t\tPublish: union([\n\t\t\t// TODO: Remove this after 0.34 is released:\n\t\t\ttuple([SuiMovePackage, array(ObjectId)]),\n\t\t\tarray(ObjectId),\n\t\t]),\n\t}),\n\tobject({\n\t\tUpgrade: union([\n\t\t\t// TODO: Remove this after 0.34 is released:\n\t\t\ttuple([SuiMovePackage, array(ObjectId), ObjectId, SuiArgument]),\n\t\t\ttuple([array(ObjectId), ObjectId, SuiArgument]),\n\t\t]),\n\t}),\n\tobject({ MakeMoveVec: tuple([nullable(string()), array(SuiArgument)]) }),\n]);\n\nexport const SuiCallArg = union([\n\tobject({\n\t\ttype: literal('pure'),\n\t\tvalueType: nullable(string()),\n\t\tvalue: SuiJsonValue,\n\t}),\n\tobject({\n\t\ttype: literal('object'),\n\t\tobjectType: literal('immOrOwnedObject'),\n\t\tobjectId: ObjectId,\n\t\tversion: SequenceNumber,\n\t\tdigest: ObjectDigest,\n\t}),\n\tobject({\n\t\ttype: literal('object'),\n\t\tobjectType: literal('sharedObject'),\n\t\tobjectId: ObjectId,\n\t\tinitialSharedVersion: SequenceNumber,\n\t\tmutable: boolean(),\n\t}),\n]);\nexport type SuiCallArg = Infer<typeof SuiCallArg>;\n\nexport const ProgrammableTransaction = object({\n\ttransactions: array(SuiTransaction),\n\tinputs: array(SuiCallArg),\n});\nexport type ProgrammableTransaction = Infer<typeof ProgrammableTransaction>;\nexport type SuiTransaction = Infer<typeof SuiTransaction>;\n\n/**\n * 1. WaitForEffectsCert: waits for TransactionEffectsCert and then returns to the client.\n *    This mode is a proxy for transaction finality.\n * 2. WaitForLocalExecution: waits for TransactionEffectsCert and makes sure the node\n *    executed the transaction locally before returning to the client. The local execution\n *    makes sure this node is aware of this transaction when the client fires subsequent queries.\n *    However, if the node fails to execute the transaction locally in a timely manner,\n *    a bool type in the response is set to false to indicate the case.\n */\nexport type ExecuteTransactionRequestType = 'WaitForEffectsCert' | 'WaitForLocalExecution';\n\nexport type TransactionKindName =\n\t| 'ChangeEpoch'\n\t| 'ConsensusCommitPrologue'\n\t| 'Genesis'\n\t| 'ProgrammableTransaction';\n\nexport const SuiTransactionBlockKind = union([\n\tassign(SuiChangeEpoch, object({ kind: literal('ChangeEpoch') })),\n\tassign(\n\t\tSuiConsensusCommitPrologue,\n\t\tobject({\n\t\t\tkind: literal('ConsensusCommitPrologue'),\n\t\t}),\n\t),\n\tassign(Genesis, object({ kind: literal('Genesis') })),\n\tassign(ProgrammableTransaction, object({ kind: literal('ProgrammableTransaction') })),\n]);\nexport type SuiTransactionBlockKind = Infer<typeof SuiTransactionBlockKind>;\n\nexport const SuiTransactionBlockData = object({\n\t// Eventually this will become union(literal('v1'), literal('v2'), ...)\n\tmessageVersion: literal('v1'),\n\ttransaction: SuiTransactionBlockKind,\n\tsender: SuiAddress,\n\tgasData: SuiGasData,\n});\nexport type SuiTransactionBlockData = Infer<typeof SuiTransactionBlockData>;\n\nexport const AuthoritySignature = string();\nexport const GenericAuthoritySignature = union([AuthoritySignature, array(AuthoritySignature)]);\n\nexport const AuthorityQuorumSignInfo = object({\n\tepoch: EpochId,\n\tsignature: GenericAuthoritySignature,\n\tsigners_map: array(number()),\n});\nexport type AuthorityQuorumSignInfo = Infer<typeof AuthorityQuorumSignInfo>;\n\nexport const GasCostSummary = object({\n\tcomputationCost: string(),\n\tstorageCost: string(),\n\tstorageRebate: string(),\n\tnonRefundableStorageFee: string(),\n});\nexport type GasCostSummary = Infer<typeof GasCostSummary>;\n\nexport const ExecutionStatusType = union([literal('success'), literal('failure')]);\nexport type ExecutionStatusType = Infer<typeof ExecutionStatusType>;\n\nexport const ExecutionStatus = object({\n\tstatus: ExecutionStatusType,\n\terror: optional(string()),\n});\nexport type ExecutionStatus = Infer<typeof ExecutionStatus>;\n\nexport const OwnedObjectRef = object({\n\towner: ObjectOwner,\n\treference: SuiObjectRef,\n});\nexport type OwnedObjectRef = Infer<typeof OwnedObjectRef>;\nexport const TransactionEffectsModifiedAtVersions = object({\n\tobjectId: ObjectId,\n\tsequenceNumber: SequenceNumber,\n});\n\nexport const TransactionEffects = object({\n\t// Eventually this will become union(literal('v1'), literal('v2'), ...)\n\tmessageVersion: literal('v1'),\n\n\t/** The status of the execution */\n\tstatus: ExecutionStatus,\n\t/** The epoch when this transaction was executed */\n\texecutedEpoch: EpochId,\n\t/** The version that every modified (mutated or deleted) object had before it was modified by this transaction. **/\n\tmodifiedAtVersions: optional(array(TransactionEffectsModifiedAtVersions)),\n\tgasUsed: GasCostSummary,\n\t/** The object references of the shared objects used in this transaction. Empty if no shared objects were used. */\n\tsharedObjects: optional(array(SuiObjectRef)),\n\t/** The transaction digest */\n\ttransactionDigest: TransactionDigest,\n\t/** ObjectRef and owner of new objects created */\n\tcreated: optional(array(OwnedObjectRef)),\n\t/** ObjectRef and owner of mutated objects, including gas object */\n\tmutated: optional(array(OwnedObjectRef)),\n\t/**\n\t * ObjectRef and owner of objects that are unwrapped in this transaction.\n\t * Unwrapped objects are objects that were wrapped into other objects in the past,\n\t * and just got extracted out.\n\t */\n\tunwrapped: optional(array(OwnedObjectRef)),\n\t/** Object Refs of objects now deleted (the old refs) */\n\tdeleted: optional(array(SuiObjectRef)),\n\t/** Object Refs of objects now deleted (the old refs) */\n\tunwrappedThenDeleted: optional(array(SuiObjectRef)),\n\t/** Object refs of objects now wrapped in other objects */\n\twrapped: optional(array(SuiObjectRef)),\n\t/**\n\t * The updated gas object reference. Have a dedicated field for convenient access.\n\t * It's also included in mutated.\n\t */\n\tgasObject: OwnedObjectRef,\n\t/** The events emitted during execution. Note that only successful transactions emit events */\n\teventsDigest: optional(TransactionEventDigest),\n\t/** The set of transaction digests this transaction depends on */\n\tdependencies: optional(array(TransactionDigest)),\n});\nexport type TransactionEffects = Infer<typeof TransactionEffects>;\n\nexport const TransactionEvents = array(SuiEvent);\nexport type TransactionEvents = Infer<typeof TransactionEvents>;\n\nconst ReturnValueType = tuple([array(number()), string()]);\nconst MutableReferenceOutputType = tuple([SuiArgument, array(number()), string()]);\nconst ExecutionResultType = object({\n\tmutableReferenceOutputs: optional(array(MutableReferenceOutputType)),\n\treturnValues: optional(array(ReturnValueType)),\n});\n\nexport const DevInspectResults = object({\n\teffects: TransactionEffects,\n\tevents: TransactionEvents,\n\tresults: optional(array(ExecutionResultType)),\n\terror: optional(string()),\n});\nexport type DevInspectResults = Infer<typeof DevInspectResults>;\n\nexport type SuiTransactionBlockResponseQuery = {\n\tfilter?: TransactionFilter;\n\toptions?: SuiTransactionBlockResponseOptions;\n};\n\nexport type TransactionFilter =\n\t| { Checkpoint: string }\n\t| { FromAndToAddress: { from: string; to: string } }\n\t| { TransactionKind: string }\n\t| {\n\t\t\tMoveFunction: {\n\t\t\t\tpackage: ObjectId;\n\t\t\t\tmodule: string | null;\n\t\t\t\tfunction: string | null;\n\t\t\t};\n\t  }\n\t| { InputObject: ObjectId }\n\t| { ChangedObject: ObjectId }\n\t| { FromAddress: SuiAddress }\n\t| { ToAddress: SuiAddress };\n\nexport type EmptySignInfo = object;\nexport type AuthorityName = Infer<typeof AuthorityName>;\nexport const AuthorityName = string();\n\nexport const SuiTransactionBlock = object({\n\tdata: SuiTransactionBlockData,\n\ttxSignatures: array(string()),\n});\nexport type SuiTransactionBlock = Infer<typeof SuiTransactionBlock>;\n\nexport const SuiObjectChangePublished = object({\n\ttype: literal('published'),\n\tpackageId: ObjectId,\n\tversion: SequenceNumber,\n\tdigest: ObjectDigest,\n\tmodules: array(string()),\n});\nexport type SuiObjectChangePublished = Infer<typeof SuiObjectChangePublished>;\n\nexport const SuiObjectChangeTransferred = object({\n\ttype: literal('transferred'),\n\tsender: SuiAddress,\n\trecipient: ObjectOwner,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n\tdigest: ObjectDigest,\n});\nexport type SuiObjectChangeTransferred = Infer<typeof SuiObjectChangeTransferred>;\n\nexport const SuiObjectChangeMutated = object({\n\ttype: literal('mutated'),\n\tsender: SuiAddress,\n\towner: ObjectOwner,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n\tpreviousVersion: SequenceNumber,\n\tdigest: ObjectDigest,\n});\nexport type SuiObjectChangeMutated = Infer<typeof SuiObjectChangeMutated>;\n\nexport const SuiObjectChangeDeleted = object({\n\ttype: literal('deleted'),\n\tsender: SuiAddress,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n});\nexport type SuiObjectChangeDeleted = Infer<typeof SuiObjectChangeDeleted>;\n\nexport const SuiObjectChangeWrapped = object({\n\ttype: literal('wrapped'),\n\tsender: SuiAddress,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n});\nexport type SuiObjectChangeWrapped = Infer<typeof SuiObjectChangeWrapped>;\n\nexport const SuiObjectChangeCreated = object({\n\ttype: literal('created'),\n\tsender: SuiAddress,\n\towner: ObjectOwner,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n\tdigest: ObjectDigest,\n});\nexport type SuiObjectChangeCreated = Infer<typeof SuiObjectChangeCreated>;\n\nexport const SuiObjectChange = union([\n\tSuiObjectChangePublished,\n\tSuiObjectChangeTransferred,\n\tSuiObjectChangeMutated,\n\tSuiObjectChangeDeleted,\n\tSuiObjectChangeWrapped,\n\tSuiObjectChangeCreated,\n]);\nexport type SuiObjectChange = Infer<typeof SuiObjectChange>;\n\nexport const BalanceChange = object({\n\towner: ObjectOwner,\n\tcoinType: string(),\n\t/* Coin balance change(positive means receive, negative means send) */\n\tamount: string(),\n});\n\nexport const SuiTransactionBlockResponse = object({\n\tdigest: TransactionDigest,\n\ttransaction: optional(SuiTransactionBlock),\n\teffects: optional(TransactionEffects),\n\tevents: optional(TransactionEvents),\n\ttimestampMs: optional(string()),\n\tcheckpoint: optional(string()),\n\tconfirmedLocalExecution: optional(boolean()),\n\tobjectChanges: optional(array(SuiObjectChange)),\n\tbalanceChanges: optional(array(BalanceChange)),\n\t/* Errors that occurred in fetching/serializing the transaction. */\n\terrors: optional(array(string())),\n});\nexport type SuiTransactionBlockResponse = Infer<typeof SuiTransactionBlockResponse>;\n\nexport const SuiTransactionBlockResponseOptions = object({\n\t/* Whether to show transaction input data. Default to be false. */\n\tshowInput: optional(boolean()),\n\t/* Whether to show transaction effects. Default to be false. */\n\tshowEffects: optional(boolean()),\n\t/* Whether to show transaction events. Default to be false. */\n\tshowEvents: optional(boolean()),\n\t/* Whether to show object changes. Default to be false. */\n\tshowObjectChanges: optional(boolean()),\n\t/* Whether to show coin balance changes. Default to be false. */\n\tshowBalanceChanges: optional(boolean()),\n});\n\nexport type SuiTransactionBlockResponseOptions = Infer<typeof SuiTransactionBlockResponseOptions>;\n\nexport const PaginatedTransactionResponse = object({\n\tdata: array(SuiTransactionBlockResponse),\n\tnextCursor: nullable(TransactionDigest),\n\thasNextPage: boolean(),\n});\nexport type PaginatedTransactionResponse = Infer<typeof PaginatedTransactionResponse>;\nexport const DryRunTransactionBlockResponse = object({\n\teffects: TransactionEffects,\n\tevents: TransactionEvents,\n\tobjectChanges: array(SuiObjectChange),\n\tbalanceChanges: array(BalanceChange),\n\t// TODO: Remove optional when this is rolled out to all networks:\n\tinput: optional(SuiTransactionBlockData),\n});\nexport type DryRunTransactionBlockResponse = Infer<typeof DryRunTransactionBlockResponse>;\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\nexport function getTransaction(tx: SuiTransactionBlockResponse): SuiTransactionBlock | undefined {\n\treturn tx.transaction;\n}\n\nexport function getTransactionDigest(tx: SuiTransactionBlockResponse): TransactionDigest {\n\treturn tx.digest;\n}\n\nexport function getTransactionSignature(tx: SuiTransactionBlockResponse): string[] | undefined {\n\treturn tx.transaction?.txSignatures;\n}\n\n/* ----------------------------- TransactionData ---------------------------- */\n\nexport function getTransactionSender(tx: SuiTransactionBlockResponse): SuiAddress | undefined {\n\treturn tx.transaction?.data.sender;\n}\n\nexport function getGasData(tx: SuiTransactionBlockResponse): SuiGasData | undefined {\n\treturn tx.transaction?.data.gasData;\n}\n\nexport function getTransactionGasObject(\n\ttx: SuiTransactionBlockResponse,\n): SuiObjectRef[] | undefined {\n\treturn getGasData(tx)?.payment;\n}\n\nexport function getTransactionGasPrice(tx: SuiTransactionBlockResponse) {\n\treturn getGasData(tx)?.price;\n}\n\nexport function getTransactionGasBudget(tx: SuiTransactionBlockResponse) {\n\treturn getGasData(tx)?.budget;\n}\n\nexport function getChangeEpochTransaction(\n\tdata: SuiTransactionBlockKind,\n): SuiChangeEpoch | undefined {\n\treturn data.kind === 'ChangeEpoch' ? data : undefined;\n}\n\nexport function getConsensusCommitPrologueTransaction(\n\tdata: SuiTransactionBlockKind,\n): SuiConsensusCommitPrologue | undefined {\n\treturn data.kind === 'ConsensusCommitPrologue' ? data : undefined;\n}\n\nexport function getTransactionKind(\n\tdata: SuiTransactionBlockResponse,\n): SuiTransactionBlockKind | undefined {\n\treturn data.transaction?.data.transaction;\n}\n\nexport function getTransactionKindName(data: SuiTransactionBlockKind): TransactionKindName {\n\treturn data.kind;\n}\n\nexport function getProgrammableTransaction(\n\tdata: SuiTransactionBlockKind,\n): ProgrammableTransaction | undefined {\n\treturn data.kind === 'ProgrammableTransaction' ? data : undefined;\n}\n\n/* ----------------------------- ExecutionStatus ---------------------------- */\n\nexport function getExecutionStatusType(\n\tdata: SuiTransactionBlockResponse,\n): ExecutionStatusType | undefined {\n\treturn getExecutionStatus(data)?.status;\n}\n\nexport function getExecutionStatus(data: SuiTransactionBlockResponse): ExecutionStatus | undefined {\n\treturn getTransactionEffects(data)?.status;\n}\n\nexport function getExecutionStatusError(data: SuiTransactionBlockResponse): string | undefined {\n\treturn getExecutionStatus(data)?.error;\n}\n\nexport function getExecutionStatusGasSummary(\n\tdata: SuiTransactionBlockResponse | TransactionEffects,\n): GasCostSummary | undefined {\n\tif (is(data, TransactionEffects)) {\n\t\treturn data.gasUsed;\n\t}\n\treturn getTransactionEffects(data)?.gasUsed;\n}\n\nexport function getTotalGasUsed(\n\tdata: SuiTransactionBlockResponse | TransactionEffects,\n): bigint | undefined {\n\tconst gasSummary = getExecutionStatusGasSummary(data);\n\treturn gasSummary\n\t\t? BigInt(gasSummary.computationCost) +\n\t\t\t\tBigInt(gasSummary.storageCost) -\n\t\t\t\tBigInt(gasSummary.storageRebate)\n\t\t: undefined;\n}\n\nexport function getTotalGasUsedUpperBound(\n\tdata: SuiTransactionBlockResponse | TransactionEffects,\n): bigint | undefined {\n\tconst gasSummary = getExecutionStatusGasSummary(data);\n\treturn gasSummary\n\t\t? BigInt(gasSummary.computationCost) + BigInt(gasSummary.storageCost)\n\t\t: undefined;\n}\n\nexport function getTransactionEffects(\n\tdata: SuiTransactionBlockResponse,\n): TransactionEffects | undefined {\n\treturn data.effects;\n}\n\n/* ---------------------------- Transaction Effects --------------------------- */\n\nexport function getEvents(data: SuiTransactionBlockResponse): SuiEvent[] | undefined {\n\treturn data.events;\n}\n\nexport function getCreatedObjects(data: SuiTransactionBlockResponse): OwnedObjectRef[] | undefined {\n\treturn getTransactionEffects(data)?.created;\n}\n\n/* --------------------------- TransactionResponse -------------------------- */\n\nexport function getTimestampFromTransactionResponse(\n\tdata: SuiTransactionBlockResponse,\n): string | undefined {\n\treturn data.timestampMs ?? undefined;\n}\n\n/**\n * Get the newly created coin refs after a split.\n */\nexport function getNewlyCreatedCoinRefsAfterSplit(\n\tdata: SuiTransactionBlockResponse,\n): SuiObjectRef[] | undefined {\n\treturn getTransactionEffects(data)?.created?.map((c) => c.reference);\n}\n\nexport function getObjectChanges(data: SuiTransactionBlockResponse): SuiObjectChange[] | undefined {\n\treturn data.objectChanges;\n}\n\nexport function getPublishedObjectChanges(\n\tdata: SuiTransactionBlockResponse,\n): SuiObjectChangePublished[] {\n\treturn (\n\t\t(data.objectChanges?.filter((a) =>\n\t\t\tis(a, SuiObjectChangePublished),\n\t\t) as SuiObjectChangePublished[]) ?? []\n\t);\n}\n"],
  "mappings": "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",
  "names": []
}
