{
  "version": 3,
  "sources": ["../../../src/types/sui-bcs.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumTypeDefinition, StructTypeDefinition } from '@mysten/bcs';\nimport { BCS, getSuiMoveConfig } from '@mysten/bcs';\nimport type { SuiObjectRef } from './objects.js';\n\n/**\n * A reference to a shared object.\n */\nexport type SharedObjectRef = {\n\t/** Hex code as string representing the object id */\n\tobjectId: string;\n\n\t/** The version the object was shared at */\n\tinitialSharedVersion: number | string;\n\n\t/** Whether reference is mutable */\n\tmutable: boolean;\n};\n\n/**\n * An object argument.\n */\nexport type ObjectArg = { ImmOrOwned: SuiObjectRef } | { Shared: SharedObjectRef };\n\n/**\n * A pure argument.\n */\nexport type PureArg = { Pure: ArrayLike<number> };\n\nexport function isPureArg(arg: any): arg is PureArg {\n\treturn (arg as PureArg).Pure !== undefined;\n}\n\n/**\n * An argument for the transaction. It is a 'meant' enum which expects to have\n * one of the optional properties. If not, the BCS error will be thrown while\n * attempting to form a transaction.\n *\n * Example:\n * ```js\n * let arg1: CallArg = { Object: { Shared: {\n *   objectId: '5460cf92b5e3e7067aaace60d88324095fd22944',\n *   initialSharedVersion: 1,\n *   mutable: true,\n * } } };\n * let arg2: CallArg = { Pure: bcs.ser(BCS.STRING, 100000).toBytes() };\n * let arg3: CallArg = { Object: { ImmOrOwned: {\n *   objectId: '4047d2e25211d87922b6650233bd0503a6734279',\n *   version: 1,\n *   digest: 'bCiANCht4O9MEUhuYjdRCqRPZjr2rJ8MfqNiwyhmRgA='\n * } } };\n * ```\n *\n * For `Pure` arguments BCS is required. You must encode the values with BCS according\n * to the type required by the called function. Pure accepts only serialized values\n */\nexport type CallArg = PureArg | { Object: ObjectArg };\n\n/**\n * Kind of a TypeTag which is represented by a Move type identifier.\n */\nexport type StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: TypeTag[];\n};\n\n/**\n * Sui TypeTag object. A decoupled `0x...::module::Type<???>` parameter.\n */\nexport type TypeTag =\n\t| { bool: null }\n\t| { u8: null }\n\t| { u64: null }\n\t| { u128: null }\n\t| { address: null }\n\t| { signer: null }\n\t| { vector: TypeTag }\n\t| { struct: StructTag }\n\t| { u16: null }\n\t| { u32: null }\n\t| { u256: null };\n\n// ========== TransactionData ===========\n\n/**\n * The GasData to be used in the transaction.\n */\nexport type GasData = {\n\tpayment: SuiObjectRef[];\n\towner: string; // Gas Object's owner\n\tprice: number;\n\tbudget: number;\n};\n\n/**\n * TransactionExpiration\n *\n * Indications the expiration time for a transaction.\n */\nexport type TransactionExpiration = { None: null } | { Epoch: number };\n\n// Move name of the Vector type.\nconst VECTOR = 'vector';\n\n// Imported to explicitly tell typescript that types match\ntype TypeSchema = {\n\tstructs?: { [key: string]: StructTypeDefinition };\n\tenums?: { [key: string]: EnumTypeDefinition };\n\taliases?: { [key: string]: string };\n};\n\nconst TransactionDataV1 = {\n\tkind: 'TransactionKind',\n\tsender: BCS.ADDRESS,\n\tgasData: 'GasData',\n\texpiration: 'TransactionExpiration',\n};\n\nconst BCS_SPEC: TypeSchema = {\n\tenums: {\n\t\t'Option<T>': {\n\t\t\tNone: null,\n\t\t\tSome: 'T',\n\t\t},\n\t\tObjectArg: {\n\t\t\tImmOrOwned: 'SuiObjectRef',\n\t\t\tShared: 'SharedObjectRef',\n\t\t},\n\t\tCallArg: {\n\t\t\tPure: [VECTOR, BCS.U8],\n\t\t\tObject: 'ObjectArg',\n\t\t\tObjVec: [VECTOR, 'ObjectArg'],\n\t\t},\n\t\tTypeTag: {\n\t\t\tbool: null,\n\t\t\tu8: null,\n\t\t\tu64: null,\n\t\t\tu128: null,\n\t\t\taddress: null,\n\t\t\tsigner: null,\n\t\t\tvector: 'TypeTag',\n\t\t\tstruct: 'StructTag',\n\t\t\tu16: null,\n\t\t\tu32: null,\n\t\t\tu256: null,\n\t\t},\n\t\tTransactionKind: {\n\t\t\t// can not be called from sui.js; dummy placement\n\t\t\t// to set the enum counter right for ProgrammableTransact\n\t\t\tProgrammableTransaction: 'ProgrammableTransaction',\n\t\t\tChangeEpoch: null,\n\t\t\tGenesis: null,\n\t\t\tConsensusCommitPrologue: null,\n\t\t},\n\t\tTransactionExpiration: {\n\t\t\tNone: null,\n\t\t\tEpoch: 'unsafe_u64',\n\t\t},\n\t\tTransactionData: {\n\t\t\tV1: 'TransactionDataV1',\n\t\t},\n\t},\n\tstructs: {\n\t\tSuiObjectRef: {\n\t\t\tobjectId: BCS.ADDRESS,\n\t\t\tversion: BCS.U64,\n\t\t\tdigest: 'ObjectDigest',\n\t\t},\n\t\tSharedObjectRef: {\n\t\t\tobjectId: BCS.ADDRESS,\n\t\t\tinitialSharedVersion: BCS.U64,\n\t\t\tmutable: BCS.BOOL,\n\t\t},\n\t\tStructTag: {\n\t\t\taddress: BCS.ADDRESS,\n\t\t\tmodule: BCS.STRING,\n\t\t\tname: BCS.STRING,\n\t\t\ttypeParams: [VECTOR, 'TypeTag'],\n\t\t},\n\t\tGasData: {\n\t\t\tpayment: [VECTOR, 'SuiObjectRef'],\n\t\t\towner: BCS.ADDRESS,\n\t\t\tprice: BCS.U64,\n\t\t\tbudget: BCS.U64,\n\t\t},\n\t\t// Signed transaction data needed to generate transaction digest.\n\t\tSenderSignedData: {\n\t\t\tdata: 'TransactionData',\n\t\t\ttxSignatures: [VECTOR, [VECTOR, BCS.U8]],\n\t\t},\n\t\tTransactionDataV1,\n\t},\n\taliases: {\n\t\tObjectDigest: BCS.BASE58,\n\t},\n};\n\nconst bcs = new BCS({ ...getSuiMoveConfig(), types: BCS_SPEC });\n\nbcs.registerType(\n\t'utf8string',\n\t(writer, str) => {\n\t\tconst bytes = Array.from(new TextEncoder().encode(str));\n\t\treturn writer.writeVec(bytes, (writer, el) => writer.write8(el));\n\t},\n\t(reader) => {\n\t\tlet bytes = reader.readVec((reader) => reader.read8());\n\t\treturn new TextDecoder().decode(new Uint8Array(bytes));\n\t},\n);\n\nbcs.registerType(\n\t'unsafe_u64',\n\t(writer, data) => writer.write64(data),\n\t(reader) => Number.parseInt(reader.read64(), 10),\n);\n\nexport { bcs };\n"],
  "mappings": "AAIA,SAAS,KAAK,wBAAwB;AA2B/B,SAAS,UAAU,KAA0B;AACnD,SAAQ,IAAgB,SAAS;AAClC;AAyEA,MAAM,SAAS;AASf,MAAM,oBAAoB;AAAA,EACzB,MAAM;AAAA,EACN,QAAQ,IAAI;AAAA,EACZ,SAAS;AAAA,EACT,YAAY;AACb;AAEA,MAAM,WAAuB;AAAA,EAC5B,OAAO;AAAA,IACN,aAAa;AAAA,MACZ,MAAM;AAAA,MACN,MAAM;AAAA,IACP;AAAA,IACA,WAAW;AAAA,MACV,YAAY;AAAA,MACZ,QAAQ;AAAA,IACT;AAAA,IACA,SAAS;AAAA,MACR,MAAM,CAAC,QAAQ,IAAI,EAAE;AAAA,MACrB,QAAQ;AAAA,MACR,QAAQ,CAAC,QAAQ,WAAW;AAAA,IAC7B;AAAA,IACA,SAAS;AAAA,MACR,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,MAAM;AAAA,MACN,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AAAA,MACL,MAAM;AAAA,IACP;AAAA,IACA,iBAAiB;AAAA;AAAA;AAAA,MAGhB,yBAAyB;AAAA,MACzB,aAAa;AAAA,MACb,SAAS;AAAA,MACT,yBAAyB;AAAA,IAC1B;AAAA,IACA,uBAAuB;AAAA,MACtB,MAAM;AAAA,MACN,OAAO;AAAA,IACR;AAAA,IACA,iBAAiB;AAAA,MAChB,IAAI;AAAA,IACL;AAAA,EACD;AAAA,EACA,SAAS;AAAA,IACR,cAAc;AAAA,MACb,UAAU,IAAI;AAAA,MACd,SAAS,IAAI;AAAA,MACb,QAAQ;AAAA,IACT;AAAA,IACA,iBAAiB;AAAA,MAChB,UAAU,IAAI;AAAA,MACd,sBAAsB,IAAI;AAAA,MAC1B,SAAS,IAAI;AAAA,IACd;AAAA,IACA,WAAW;AAAA,MACV,SAAS,IAAI;AAAA,MACb,QAAQ,IAAI;AAAA,MACZ,MAAM,IAAI;AAAA,MACV,YAAY,CAAC,QAAQ,SAAS;AAAA,IAC/B;AAAA,IACA,SAAS;AAAA,MACR,SAAS,CAAC,QAAQ,cAAc;AAAA,MAChC,OAAO,IAAI;AAAA,MACX,OAAO,IAAI;AAAA,MACX,QAAQ,IAAI;AAAA,IACb;AAAA;AAAA,IAEA,kBAAkB;AAAA,MACjB,MAAM;AAAA,MACN,cAAc,CAAC,QAAQ,CAAC,QAAQ,IAAI,EAAE,CAAC;AAAA,IACxC;AAAA,IACA;AAAA,EACD;AAAA,EACA,SAAS;AAAA,IACR,cAAc,IAAI;AAAA,EACnB;AACD;AAEA,MAAM,MAAM,IAAI,IAAI,EAAE,GAAG,iBAAiB,GAAG,OAAO,SAAS,CAAC;AAE9D,IAAI;AAAA,EACH;AAAA,EACA,CAAC,QAAQ,QAAQ;AAChB,UAAM,QAAQ,MAAM,KAAK,IAAI,YAAY,EAAE,OAAO,GAAG,CAAC;AACtD,WAAO,OAAO,SAAS,OAAO,CAACA,SAAQ,OAAOA,QAAO,OAAO,EAAE,CAAC;AAAA,EAChE;AAAA,EACA,CAAC,WAAW;AACX,QAAI,QAAQ,OAAO,QAAQ,CAACC,YAAWA,QAAO,MAAM,CAAC;AACrD,WAAO,IAAI,YAAY,EAAE,OAAO,IAAI,WAAW,KAAK,CAAC;AAAA,EACtD;AACD;AAEA,IAAI;AAAA,EACH;AAAA,EACA,CAAC,QAAQ,SAAS,OAAO,QAAQ,IAAI;AAAA,EACrC,CAAC,WAAW,OAAO,SAAS,OAAO,OAAO,GAAG,EAAE;AAChD;",
  "names": ["writer", "reader"]
}
