{
  "version": 3,
  "sources": ["../../../../src/keypairs/ed25519/publickey.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { bytesEqual } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature.js';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../../types/index.js';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nconst PUBLIC_KEY_SIZE = 32;\n\n/**\n * An Ed25519 public key\n */\nexport class Ed25519PublicKey {\n\tstatic SIZE = PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Ed25519PublicKey object\n\t * @param value ed25519 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Ed25519 public keys are equal\n\t */\n\tequals(publicKey: Ed25519PublicKey): boolean {\n\t\treturn bytesEqual(this.toBytes(), publicKey.toBytes());\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Ed25519 public key\n\t */\n\ttoBase64(): string {\n\t\treturn toB64(this.toBytes());\n\t}\n\n\t/**\n\t * Return the byte array representation of the Ed25519 public key\n\t */\n\ttoBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Ed25519 public key\n\t */\n\ttoString(): string {\n\t\treturn this.toBase64();\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\ttoSuiAddress(): string {\n\t\tlet tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);\n\t\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['ED25519']]);\n\t\ttmp.set(this.toBytes(), 1);\n\t\t// Each hex char represents half a byte, hence hex address doubles the length\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(tmp, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['ED25519'];\n\t}\n}\n"],
  "mappings": "AAGA,SAAS,eAAe;AACxB,SAAS,SAAS,aAAa;AAE/B,SAAS,kBAAkB;AAC3B,SAAS,gCAAgC;AACzC,SAAS,qBAAqB,0BAA0B;AACxD,SAAS,kBAAkB;AAE3B,MAAM,kBAAkB;AAKjB,MAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ7B,YAAY,OAA0B;AACrC,QAAI,OAAO,UAAU,UAAU;AAC9B,WAAK,OAAO,QAAQ,KAAK;AAAA,IAC1B,WAAW,iBAAiB,YAAY;AACvC,WAAK,OAAO;AAAA,IACb,OAAO;AACN,WAAK,OAAO,WAAW,KAAK,KAAK;AAAA,IAClC;AAEA,QAAI,KAAK,KAAK,WAAW,iBAAiB;AACzC,YAAM,IAAI;AAAA,QACT,sCAAsC,8BAA8B,KAAK,KAAK;AAAA,MAC/E;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,WAAsC;AAC5C,WAAO,WAAW,KAAK,QAAQ,GAAG,UAAU,QAAQ,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA,EAKA,WAAmB;AAClB,WAAO,MAAM,KAAK,QAAQ,CAAC;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,UAAsB;AACrB,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA,EAKA,WAAmB;AAClB,WAAO,KAAK,SAAS;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,eAAuB;AACtB,QAAI,MAAM,IAAI,WAAW,kBAAkB,CAAC;AAC5C,QAAI,IAAI,CAAC,yBAAyB,SAAS,CAAC,CAAC;AAC7C,QAAI,IAAI,KAAK,QAAQ,GAAG,CAAC;AAEzB,WAAO;AAAA,MACN,WAAW,QAAQ,KAAK,EAAE,OAAO,GAAG,CAAC,CAAC,EAAE,MAAM,GAAG,qBAAqB,CAAC;AAAA,IACxE;AAAA,EACD;AAAA;AAAA;AAAA;AAAA,EAKA,OAAe;AACd,WAAO,yBAAyB,SAAS;AAAA,EAC1C;AACD;AAvEa,iBACL,OAAO;",
  "names": []
}
