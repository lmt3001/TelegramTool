{"version":3,"sources":["../src/keypairs/ed25519/keypair.ts","../src/keypairs/ed25519/publickey.ts","../src/cryptography/publickey.ts","../src/cryptography/signature.ts","../src/types/common.ts","../src/types/objects.ts","../src/types/events.ts","../src/types/transactions.ts","../src/types/option.ts","../src/framework/framework.ts","../src/types/sui-bcs.ts","../src/types/faucet.ts","../src/types/normalized.ts","../src/types/validator.ts","../src/types/coin.ts","../src/types/epochs.ts","../src/types/subscriptions.ts","../src/types/name-service.ts","../src/types/dynamic_fields.ts","../src/types/checkpoints.ts","../src/cryptography/mnemonics.ts","../src/utils/ed25519-hd-key.ts","../src/cryptography/keypair.ts","../src/keypairs/secp256k1/keypair.ts","../src/keypairs/secp256k1/publickey.ts","../src/keypairs/secp256r1/keypair.ts","../src/keypairs/secp256r1/publickey.ts","../src/cryptography/multisig.ts","../src/cryptography/utils.ts","../src/builder/bcs.ts","../src/signers/txn-data-serializers/type-tag-serializer.ts","../src/rpc/client.ts","../src/version.ts","../src/utils/errors.ts","../src/rpc/websocket-client.ts","../src/rpc/faucet-client.ts","../src/providers/json-rpc-provider.ts","../src/rpc/connection.ts","../src/builder/TransactionBlock.ts","../src/builder/Transactions.ts","../src/builder/utils.ts","../src/builder/Inputs.ts","../src/builder/serializer.ts","../src/builder/TransactionBlockData.ts","../src/cryptography/hash.ts","../src/types/metrics.ts","../src/signers/raw-signer.ts","../src/signers/signer-with-provider.ts","../src/utils/intent.ts","../src/utils/format.ts","../src/utils/verify.ts","../src/framework/sui-system-state.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport nacl from 'tweetnacl';\nimport type { ExportedKeypair, Keypair } from '../../cryptography/keypair.js';\nimport { Ed25519PublicKey } from './publickey.js';\nimport { isValidHardenedPath, mnemonicToSeedHex } from '../../cryptography/mnemonics.js';\nimport { derivePath } from '../../utils/ed25519-hd-key.js';\nimport { toB64 } from '@mysten/bcs';\nimport type { SignatureScheme } from '../../cryptography/signature.js';\nimport { PRIVATE_KEY_SIZE } from '../../cryptography/keypair.js';\n\nexport const DEFAULT_ED25519_DERIVATION_PATH = \"m/44'/784'/0'/0'/0'\";\n\n/**\n * Ed25519 Keypair data. The publickey is the 32-byte public key and\n * the secretkey is 64-byte, where the first 32 bytes is the secret\n * key and the last 32 bytes is the public key.\n */\nexport interface Ed25519KeypairData {\n\tpublicKey: Uint8Array;\n\tsecretKey: Uint8Array;\n}\n\n/**\n * An Ed25519 Keypair used for signing transactions.\n */\nexport class Ed25519Keypair implements Keypair {\n\tprivate keypair: Ed25519KeypairData;\n\n\t/**\n\t * Create a new Ed25519 keypair instance.\n\t * Generate random keypair if no {@link Ed25519Keypair} is provided.\n\t *\n\t * @param keypair Ed25519 keypair\n\t */\n\tconstructor(keypair?: Ed25519KeypairData) {\n\t\tif (keypair) {\n\t\t\tthis.keypair = keypair;\n\t\t} else {\n\t\t\tthis.keypair = nacl.sign.keyPair();\n\t\t}\n\t}\n\n\t/**\n\t * Get the key scheme of the keypair ED25519\n\t */\n\tgetKeyScheme(): SignatureScheme {\n\t\treturn 'ED25519';\n\t}\n\n\t/**\n\t * Generate a new random Ed25519 keypair\n\t */\n\tstatic generate(): Ed25519Keypair {\n\t\treturn new Ed25519Keypair(nacl.sign.keyPair());\n\t}\n\n\t/**\n\t * Create a Ed25519 keypair from a raw secret key byte array, also known as seed.\n\t * This is NOT the private scalar which is result of hashing and bit clamping of\n\t * the raw secret key.\n\t *\n\t * The sui.keystore key is a list of Base64 encoded `flag || privkey`. To import\n\t * a key from sui.keystore to typescript, decode from base64 and remove the first\n\t * flag byte after checking it is indeed the Ed25519 scheme flag 0x00 (See more\n\t * on flag for signature scheme: https://github.com/MystenLabs/sui/blob/818406c5abdf7de1b80915a0519071eec3a5b1c7/crates/sui-types/src/crypto.rs#L1650):\n\t * ```\n\t * import { Ed25519Keypair, fromB64 } from '@mysten/sui.js';\n\t * const raw = fromB64(t[1]);\n\t * if (raw[0] !== 0 || raw.length !== PRIVATE_KEY_SIZE + 1) {\n\t *   throw new Error('invalid key');\n\t * }\n\t * const imported = Ed25519Keypair.fromSecretKey(raw.slice(1))\n\t * ```\n\t * @throws error if the provided secret key is invalid and validation is not skipped.\n\t *\n\t * @param secretKey secret key byte array\n\t * @param options: skip secret key validation\n\t */\n\tstatic fromSecretKey(\n\t\tsecretKey: Uint8Array,\n\t\toptions?: { skipValidation?: boolean },\n\t): Ed25519Keypair {\n\t\tconst secretKeyLength = secretKey.length;\n\t\tif (secretKeyLength !== PRIVATE_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Wrong secretKey size. Expected ${PRIVATE_KEY_SIZE} bytes, got ${secretKeyLength}.`,\n\t\t\t);\n\t\t}\n\t\tconst keypair = nacl.sign.keyPair.fromSeed(secretKey);\n\t\tif (!options || !options.skipValidation) {\n\t\t\tconst encoder = new TextEncoder();\n\t\t\tconst signData = encoder.encode('sui validation');\n\t\t\tconst signature = nacl.sign.detached(signData, keypair.secretKey);\n\t\t\tif (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n\t\t\t\tthrow new Error('provided secretKey is invalid');\n\t\t\t}\n\t\t}\n\t\treturn new Ed25519Keypair(keypair);\n\t}\n\n\t/**\n\t * The public key for this Ed25519 keypair\n\t */\n\tgetPublicKey(): Ed25519PublicKey {\n\t\treturn new Ed25519PublicKey(this.keypair.publicKey);\n\t}\n\n\t/**\n\t * Return the signature for the provided data using Ed25519.\n\t */\n\tsignData(data: Uint8Array): Uint8Array {\n\t\treturn nacl.sign.detached(data, this.keypair.secretKey);\n\t}\n\n\t/**\n\t * Derive Ed25519 keypair from mnemonics and path. The mnemonics must be normalized\n\t * and validated against the english wordlist.\n\t *\n\t * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must\n\t * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\n\t */\n\tstatic deriveKeypair(mnemonics: string, path?: string): Ed25519Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_ED25519_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidHardenedPath(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\tconst { key } = derivePath(path, mnemonicToSeedHex(mnemonics));\n\n\t\treturn Ed25519Keypair.fromSecretKey(key);\n\t}\n\n\t/**\n\t * Derive Ed25519 keypair from mnemonicSeed and path.\n\t *\n\t * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must\n\t * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\n\t */\n\tstatic deriveKeypairFromSeed(seedHex: string, path?: string): Ed25519Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_ED25519_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidHardenedPath(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\tconst { key } = derivePath(path, seedHex);\n\n\t\treturn Ed25519Keypair.fromSecretKey(key);\n\t}\n\n\t/**\n\t * This returns an exported keypair object, the private key field is the pure 32-byte seed.\n\t */\n\texport(): ExportedKeypair {\n\t\treturn {\n\t\t\tschema: 'ED25519',\n\t\t\tprivateKey: toB64(this.keypair.secretKey.slice(0, PRIVATE_KEY_SIZE)),\n\t\t};\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { bytesEqual } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature.js';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../../types/index.js';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nconst PUBLIC_KEY_SIZE = 32;\n\n/**\n * An Ed25519 public key\n */\nexport class Ed25519PublicKey {\n\tstatic SIZE = PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Ed25519PublicKey object\n\t * @param value ed25519 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Ed25519 public keys are equal\n\t */\n\tequals(publicKey: Ed25519PublicKey): boolean {\n\t\treturn bytesEqual(this.toBytes(), publicKey.toBytes());\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Ed25519 public key\n\t */\n\ttoBase64(): string {\n\t\treturn toB64(this.toBytes());\n\t}\n\n\t/**\n\t * Return the byte array representation of the Ed25519 public key\n\t */\n\ttoBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Ed25519 public key\n\t */\n\ttoString(): string {\n\t\treturn this.toBase64();\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\ttoSuiAddress(): string {\n\t\tlet tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);\n\t\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['ED25519']]);\n\t\ttmp.set(this.toBytes(), 1);\n\t\t// Each hex char represents half a byte, hence hex address doubles the length\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(tmp, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Ed25519 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['ED25519'];\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Value to be converted into public key.\n */\nexport type PublicKeyInitData = string | Uint8Array | Iterable<number>;\n\nexport function bytesEqual(a: Uint8Array, b: Uint8Array) {\n\tif (a === b) return true;\n\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n/**\n * A public key\n */\nexport interface PublicKey {\n\t/**\n\t * Checks if two public keys are equal\n\t */\n\tequals(publicKey: PublicKey): boolean;\n\n\t/**\n\t * Return the base-64 representation of the public key\n\t */\n\ttoBase64(): string;\n\n\t/**\n\t * Return the byte array representation of the public key\n\t */\n\ttoBytes(): Uint8Array;\n\n\t/**\n\t * Return the base-64 representation of the public key\n\t */\n\ttoString(): string;\n\n\t/**\n\t * Return the Sui address associated with this public key\n\t */\n\ttoSuiAddress(): string;\n\n\t/**\n\t * Return signature scheme flag of the public key\n\t */\n\tflag(): number;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { PublicKey } from './publickey.js';\n\nexport type SignatureScheme = 'ED25519' | 'Secp256k1' | 'Secp256r1' | 'MultiSig';\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n\tsignatureScheme: SignatureScheme;\n\t/** Base64-encoded signature */\n\tsignature: Uint8Array;\n\t/** Base64-encoded public key */\n\tpubKey: PublicKey;\n};\n\n/**\n * (`flag || signature || pubkey` bytes, as base-64 encoded string).\n * Signature is committed to the intent message of the transaction data, as base-64 encoded string.\n */\nexport type SerializedSignature = string;\n\nexport const SIGNATURE_SCHEME_TO_FLAG = {\n\tED25519: 0x00,\n\tSecp256k1: 0x01,\n\tSecp256r1: 0x02,\n\tMultiSig: 0x03,\n};\n\nexport const SIGNATURE_FLAG_TO_SCHEME = {\n\t0x00: 'ED25519',\n\t0x01: 'Secp256k1',\n\t0x02: 'Secp256r1',\n\t0x03: 'MultiSig',\n} as const;\n\nexport type SignatureFlag = keyof typeof SIGNATURE_FLAG_TO_SCHEME;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tboolean,\n\tdefine,\n\tliteral,\n\tnullable,\n\tnumber,\n\tobject,\n\trecord,\n\tstring,\n\tunion,\n} from 'superstruct';\nimport type { CallArg } from './sui-bcs.js';\nimport { fromB58, splitGenericParameters } from '@mysten/bcs';\n\nexport const TransactionDigest = string();\nexport type TransactionDigest = Infer<typeof TransactionDigest>;\n\nexport const TransactionEffectsDigest = string();\nexport type TransactionEffectsDigest = Infer<typeof TransactionEffectsDigest>;\n\nexport const TransactionEventDigest = string();\nexport type TransactionEventDigest = Infer<typeof TransactionEventDigest>;\n\nexport const ObjectId = string();\nexport type ObjectId = Infer<typeof ObjectId>;\n\nexport const SuiAddress = string();\nexport type SuiAddress = Infer<typeof SuiAddress>;\n\nexport const SequenceNumber = string();\nexport type SequenceNumber = Infer<typeof SequenceNumber>;\n\nexport const ObjectOwner = union([\n\tobject({\n\t\tAddressOwner: SuiAddress,\n\t}),\n\tobject({\n\t\tObjectOwner: SuiAddress,\n\t}),\n\tobject({\n\t\tShared: object({\n\t\t\tinitial_shared_version: number(),\n\t\t}),\n\t}),\n\tliteral('Immutable'),\n]);\nexport type ObjectOwner = Infer<typeof ObjectOwner>;\n\nexport type SuiJsonValue = boolean | number | string | CallArg | Array<SuiJsonValue>;\nexport const SuiJsonValue = define<SuiJsonValue>('SuiJsonValue', () => true);\n\nconst ProtocolConfigValue = union([\n\tobject({ u32: string() }),\n\tobject({ u64: string() }),\n\tobject({ f64: string() }),\n]);\ntype ProtocolConfigValue = Infer<typeof ProtocolConfigValue>;\n\nexport const ProtocolConfig = object({\n\tattributes: record(string(), nullable(ProtocolConfigValue)),\n\tfeatureFlags: record(string(), boolean()),\n\tmaxSupportedProtocolVersion: string(),\n\tminSupportedProtocolVersion: string(),\n\tprotocolVersion: string(),\n});\nexport type ProtocolConfig = Infer<typeof ProtocolConfig>;\n\n// source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L171\nconst TX_DIGEST_LENGTH = 32;\n\n/** Returns whether the tx digest is valid based on the serialization format */\nexport function isValidTransactionDigest(value: string): value is TransactionDigest {\n\ttry {\n\t\tconst buffer = fromB58(value);\n\t\treturn buffer.length === TX_DIGEST_LENGTH;\n\t} catch (e) {\n\t\treturn false;\n\t}\n}\n\n// TODO - can we automatically sync this with rust length definition?\n// Source of truth is\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67\n// which uses the Move account address length\n// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .\n\nexport const SUI_ADDRESS_LENGTH = 32;\nexport function isValidSuiAddress(value: string): value is SuiAddress {\n\treturn isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\n}\n\nexport function isValidSuiObjectId(value: string): boolean {\n\treturn isValidSuiAddress(value);\n}\n\ntype StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: (string | StructTag)[];\n};\n\nfunction parseTypeTag(type: string): string | StructTag {\n\tif (!type.includes('::')) return type;\n\n\treturn parseStructTag(type);\n}\n\nexport function parseStructTag(type: string): StructTag {\n\tconst [address, module] = type.split('::');\n\n\tconst rest = type.slice(address.length + module.length + 4);\n\tconst name = rest.includes('<') ? rest.slice(0, rest.indexOf('<')) : rest;\n\tconst typeParams = rest.includes('<')\n\t\t? splitGenericParameters(rest.slice(rest.indexOf('<') + 1, rest.lastIndexOf('>'))).map(\n\t\t\t\t(typeParam) => parseTypeTag(typeParam.trim()),\n\t\t  )\n\t\t: [];\n\n\treturn {\n\t\taddress: normalizeSuiAddress(address),\n\t\tmodule,\n\t\tname,\n\t\ttypeParams,\n\t};\n}\n\nexport function normalizeStructTag(type: string | StructTag): string {\n\tconst { address, module, name, typeParams } =\n\t\ttypeof type === 'string' ? parseStructTag(type) : type;\n\n\tconst formattedTypeParams =\n\t\ttypeParams.length > 0\n\t\t\t? `<${typeParams\n\t\t\t\t\t.map((typeParam) =>\n\t\t\t\t\t\ttypeof typeParam === 'string' ? typeParam : normalizeStructTag(typeParam),\n\t\t\t\t\t)\n\t\t\t\t\t.join(',')}>`\n\t\t\t: '';\n\n\treturn `${address}::${module}::${name}${formattedTypeParams}`;\n}\n\n/**\n * Perform the following operations:\n * 1. Make the address lower case\n * 2. Prepend `0x` if the string does not start with `0x`.\n * 3. Add more zeros if the length of the address(excluding `0x`) is less than `SUI_ADDRESS_LENGTH`\n *\n * WARNING: if the address value itself starts with `0x`, e.g., `0x0x`, the default behavior\n * is to treat the first `0x` not as part of the address. The default behavior can be overridden by\n * setting `forceAdd0x` to true\n *\n */\nexport function normalizeSuiAddress(value: string, forceAdd0x: boolean = false): SuiAddress {\n\tlet address = value.toLowerCase();\n\tif (!forceAdd0x && address.startsWith('0x')) {\n\t\taddress = address.slice(2);\n\t}\n\treturn `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, '0')}`;\n}\n\nexport function normalizeSuiObjectId(value: string, forceAdd0x: boolean = false): ObjectId {\n\treturn normalizeSuiAddress(value, forceAdd0x);\n}\n\nfunction isHex(value: string): boolean {\n\treturn /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\n}\n\nfunction getHexByteLength(value: string): number {\n\treturn /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tany,\n\tarray,\n\tassign,\n\tboolean,\n\tliteral,\n\tnumber,\n\tobject,\n\toptional,\n\trecord,\n\tstring,\n\tunion,\n\tis,\n\tnullable,\n\ttuple,\n} from 'superstruct';\nimport { ObjectId, ObjectOwner, SequenceNumber, TransactionDigest } from './common.js';\nimport type { OwnedObjectRef } from './transactions.js';\n\nexport const ObjectType = union([string(), literal('package')]);\nexport type ObjectType = Infer<typeof ObjectType>;\n\nexport const SuiObjectRef = object({\n\t/** Base64 string representing the object digest */\n\tdigest: TransactionDigest,\n\t/** Hex code as string representing the object id */\n\tobjectId: string(),\n\t/** Object version */\n\tversion: union([number(), string()]),\n});\nexport type SuiObjectRef = Infer<typeof SuiObjectRef>;\n\nexport const SuiGasData = object({\n\tpayment: array(SuiObjectRef),\n\t/** Gas Object's owner */\n\towner: string(),\n\tprice: string(),\n\tbudget: string(),\n});\nexport type SuiGasData = Infer<typeof SuiGasData>;\n\nexport const SuiObjectInfo = assign(\n\tSuiObjectRef,\n\tobject({\n\t\ttype: string(),\n\t\towner: ObjectOwner,\n\t\tpreviousTransaction: TransactionDigest,\n\t}),\n);\nexport type SuiObjectInfo = Infer<typeof SuiObjectInfo>;\n\nexport const ObjectContentFields = record(string(), any());\nexport type ObjectContentFields = Infer<typeof ObjectContentFields>;\n\nexport const MovePackageContent = record(string(), string());\nexport type MovePackageContent = Infer<typeof MovePackageContent>;\n\nexport const SuiMoveObject = object({\n\t/** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n\ttype: string(),\n\t/** Fields and values stored inside the Move object */\n\tfields: ObjectContentFields,\n\thasPublicTransfer: boolean(),\n});\nexport type SuiMoveObject = Infer<typeof SuiMoveObject>;\n\nexport const SuiMovePackage = object({\n\t/** A mapping from module name to disassembled Move bytecode */\n\tdisassembled: MovePackageContent,\n});\nexport type SuiMovePackage = Infer<typeof SuiMovePackage>;\n\nexport const SuiParsedData = union([\n\tassign(SuiMoveObject, object({ dataType: literal('moveObject') })),\n\tassign(SuiMovePackage, object({ dataType: literal('package') })),\n]);\nexport type SuiParsedData = Infer<typeof SuiParsedData>;\n\nexport const SuiRawMoveObject = object({\n\t/** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\n\ttype: string(),\n\thasPublicTransfer: boolean(),\n\tversion: number(),\n\tbcsBytes: string(),\n});\nexport type SuiRawMoveObject = Infer<typeof SuiRawMoveObject>;\n\nexport const SuiRawMovePackage = object({\n\tid: ObjectId,\n\t/** A mapping from module name to Move bytecode enocded in base64*/\n\tmoduleMap: record(string(), string()),\n});\nexport type SuiRawMovePackage = Infer<typeof SuiRawMovePackage>;\n\n// TODO(chris): consolidate SuiRawParsedData and SuiRawObject using generics\nexport const SuiRawData = union([\n\tassign(SuiRawMoveObject, object({ dataType: literal('moveObject') })),\n\tassign(SuiRawMovePackage, object({ dataType: literal('package') })),\n]);\nexport type SuiRawData = Infer<typeof SuiRawData>;\n\nexport const SUI_DECIMALS = 9;\n\nexport const MIST_PER_SUI = BigInt(1000000000);\n\nexport const ObjectDigest = string();\nexport type ObjectDigest = Infer<typeof ObjectDigest>;\nexport const SuiObjectResponseError = object({\n\tcode: string(),\n\terror: optional(string()),\n\tobject_id: optional(ObjectId),\n\tparent_object_id: optional(ObjectId),\n\tversion: optional(number()),\n\tdigest: optional(ObjectDigest),\n});\nexport type SuiObjectResponseError = Infer<typeof SuiObjectResponseError>;\nexport const DisplayFieldsResponse = object({\n\tdata: nullable(record(string(), string())),\n\terror: nullable(SuiObjectResponseError),\n});\nexport type DisplayFieldsResponse = Infer<typeof DisplayFieldsResponse>;\n// TODO: remove after all envs support the new DisplayFieldsResponse;\nexport const DisplayFieldsBackwardCompatibleResponse = union([\n\tDisplayFieldsResponse,\n\toptional(record(string(), string())),\n]);\nexport type DisplayFieldsBackwardCompatibleResponse = Infer<\n\ttypeof DisplayFieldsBackwardCompatibleResponse\n>;\n\nexport const SuiObjectData = object({\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n\tdigest: ObjectDigest,\n\t/**\n\t * Type of the object, default to be undefined unless SuiObjectDataOptions.showType is set to true\n\t */\n\ttype: optional(string()),\n\t/**\n\t * Move object content or package content, default to be undefined unless SuiObjectDataOptions.showContent is set to true\n\t */\n\tcontent: optional(SuiParsedData),\n\t/**\n\t * Move object content or package content in BCS bytes, default to be undefined unless SuiObjectDataOptions.showBcs is set to true\n\t */\n\tbcs: optional(SuiRawData),\n\t/**\n\t * The owner of this object. Default to be undefined unless SuiObjectDataOptions.showOwner is set to true\n\t */\n\towner: optional(ObjectOwner),\n\t/**\n\t * The digest of the transaction that created or last mutated this object.\n\t * Default to be undefined unless SuiObjectDataOptions.showPreviousTransaction is set to true\n\t */\n\tpreviousTransaction: optional(TransactionDigest),\n\t/**\n\t * The amount of SUI we would rebate if this object gets deleted.\n\t * This number is re-calculated each time the object is mutated based on\n\t * the present storage gas price.\n\t * Default to be undefined unless SuiObjectDataOptions.showStorageRebate is set to true\n\t */\n\tstorageRebate: optional(string()),\n\t/**\n\t * Display metadata for this object, default to be undefined unless SuiObjectDataOptions.showDisplay is set to true\n\t * This can also be None if the struct type does not have Display defined\n\t * See more details in https://forums.sui.io/t/nft-object-display-proposal/4872\n\t */\n\tdisplay: optional(DisplayFieldsBackwardCompatibleResponse),\n});\nexport type SuiObjectData = Infer<typeof SuiObjectData>;\n\n/**\n * Config for fetching object data\n */\nexport const SuiObjectDataOptions = object({\n\t/* Whether to fetch the object type, default to be true */\n\tshowType: optional(boolean()),\n\t/* Whether to fetch the object content, default to be false */\n\tshowContent: optional(boolean()),\n\t/* Whether to fetch the object content in BCS bytes, default to be false */\n\tshowBcs: optional(boolean()),\n\t/* Whether to fetch the object owner, default to be false */\n\tshowOwner: optional(boolean()),\n\t/* Whether to fetch the previous transaction digest, default to be false */\n\tshowPreviousTransaction: optional(boolean()),\n\t/* Whether to fetch the storage rebate, default to be false */\n\tshowStorageRebate: optional(boolean()),\n\t/* Whether to fetch the display metadata, default to be false */\n\tshowDisplay: optional(boolean()),\n});\nexport type SuiObjectDataOptions = Infer<typeof SuiObjectDataOptions>;\n\nexport const ObjectStatus = union([literal('Exists'), literal('notExists'), literal('Deleted')]);\nexport type ObjectStatus = Infer<typeof ObjectStatus>;\n\nexport const GetOwnedObjectsResponse = array(SuiObjectInfo);\nexport type GetOwnedObjectsResponse = Infer<typeof GetOwnedObjectsResponse>;\n\nexport const SuiObjectResponse = object({\n\tdata: optional(SuiObjectData),\n\terror: optional(SuiObjectResponseError),\n});\nexport type SuiObjectResponse = Infer<typeof SuiObjectResponse>;\n\nexport type Order = 'ascending' | 'descending';\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\n/* -------------------------- SuiObjectResponse ------------------------- */\n\nexport function getSuiObjectData(resp: SuiObjectResponse): SuiObjectData | undefined {\n\treturn resp.data;\n}\n\nexport function getObjectDeletedResponse(resp: SuiObjectResponse): SuiObjectRef | undefined {\n\tif (\n\t\tresp.error &&\n\t\t'object_id' in resp.error &&\n\t\t'version' in resp.error &&\n\t\t'digest' in resp.error\n\t) {\n\t\tconst error = resp.error as SuiObjectResponseError;\n\t\treturn {\n\t\t\tobjectId: error.object_id,\n\t\t\tversion: error.version,\n\t\t\tdigest: error.digest,\n\t\t} as SuiObjectRef;\n\t}\n\n\treturn undefined;\n}\n\nexport function getObjectNotExistsResponse(resp: SuiObjectResponse): ObjectId | undefined {\n\tif (\n\t\tresp.error &&\n\t\t'object_id' in resp.error &&\n\t\t!('version' in resp.error) &&\n\t\t!('digest' in resp.error)\n\t) {\n\t\treturn (resp.error as SuiObjectResponseError).object_id as ObjectId;\n\t}\n\n\treturn undefined;\n}\n\nexport function getObjectReference(\n\tresp: SuiObjectResponse | OwnedObjectRef,\n): SuiObjectRef | undefined {\n\tif ('reference' in resp) {\n\t\treturn resp.reference;\n\t}\n\tconst exists = getSuiObjectData(resp);\n\tif (exists) {\n\t\treturn {\n\t\t\tobjectId: exists.objectId,\n\t\t\tversion: exists.version,\n\t\t\tdigest: exists.digest,\n\t\t};\n\t}\n\treturn getObjectDeletedResponse(resp);\n}\n\n/* ------------------------------ SuiObjectRef ------------------------------ */\n\nexport function getObjectId(data: SuiObjectResponse | SuiObjectRef | OwnedObjectRef): ObjectId {\n\tif ('objectId' in data) {\n\t\treturn data.objectId;\n\t}\n\treturn (\n\t\tgetObjectReference(data)?.objectId ?? getObjectNotExistsResponse(data as SuiObjectResponse)!\n\t);\n}\n\nexport function getObjectVersion(\n\tdata: SuiObjectResponse | SuiObjectRef | SuiObjectData,\n): string | number | undefined {\n\tif ('version' in data) {\n\t\treturn data.version;\n\t}\n\treturn getObjectReference(data)?.version;\n}\n\n/* -------------------------------- SuiObject ------------------------------- */\n\nexport function isSuiObjectResponse(\n\tresp: SuiObjectResponse | SuiObjectData,\n): resp is SuiObjectResponse {\n\treturn (resp as SuiObjectResponse).data !== undefined;\n}\n\n/**\n * Deriving the object type from the object response\n * @returns 'package' if the object is a package, move object type(e.g., 0x2::coin::Coin<0x2::sui::SUI>)\n * if the object is a move object\n */\nexport function getObjectType(resp: SuiObjectResponse | SuiObjectData): ObjectType | undefined {\n\tconst data = isSuiObjectResponse(resp) ? resp.data : resp;\n\n\tif (!data?.type && 'data' in resp) {\n\t\tif (data?.content?.dataType === 'package') {\n\t\t\treturn 'package';\n\t\t}\n\t\treturn getMoveObjectType(resp);\n\t}\n\treturn data?.type;\n}\n\nexport function getObjectPreviousTransactionDigest(\n\tresp: SuiObjectResponse,\n): TransactionDigest | undefined {\n\treturn getSuiObjectData(resp)?.previousTransaction;\n}\n\nexport function getObjectOwner(resp: SuiObjectResponse | ObjectOwner): ObjectOwner | undefined {\n\tif (is(resp, ObjectOwner)) {\n\t\treturn resp;\n\t}\n\treturn getSuiObjectData(resp)?.owner;\n}\n\nexport function getObjectDisplay(resp: SuiObjectResponse): DisplayFieldsResponse {\n\tconst display = getSuiObjectData(resp)?.display;\n\tif (!display) {\n\t\treturn { data: null, error: null };\n\t}\n\tif (is(display, DisplayFieldsResponse)) {\n\t\treturn display;\n\t}\n\treturn {\n\t\tdata: display,\n\t\terror: null,\n\t};\n}\n\nexport function getSharedObjectInitialVersion(\n\tresp: SuiObjectResponse | ObjectOwner,\n): number | undefined {\n\tconst owner = getObjectOwner(resp);\n\tif (typeof owner === 'object' && 'Shared' in owner) {\n\t\treturn owner.Shared.initial_shared_version;\n\t} else {\n\t\treturn undefined;\n\t}\n}\n\nexport function isSharedObject(resp: SuiObjectResponse | ObjectOwner): boolean {\n\tconst owner = getObjectOwner(resp);\n\treturn typeof owner === 'object' && 'Shared' in owner;\n}\n\nexport function isImmutableObject(resp: SuiObjectResponse | ObjectOwner): boolean {\n\tconst owner = getObjectOwner(resp);\n\treturn owner === 'Immutable';\n}\n\nexport function getMoveObjectType(resp: SuiObjectResponse): string | undefined {\n\treturn getMoveObject(resp)?.type;\n}\n\nexport function getObjectFields(\n\tresp: SuiObjectResponse | SuiMoveObject | SuiObjectData,\n): ObjectContentFields | undefined {\n\tif ('fields' in resp) {\n\t\treturn resp.fields;\n\t}\n\treturn getMoveObject(resp)?.fields;\n}\n\nexport interface SuiObjectDataWithContent extends SuiObjectData {\n\tcontent: SuiParsedData;\n}\n\nfunction isSuiObjectDataWithContent(data: SuiObjectData): data is SuiObjectDataWithContent {\n\treturn data.content !== undefined;\n}\n\nexport function getMoveObject(data: SuiObjectResponse | SuiObjectData): SuiMoveObject | undefined {\n\tconst suiObject = 'data' in data ? getSuiObjectData(data) : (data as SuiObjectData);\n\n\tif (\n\t\t!suiObject ||\n\t\t!isSuiObjectDataWithContent(suiObject) ||\n\t\tsuiObject.content.dataType !== 'moveObject'\n\t) {\n\t\treturn undefined;\n\t}\n\n\treturn suiObject.content as SuiMoveObject;\n}\n\nexport function hasPublicTransfer(data: SuiObjectResponse | SuiObjectData): boolean {\n\treturn getMoveObject(data)?.hasPublicTransfer ?? false;\n}\n\nexport function getMovePackageContent(\n\tdata: SuiObjectResponse | SuiMovePackage,\n): MovePackageContent | undefined {\n\tif ('disassembled' in data) {\n\t\treturn data.disassembled;\n\t}\n\tconst suiObject = getSuiObjectData(data);\n\tif (suiObject?.content?.dataType !== 'package') {\n\t\treturn undefined;\n\t}\n\treturn (suiObject.content as SuiMovePackage).disassembled;\n}\n\nexport const CheckpointedObjectId = object({\n\tobjectId: ObjectId,\n\tatCheckpoint: optional(number()),\n});\nexport type CheckpointedObjectId = Infer<typeof CheckpointedObjectId>;\n\nexport const PaginatedObjectsResponse = object({\n\tdata: array(SuiObjectResponse),\n\t// TODO: remove union after 0.30.0 is released\n\tnextCursor: union([nullable(ObjectId), nullable(CheckpointedObjectId)]),\n\thasNextPage: boolean(),\n});\nexport type PaginatedObjectsResponse = Infer<typeof PaginatedObjectsResponse>;\n\n// mirrors sui_json_rpc_types:: SuiObjectDataFilter\nexport type SuiObjectDataFilter =\n\t| { MatchAll: SuiObjectDataFilter[] }\n\t| { MatchAny: SuiObjectDataFilter[] }\n\t| { MatchNone: SuiObjectDataFilter[] }\n\t| { Package: ObjectId }\n\t| { MoveModule: { package: ObjectId; module: string } }\n\t| { StructType: string }\n\t| { AddressOwner: string }\n\t| { ObjectOwner: string }\n\t| { ObjectId: string }\n\t| { ObjectIds: string[] }\n\t| { Version: string };\n\nexport type SuiObjectResponseQuery = {\n\tfilter?: SuiObjectDataFilter;\n\toptions?: SuiObjectDataOptions;\n};\n\nexport const ObjectRead = union([\n\tobject({\n\t\tdetails: SuiObjectData,\n\t\tstatus: literal('VersionFound'),\n\t}),\n\tobject({\n\t\tdetails: ObjectId,\n\t\tstatus: literal('ObjectNotExists'),\n\t}),\n\tobject({\n\t\tdetails: SuiObjectRef,\n\t\tstatus: literal('ObjectDeleted'),\n\t}),\n\tobject({\n\t\tdetails: tuple([ObjectId, number()]),\n\t\tstatus: literal('VersionNotFound'),\n\t}),\n\tobject({\n\t\tdetails: object({\n\t\t\tasked_version: number(),\n\t\t\tlatest_version: number(),\n\t\t\tobject_id: ObjectId,\n\t\t}),\n\t\tstatus: literal('VersionTooHigh'),\n\t}),\n]);\nexport type ObjectRead = Infer<typeof ObjectRead>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { object, string, array, record, any, optional, boolean, nullable } from 'superstruct';\nimport type { SuiJsonValue } from './common.js';\nimport { ObjectId, SuiAddress, TransactionDigest, SequenceNumber } from './common.js';\n\nexport const EventId = object({\n\ttxDigest: TransactionDigest,\n\teventSeq: SequenceNumber,\n});\n\n// event types mirror those in \"sui-json-rpc-types/src/sui_event.rs\"\n\nexport const SuiEvent = object({\n\tid: EventId,\n\t// Move package where this event was emitted.\n\tpackageId: ObjectId,\n\t// Move module where this event was emitted.\n\ttransactionModule: string(),\n\t// Sender's Sui address.\n\tsender: SuiAddress,\n\t// Move event type.\n\ttype: string(),\n\t// Parsed json value of the event\n\tparsedJson: optional(record(string(), any())),\n\t// Base 58 encoded bcs bytes of the move event\n\tbcs: optional(string()),\n\ttimestampMs: optional(string()),\n});\n\nexport type SuiEvent = Infer<typeof SuiEvent>;\n\nexport type MoveEventField = {\n\tpath: string;\n\tvalue: SuiJsonValue;\n};\n\n/**\n * Sequential event ID, ie (transaction seq number, event seq number).\n * 1) Serves as a unique event ID for each fullnode\n * 2) Also serves to sequence events for the purposes of pagination and querying.\n *    A higher id is an event seen later by that fullnode.\n * This ID is the \"cursor\" for event querying.\n */\nexport type EventId = Infer<typeof EventId>;\n\n// mirrors sui_json_rpc_types::SuiEventFilter\nexport type SuiEventFilter =\n\t| { Package: ObjectId }\n\t| { MoveModule: { package: ObjectId; module: string } }\n\t| { MoveEventType: string }\n\t| { MoveEventField: MoveEventField }\n\t| { Transaction: TransactionDigest }\n\t| {\n\t\t\tTimeRange: {\n\t\t\t\t// left endpoint of time interval, milliseconds since epoch, inclusive\n\t\t\t\tstartTime: string;\n\t\t\t\t// right endpoint of time interval, milliseconds since epoch, exclusive\n\t\t\t\tendTime: string;\n\t\t\t};\n\t  }\n\t| { Sender: SuiAddress }\n\t| { All: SuiEventFilter[] }\n\t| { Any: SuiEventFilter[] }\n\t| { And: [SuiEventFilter, SuiEventFilter] }\n\t| { Or: [SuiEventFilter, SuiEventFilter] };\n\nexport const PaginatedEvents = object({\n\tdata: array(SuiEvent),\n\tnextCursor: nullable(EventId),\n\thasNextPage: boolean(),\n});\nexport type PaginatedEvents = Infer<typeof PaginatedEvents>;\n\n/* ------------------------------- EventData ------------------------------ */\n\nexport function getEventSender(event: SuiEvent): SuiAddress {\n\treturn event.sender;\n}\n\nexport function getEventPackage(event: SuiEvent): ObjectId {\n\treturn event.packageId;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tis,\n\tarray,\n\tliteral,\n\tnumber,\n\tobject,\n\toptional,\n\tstring,\n\tunion,\n\tboolean,\n\ttuple,\n\tassign,\n\tnullable,\n} from 'superstruct';\n\nimport {\n\tObjectId,\n\tObjectOwner,\n\tSequenceNumber,\n\tSuiAddress,\n\tSuiJsonValue,\n\tTransactionDigest,\n\tTransactionEventDigest,\n} from './common.js';\nimport { SuiEvent } from './events.js';\nimport { ObjectDigest, SuiGasData, SuiMovePackage, SuiObjectRef } from './objects.js';\n\nexport const EpochId = string();\n\nexport const SuiChangeEpoch = object({\n\tepoch: EpochId,\n\tstorage_charge: string(),\n\tcomputation_charge: string(),\n\tstorage_rebate: string(),\n\tepoch_start_timestamp_ms: optional(string()),\n});\nexport type SuiChangeEpoch = Infer<typeof SuiChangeEpoch>;\n\nexport const SuiConsensusCommitPrologue = object({\n\tepoch: EpochId,\n\tround: string(),\n\tcommit_timestamp_ms: string(),\n});\nexport type SuiConsensusCommitPrologue = Infer<typeof SuiConsensusCommitPrologue>;\n\nexport const Genesis = object({\n\tobjects: array(ObjectId),\n});\nexport type Genesis = Infer<typeof Genesis>;\n\nexport const SuiArgument = union([\n\tliteral('GasCoin'),\n\tobject({ Input: number() }),\n\tobject({ Result: number() }),\n\tobject({ NestedResult: tuple([number(), number()]) }),\n]);\nexport type SuiArgument = Infer<typeof SuiArgument>;\n\nexport const MoveCallSuiTransaction = object({\n\targuments: optional(array(SuiArgument)),\n\ttype_arguments: optional(array(string())),\n\tpackage: ObjectId,\n\tmodule: string(),\n\tfunction: string(),\n});\nexport type MoveCallSuiTransaction = Infer<typeof MoveCallSuiTransaction>;\n\nexport const SuiTransaction = union([\n\tobject({ MoveCall: MoveCallSuiTransaction }),\n\tobject({ TransferObjects: tuple([array(SuiArgument), SuiArgument]) }),\n\tobject({ SplitCoins: tuple([SuiArgument, array(SuiArgument)]) }),\n\tobject({ MergeCoins: tuple([SuiArgument, array(SuiArgument)]) }),\n\tobject({\n\t\tPublish: union([\n\t\t\t// TODO: Remove this after 0.34 is released:\n\t\t\ttuple([SuiMovePackage, array(ObjectId)]),\n\t\t\tarray(ObjectId),\n\t\t]),\n\t}),\n\tobject({\n\t\tUpgrade: union([\n\t\t\t// TODO: Remove this after 0.34 is released:\n\t\t\ttuple([SuiMovePackage, array(ObjectId), ObjectId, SuiArgument]),\n\t\t\ttuple([array(ObjectId), ObjectId, SuiArgument]),\n\t\t]),\n\t}),\n\tobject({ MakeMoveVec: tuple([nullable(string()), array(SuiArgument)]) }),\n]);\n\nexport const SuiCallArg = union([\n\tobject({\n\t\ttype: literal('pure'),\n\t\tvalueType: nullable(string()),\n\t\tvalue: SuiJsonValue,\n\t}),\n\tobject({\n\t\ttype: literal('object'),\n\t\tobjectType: literal('immOrOwnedObject'),\n\t\tobjectId: ObjectId,\n\t\tversion: SequenceNumber,\n\t\tdigest: ObjectDigest,\n\t}),\n\tobject({\n\t\ttype: literal('object'),\n\t\tobjectType: literal('sharedObject'),\n\t\tobjectId: ObjectId,\n\t\tinitialSharedVersion: SequenceNumber,\n\t\tmutable: boolean(),\n\t}),\n]);\nexport type SuiCallArg = Infer<typeof SuiCallArg>;\n\nexport const ProgrammableTransaction = object({\n\ttransactions: array(SuiTransaction),\n\tinputs: array(SuiCallArg),\n});\nexport type ProgrammableTransaction = Infer<typeof ProgrammableTransaction>;\nexport type SuiTransaction = Infer<typeof SuiTransaction>;\n\n/**\n * 1. WaitForEffectsCert: waits for TransactionEffectsCert and then returns to the client.\n *    This mode is a proxy for transaction finality.\n * 2. WaitForLocalExecution: waits for TransactionEffectsCert and makes sure the node\n *    executed the transaction locally before returning to the client. The local execution\n *    makes sure this node is aware of this transaction when the client fires subsequent queries.\n *    However, if the node fails to execute the transaction locally in a timely manner,\n *    a bool type in the response is set to false to indicate the case.\n */\nexport type ExecuteTransactionRequestType = 'WaitForEffectsCert' | 'WaitForLocalExecution';\n\nexport type TransactionKindName =\n\t| 'ChangeEpoch'\n\t| 'ConsensusCommitPrologue'\n\t| 'Genesis'\n\t| 'ProgrammableTransaction';\n\nexport const SuiTransactionBlockKind = union([\n\tassign(SuiChangeEpoch, object({ kind: literal('ChangeEpoch') })),\n\tassign(\n\t\tSuiConsensusCommitPrologue,\n\t\tobject({\n\t\t\tkind: literal('ConsensusCommitPrologue'),\n\t\t}),\n\t),\n\tassign(Genesis, object({ kind: literal('Genesis') })),\n\tassign(ProgrammableTransaction, object({ kind: literal('ProgrammableTransaction') })),\n]);\nexport type SuiTransactionBlockKind = Infer<typeof SuiTransactionBlockKind>;\n\nexport const SuiTransactionBlockData = object({\n\t// Eventually this will become union(literal('v1'), literal('v2'), ...)\n\tmessageVersion: literal('v1'),\n\ttransaction: SuiTransactionBlockKind,\n\tsender: SuiAddress,\n\tgasData: SuiGasData,\n});\nexport type SuiTransactionBlockData = Infer<typeof SuiTransactionBlockData>;\n\nexport const AuthoritySignature = string();\nexport const GenericAuthoritySignature = union([AuthoritySignature, array(AuthoritySignature)]);\n\nexport const AuthorityQuorumSignInfo = object({\n\tepoch: EpochId,\n\tsignature: GenericAuthoritySignature,\n\tsigners_map: array(number()),\n});\nexport type AuthorityQuorumSignInfo = Infer<typeof AuthorityQuorumSignInfo>;\n\nexport const GasCostSummary = object({\n\tcomputationCost: string(),\n\tstorageCost: string(),\n\tstorageRebate: string(),\n\tnonRefundableStorageFee: string(),\n});\nexport type GasCostSummary = Infer<typeof GasCostSummary>;\n\nexport const ExecutionStatusType = union([literal('success'), literal('failure')]);\nexport type ExecutionStatusType = Infer<typeof ExecutionStatusType>;\n\nexport const ExecutionStatus = object({\n\tstatus: ExecutionStatusType,\n\terror: optional(string()),\n});\nexport type ExecutionStatus = Infer<typeof ExecutionStatus>;\n\nexport const OwnedObjectRef = object({\n\towner: ObjectOwner,\n\treference: SuiObjectRef,\n});\nexport type OwnedObjectRef = Infer<typeof OwnedObjectRef>;\nexport const TransactionEffectsModifiedAtVersions = object({\n\tobjectId: ObjectId,\n\tsequenceNumber: SequenceNumber,\n});\n\nexport const TransactionEffects = object({\n\t// Eventually this will become union(literal('v1'), literal('v2'), ...)\n\tmessageVersion: literal('v1'),\n\n\t/** The status of the execution */\n\tstatus: ExecutionStatus,\n\t/** The epoch when this transaction was executed */\n\texecutedEpoch: EpochId,\n\t/** The version that every modified (mutated or deleted) object had before it was modified by this transaction. **/\n\tmodifiedAtVersions: optional(array(TransactionEffectsModifiedAtVersions)),\n\tgasUsed: GasCostSummary,\n\t/** The object references of the shared objects used in this transaction. Empty if no shared objects were used. */\n\tsharedObjects: optional(array(SuiObjectRef)),\n\t/** The transaction digest */\n\ttransactionDigest: TransactionDigest,\n\t/** ObjectRef and owner of new objects created */\n\tcreated: optional(array(OwnedObjectRef)),\n\t/** ObjectRef and owner of mutated objects, including gas object */\n\tmutated: optional(array(OwnedObjectRef)),\n\t/**\n\t * ObjectRef and owner of objects that are unwrapped in this transaction.\n\t * Unwrapped objects are objects that were wrapped into other objects in the past,\n\t * and just got extracted out.\n\t */\n\tunwrapped: optional(array(OwnedObjectRef)),\n\t/** Object Refs of objects now deleted (the old refs) */\n\tdeleted: optional(array(SuiObjectRef)),\n\t/** Object Refs of objects now deleted (the old refs) */\n\tunwrappedThenDeleted: optional(array(SuiObjectRef)),\n\t/** Object refs of objects now wrapped in other objects */\n\twrapped: optional(array(SuiObjectRef)),\n\t/**\n\t * The updated gas object reference. Have a dedicated field for convenient access.\n\t * It's also included in mutated.\n\t */\n\tgasObject: OwnedObjectRef,\n\t/** The events emitted during execution. Note that only successful transactions emit events */\n\teventsDigest: optional(TransactionEventDigest),\n\t/** The set of transaction digests this transaction depends on */\n\tdependencies: optional(array(TransactionDigest)),\n});\nexport type TransactionEffects = Infer<typeof TransactionEffects>;\n\nexport const TransactionEvents = array(SuiEvent);\nexport type TransactionEvents = Infer<typeof TransactionEvents>;\n\nconst ReturnValueType = tuple([array(number()), string()]);\nconst MutableReferenceOutputType = tuple([SuiArgument, array(number()), string()]);\nconst ExecutionResultType = object({\n\tmutableReferenceOutputs: optional(array(MutableReferenceOutputType)),\n\treturnValues: optional(array(ReturnValueType)),\n});\n\nexport const DevInspectResults = object({\n\teffects: TransactionEffects,\n\tevents: TransactionEvents,\n\tresults: optional(array(ExecutionResultType)),\n\terror: optional(string()),\n});\nexport type DevInspectResults = Infer<typeof DevInspectResults>;\n\nexport type SuiTransactionBlockResponseQuery = {\n\tfilter?: TransactionFilter;\n\toptions?: SuiTransactionBlockResponseOptions;\n};\n\nexport type TransactionFilter =\n\t| { Checkpoint: string }\n\t| { FromAndToAddress: { from: string; to: string } }\n\t| { TransactionKind: string }\n\t| {\n\t\t\tMoveFunction: {\n\t\t\t\tpackage: ObjectId;\n\t\t\t\tmodule: string | null;\n\t\t\t\tfunction: string | null;\n\t\t\t};\n\t  }\n\t| { InputObject: ObjectId }\n\t| { ChangedObject: ObjectId }\n\t| { FromAddress: SuiAddress }\n\t| { ToAddress: SuiAddress };\n\nexport type EmptySignInfo = object;\nexport type AuthorityName = Infer<typeof AuthorityName>;\nexport const AuthorityName = string();\n\nexport const SuiTransactionBlock = object({\n\tdata: SuiTransactionBlockData,\n\ttxSignatures: array(string()),\n});\nexport type SuiTransactionBlock = Infer<typeof SuiTransactionBlock>;\n\nexport const SuiObjectChangePublished = object({\n\ttype: literal('published'),\n\tpackageId: ObjectId,\n\tversion: SequenceNumber,\n\tdigest: ObjectDigest,\n\tmodules: array(string()),\n});\nexport type SuiObjectChangePublished = Infer<typeof SuiObjectChangePublished>;\n\nexport const SuiObjectChangeTransferred = object({\n\ttype: literal('transferred'),\n\tsender: SuiAddress,\n\trecipient: ObjectOwner,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n\tdigest: ObjectDigest,\n});\nexport type SuiObjectChangeTransferred = Infer<typeof SuiObjectChangeTransferred>;\n\nexport const SuiObjectChangeMutated = object({\n\ttype: literal('mutated'),\n\tsender: SuiAddress,\n\towner: ObjectOwner,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n\tpreviousVersion: SequenceNumber,\n\tdigest: ObjectDigest,\n});\nexport type SuiObjectChangeMutated = Infer<typeof SuiObjectChangeMutated>;\n\nexport const SuiObjectChangeDeleted = object({\n\ttype: literal('deleted'),\n\tsender: SuiAddress,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n});\nexport type SuiObjectChangeDeleted = Infer<typeof SuiObjectChangeDeleted>;\n\nexport const SuiObjectChangeWrapped = object({\n\ttype: literal('wrapped'),\n\tsender: SuiAddress,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n});\nexport type SuiObjectChangeWrapped = Infer<typeof SuiObjectChangeWrapped>;\n\nexport const SuiObjectChangeCreated = object({\n\ttype: literal('created'),\n\tsender: SuiAddress,\n\towner: ObjectOwner,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: SequenceNumber,\n\tdigest: ObjectDigest,\n});\nexport type SuiObjectChangeCreated = Infer<typeof SuiObjectChangeCreated>;\n\nexport const SuiObjectChange = union([\n\tSuiObjectChangePublished,\n\tSuiObjectChangeTransferred,\n\tSuiObjectChangeMutated,\n\tSuiObjectChangeDeleted,\n\tSuiObjectChangeWrapped,\n\tSuiObjectChangeCreated,\n]);\nexport type SuiObjectChange = Infer<typeof SuiObjectChange>;\n\nexport const BalanceChange = object({\n\towner: ObjectOwner,\n\tcoinType: string(),\n\t/* Coin balance change(positive means receive, negative means send) */\n\tamount: string(),\n});\n\nexport const SuiTransactionBlockResponse = object({\n\tdigest: TransactionDigest,\n\ttransaction: optional(SuiTransactionBlock),\n\teffects: optional(TransactionEffects),\n\tevents: optional(TransactionEvents),\n\ttimestampMs: optional(string()),\n\tcheckpoint: optional(string()),\n\tconfirmedLocalExecution: optional(boolean()),\n\tobjectChanges: optional(array(SuiObjectChange)),\n\tbalanceChanges: optional(array(BalanceChange)),\n\t/* Errors that occurred in fetching/serializing the transaction. */\n\terrors: optional(array(string())),\n});\nexport type SuiTransactionBlockResponse = Infer<typeof SuiTransactionBlockResponse>;\n\nexport const SuiTransactionBlockResponseOptions = object({\n\t/* Whether to show transaction input data. Default to be false. */\n\tshowInput: optional(boolean()),\n\t/* Whether to show transaction effects. Default to be false. */\n\tshowEffects: optional(boolean()),\n\t/* Whether to show transaction events. Default to be false. */\n\tshowEvents: optional(boolean()),\n\t/* Whether to show object changes. Default to be false. */\n\tshowObjectChanges: optional(boolean()),\n\t/* Whether to show coin balance changes. Default to be false. */\n\tshowBalanceChanges: optional(boolean()),\n});\n\nexport type SuiTransactionBlockResponseOptions = Infer<typeof SuiTransactionBlockResponseOptions>;\n\nexport const PaginatedTransactionResponse = object({\n\tdata: array(SuiTransactionBlockResponse),\n\tnextCursor: nullable(TransactionDigest),\n\thasNextPage: boolean(),\n});\nexport type PaginatedTransactionResponse = Infer<typeof PaginatedTransactionResponse>;\nexport const DryRunTransactionBlockResponse = object({\n\teffects: TransactionEffects,\n\tevents: TransactionEvents,\n\tobjectChanges: array(SuiObjectChange),\n\tbalanceChanges: array(BalanceChange),\n\t// TODO: Remove optional when this is rolled out to all networks:\n\tinput: optional(SuiTransactionBlockData),\n});\nexport type DryRunTransactionBlockResponse = Infer<typeof DryRunTransactionBlockResponse>;\n\n/* -------------------------------------------------------------------------- */\n/*                              Helper functions                              */\n/* -------------------------------------------------------------------------- */\n\nexport function getTransaction(tx: SuiTransactionBlockResponse): SuiTransactionBlock | undefined {\n\treturn tx.transaction;\n}\n\nexport function getTransactionDigest(tx: SuiTransactionBlockResponse): TransactionDigest {\n\treturn tx.digest;\n}\n\nexport function getTransactionSignature(tx: SuiTransactionBlockResponse): string[] | undefined {\n\treturn tx.transaction?.txSignatures;\n}\n\n/* ----------------------------- TransactionData ---------------------------- */\n\nexport function getTransactionSender(tx: SuiTransactionBlockResponse): SuiAddress | undefined {\n\treturn tx.transaction?.data.sender;\n}\n\nexport function getGasData(tx: SuiTransactionBlockResponse): SuiGasData | undefined {\n\treturn tx.transaction?.data.gasData;\n}\n\nexport function getTransactionGasObject(\n\ttx: SuiTransactionBlockResponse,\n): SuiObjectRef[] | undefined {\n\treturn getGasData(tx)?.payment;\n}\n\nexport function getTransactionGasPrice(tx: SuiTransactionBlockResponse) {\n\treturn getGasData(tx)?.price;\n}\n\nexport function getTransactionGasBudget(tx: SuiTransactionBlockResponse) {\n\treturn getGasData(tx)?.budget;\n}\n\nexport function getChangeEpochTransaction(\n\tdata: SuiTransactionBlockKind,\n): SuiChangeEpoch | undefined {\n\treturn data.kind === 'ChangeEpoch' ? data : undefined;\n}\n\nexport function getConsensusCommitPrologueTransaction(\n\tdata: SuiTransactionBlockKind,\n): SuiConsensusCommitPrologue | undefined {\n\treturn data.kind === 'ConsensusCommitPrologue' ? data : undefined;\n}\n\nexport function getTransactionKind(\n\tdata: SuiTransactionBlockResponse,\n): SuiTransactionBlockKind | undefined {\n\treturn data.transaction?.data.transaction;\n}\n\nexport function getTransactionKindName(data: SuiTransactionBlockKind): TransactionKindName {\n\treturn data.kind;\n}\n\nexport function getProgrammableTransaction(\n\tdata: SuiTransactionBlockKind,\n): ProgrammableTransaction | undefined {\n\treturn data.kind === 'ProgrammableTransaction' ? data : undefined;\n}\n\n/* ----------------------------- ExecutionStatus ---------------------------- */\n\nexport function getExecutionStatusType(\n\tdata: SuiTransactionBlockResponse,\n): ExecutionStatusType | undefined {\n\treturn getExecutionStatus(data)?.status;\n}\n\nexport function getExecutionStatus(data: SuiTransactionBlockResponse): ExecutionStatus | undefined {\n\treturn getTransactionEffects(data)?.status;\n}\n\nexport function getExecutionStatusError(data: SuiTransactionBlockResponse): string | undefined {\n\treturn getExecutionStatus(data)?.error;\n}\n\nexport function getExecutionStatusGasSummary(\n\tdata: SuiTransactionBlockResponse | TransactionEffects,\n): GasCostSummary | undefined {\n\tif (is(data, TransactionEffects)) {\n\t\treturn data.gasUsed;\n\t}\n\treturn getTransactionEffects(data)?.gasUsed;\n}\n\nexport function getTotalGasUsed(\n\tdata: SuiTransactionBlockResponse | TransactionEffects,\n): bigint | undefined {\n\tconst gasSummary = getExecutionStatusGasSummary(data);\n\treturn gasSummary\n\t\t? BigInt(gasSummary.computationCost) +\n\t\t\t\tBigInt(gasSummary.storageCost) -\n\t\t\t\tBigInt(gasSummary.storageRebate)\n\t\t: undefined;\n}\n\nexport function getTotalGasUsedUpperBound(\n\tdata: SuiTransactionBlockResponse | TransactionEffects,\n): bigint | undefined {\n\tconst gasSummary = getExecutionStatusGasSummary(data);\n\treturn gasSummary\n\t\t? BigInt(gasSummary.computationCost) + BigInt(gasSummary.storageCost)\n\t\t: undefined;\n}\n\nexport function getTransactionEffects(\n\tdata: SuiTransactionBlockResponse,\n): TransactionEffects | undefined {\n\treturn data.effects;\n}\n\n/* ---------------------------- Transaction Effects --------------------------- */\n\nexport function getEvents(data: SuiTransactionBlockResponse): SuiEvent[] | undefined {\n\treturn data.events;\n}\n\nexport function getCreatedObjects(data: SuiTransactionBlockResponse): OwnedObjectRef[] | undefined {\n\treturn getTransactionEffects(data)?.created;\n}\n\n/* --------------------------- TransactionResponse -------------------------- */\n\nexport function getTimestampFromTransactionResponse(\n\tdata: SuiTransactionBlockResponse,\n): string | undefined {\n\treturn data.timestampMs ?? undefined;\n}\n\n/**\n * Get the newly created coin refs after a split.\n */\nexport function getNewlyCreatedCoinRefsAfterSplit(\n\tdata: SuiTransactionBlockResponse,\n): SuiObjectRef[] | undefined {\n\treturn getTransactionEffects(data)?.created?.map((c) => c.reference);\n}\n\nexport function getObjectChanges(data: SuiTransactionBlockResponse): SuiObjectChange[] | undefined {\n\treturn data.objectChanges;\n}\n\nexport function getPublishedObjectChanges(\n\tdata: SuiTransactionBlockResponse,\n): SuiObjectChangePublished[] {\n\treturn (\n\t\t(data.objectChanges?.filter((a) =>\n\t\t\tis(a, SuiObjectChangePublished),\n\t\t) as SuiObjectChangePublished[]) ?? []\n\t);\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nexport type Option<T> =\n\t| T\n\t| {\n\t\t\tfields: {\n\t\t\t\tvec: '';\n\t\t\t};\n\t\t\ttype: string;\n\t  };\n\nexport function getOption<T>(option: Option<T>): T | undefined {\n\tif (\n\t\ttypeof option === 'object' &&\n\t\toption !== null &&\n\t\t'type' in option &&\n\t\toption.type.startsWith('0x1::option::Option<')\n\t) {\n\t\treturn undefined;\n\t}\n\treturn option as T;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type {\n\tSuiObjectResponse,\n\tSuiMoveObject,\n\tSuiObjectInfo,\n\tSuiObjectData,\n} from '../types/objects.js';\nimport { getObjectFields, getObjectId, getObjectType } from '../types/objects.js';\nimport type { SuiAddress } from '../types/common.js';\nimport { normalizeSuiObjectId, ObjectId } from '../types/common.js';\n\nimport type { Option } from '../types/option.js';\nimport { getOption } from '../types/option.js';\nimport type { CoinStruct } from '../types/coin.js';\nimport type { StructTag } from '../types/sui-bcs.js';\nimport type { Infer } from 'superstruct';\nimport { nullable, number, object, string } from 'superstruct';\n\nexport const SUI_SYSTEM_ADDRESS = '0x3';\nexport const SUI_FRAMEWORK_ADDRESS = '0x2';\nexport const MOVE_STDLIB_ADDRESS = '0x1';\nexport const OBJECT_MODULE_NAME = 'object';\nexport const UID_STRUCT_NAME = 'UID';\nexport const ID_STRUCT_NAME = 'ID';\nexport const SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\nexport const VALIDATORS_EVENTS_QUERY = '0x3::validator_set::ValidatorEpochInfoEventV2';\n\nexport const SUI_CLOCK_OBJECT_ID = normalizeSuiObjectId('0x6');\n\n// `sui::pay` module is used for Coin management (split, join, join_and_transfer etc);\nexport const PAY_MODULE_NAME = 'pay';\nexport const PAY_SPLIT_COIN_VEC_FUNC_NAME = 'split_vec';\nexport const PAY_JOIN_COIN_FUNC_NAME = 'join';\nexport const COIN_TYPE_ARG_REGEX = /^0x2::coin::Coin<(.+)>$/;\n\ntype ObjectData = ObjectDataFull | SuiObjectInfo;\ntype ObjectDataFull = SuiObjectResponse | SuiMoveObject;\n\nexport function isObjectDataFull(resp: ObjectData | ObjectDataFull): resp is SuiObjectResponse {\n\treturn !!(resp as SuiObjectResponse).data || !!(resp as SuiMoveObject).type;\n}\n\nexport const CoinMetadataStruct = object({\n\tdecimals: number(),\n\tname: string(),\n\tsymbol: string(),\n\tdescription: string(),\n\ticonUrl: nullable(string()),\n\tid: nullable(ObjectId),\n});\n\nexport type CoinMetadata = Infer<typeof CoinMetadataStruct>;\n\n/**\n * Utility class for 0x2::coin\n * as defined in https://github.com/MystenLabs/sui/blob/ca9046fd8b1a9e8634a4b74b0e7dabdc7ea54475/sui_programmability/framework/sources/Coin.move#L4\n */\nexport class Coin {\n\tstatic isCoin(data: ObjectData): boolean {\n\t\treturn Coin.getType(data)?.match(COIN_TYPE_ARG_REGEX) != null;\n\t}\n\n\tstatic getCoinType(type: string) {\n\t\tconst [, res] = type.match(COIN_TYPE_ARG_REGEX) ?? [];\n\t\treturn res || null;\n\t}\n\n\tstatic getCoinTypeArg(obj: ObjectData) {\n\t\tconst type = Coin.getType(obj);\n\t\treturn type ? Coin.getCoinType(type) : null;\n\t}\n\n\tstatic isSUI(obj: ObjectData) {\n\t\tconst arg = Coin.getCoinTypeArg(obj);\n\t\treturn arg ? Coin.getCoinSymbol(arg) === 'SUI' : false;\n\t}\n\n\tstatic getCoinSymbol(coinTypeArg: string) {\n\t\treturn coinTypeArg.substring(coinTypeArg.lastIndexOf(':') + 1);\n\t}\n\n\tstatic getCoinStructTag(coinTypeArg: string): StructTag {\n\t\treturn {\n\t\t\taddress: normalizeSuiObjectId(coinTypeArg.split('::')[0]),\n\t\t\tmodule: coinTypeArg.split('::')[1],\n\t\t\tname: coinTypeArg.split('::')[2],\n\t\t\ttypeParams: [],\n\t\t};\n\t}\n\n\tpublic static getID(obj: ObjectData): ObjectId {\n\t\tif ('fields' in obj) {\n\t\t\treturn obj.fields.id.id;\n\t\t}\n\t\treturn getObjectId(obj);\n\t}\n\n\tstatic totalBalance(coins: CoinStruct[]): bigint {\n\t\treturn coins.reduce(\n\t\t\t(partialSum, c) => partialSum + Coin.getBalanceFromCoinStruct(c),\n\t\t\tBigInt(0),\n\t\t);\n\t}\n\n\t/**\n\t * Sort coin by balance in an ascending order\n\t */\n\tstatic sortByBalance(coins: CoinStruct[]): CoinStruct[] {\n\t\treturn [...coins].sort((a, b) =>\n\t\t\tCoin.getBalanceFromCoinStruct(a) < Coin.getBalanceFromCoinStruct(b)\n\t\t\t\t? -1\n\t\t\t\t: Coin.getBalanceFromCoinStruct(a) > Coin.getBalanceFromCoinStruct(b)\n\t\t\t\t? 1\n\t\t\t\t: 0,\n\t\t);\n\t}\n\n\tstatic getBalanceFromCoinStruct(coin: CoinStruct): bigint {\n\t\treturn BigInt(coin.balance);\n\t}\n\n\tstatic getBalance(data: ObjectDataFull): bigint | undefined {\n\t\tif (!Coin.isCoin(data)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst balance = getObjectFields(data)?.balance;\n\t\treturn BigInt(balance);\n\t}\n\n\tprivate static getType(data: ObjectData): string | undefined {\n\t\tif (isObjectDataFull(data)) {\n\t\t\treturn getObjectType(data);\n\t\t}\n\t\treturn data.type;\n\t}\n}\n\nexport type DelegationData = SuiMoveObject & {\n\tdataType: 'moveObject';\n\ttype: '0x2::delegation::Delegation';\n\tfields: {\n\t\tactive_delegation: Option<number>;\n\t\tdelegate_amount: number;\n\t\tnext_reward_unclaimed_epoch: number;\n\t\tvalidator_address: SuiAddress;\n\t\tinfo: {\n\t\t\tid: string;\n\t\t\tversion: number;\n\t\t};\n\t\t// TODO (jian): clean up after 0.34\n\t\tcoin_locked_until_epoch: Option<SuiMoveObject>;\n\t\tending_epoch: Option<number>;\n\t};\n};\n\nexport type DelegationSuiObject = Omit<SuiObjectData, 'data'> & {\n\tdata: DelegationData;\n};\n\n// Class for delegation.move\n// see https://github.com/MystenLabs/fastnft/blob/161aa27fe7eb8ecf2866ec9eb192e768f25da768/crates/sui-framework/sources/governance/delegation.move\nexport class Delegation {\n\tpublic static readonly SUI_OBJECT_TYPE = '0x2::delegation::Delegation';\n\tprivate suiObject: DelegationSuiObject;\n\n\tpublic static isDelegationSuiObject(obj: SuiObjectData): obj is DelegationSuiObject {\n\t\treturn 'type' in obj && obj.type === Delegation.SUI_OBJECT_TYPE;\n\t}\n\n\tconstructor(obj: DelegationSuiObject) {\n\t\tthis.suiObject = obj;\n\t}\n\n\tpublic nextRewardUnclaimedEpoch() {\n\t\treturn this.suiObject.data.fields.next_reward_unclaimed_epoch;\n\t}\n\n\tpublic activeDelegation() {\n\t\treturn BigInt(getOption(this.suiObject.data.fields.active_delegation) || 0);\n\t}\n\n\tpublic delegateAmount() {\n\t\treturn this.suiObject.data.fields.delegate_amount;\n\t}\n\n\tpublic endingEpoch() {\n\t\treturn getOption(this.suiObject.data.fields.ending_epoch);\n\t}\n\n\tpublic validatorAddress() {\n\t\treturn this.suiObject.data.fields.validator_address;\n\t}\n\n\tpublic isActive() {\n\t\treturn this.activeDelegation() > 0 && !this.endingEpoch();\n\t}\n\n\tpublic hasUnclaimedRewards(epoch: number) {\n\t\treturn (\n\t\t\tthis.nextRewardUnclaimedEpoch() <= epoch &&\n\t\t\t(this.isActive() || (this.endingEpoch() || 0) > epoch)\n\t\t);\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { EnumTypeDefinition, StructTypeDefinition } from '@mysten/bcs';\nimport { BCS, getSuiMoveConfig } from '@mysten/bcs';\nimport type { SuiObjectRef } from './objects.js';\n\n/**\n * A reference to a shared object.\n */\nexport type SharedObjectRef = {\n\t/** Hex code as string representing the object id */\n\tobjectId: string;\n\n\t/** The version the object was shared at */\n\tinitialSharedVersion: number | string;\n\n\t/** Whether reference is mutable */\n\tmutable: boolean;\n};\n\n/**\n * An object argument.\n */\nexport type ObjectArg = { ImmOrOwned: SuiObjectRef } | { Shared: SharedObjectRef };\n\n/**\n * A pure argument.\n */\nexport type PureArg = { Pure: ArrayLike<number> };\n\nexport function isPureArg(arg: any): arg is PureArg {\n\treturn (arg as PureArg).Pure !== undefined;\n}\n\n/**\n * An argument for the transaction. It is a 'meant' enum which expects to have\n * one of the optional properties. If not, the BCS error will be thrown while\n * attempting to form a transaction.\n *\n * Example:\n * ```js\n * let arg1: CallArg = { Object: { Shared: {\n *   objectId: '5460cf92b5e3e7067aaace60d88324095fd22944',\n *   initialSharedVersion: 1,\n *   mutable: true,\n * } } };\n * let arg2: CallArg = { Pure: bcs.ser(BCS.STRING, 100000).toBytes() };\n * let arg3: CallArg = { Object: { ImmOrOwned: {\n *   objectId: '4047d2e25211d87922b6650233bd0503a6734279',\n *   version: 1,\n *   digest: 'bCiANCht4O9MEUhuYjdRCqRPZjr2rJ8MfqNiwyhmRgA='\n * } } };\n * ```\n *\n * For `Pure` arguments BCS is required. You must encode the values with BCS according\n * to the type required by the called function. Pure accepts only serialized values\n */\nexport type CallArg = PureArg | { Object: ObjectArg };\n\n/**\n * Kind of a TypeTag which is represented by a Move type identifier.\n */\nexport type StructTag = {\n\taddress: string;\n\tmodule: string;\n\tname: string;\n\ttypeParams: TypeTag[];\n};\n\n/**\n * Sui TypeTag object. A decoupled `0x...::module::Type<???>` parameter.\n */\nexport type TypeTag =\n\t| { bool: null }\n\t| { u8: null }\n\t| { u64: null }\n\t| { u128: null }\n\t| { address: null }\n\t| { signer: null }\n\t| { vector: TypeTag }\n\t| { struct: StructTag }\n\t| { u16: null }\n\t| { u32: null }\n\t| { u256: null };\n\n// ========== TransactionData ===========\n\n/**\n * The GasData to be used in the transaction.\n */\nexport type GasData = {\n\tpayment: SuiObjectRef[];\n\towner: string; // Gas Object's owner\n\tprice: number;\n\tbudget: number;\n};\n\n/**\n * TransactionExpiration\n *\n * Indications the expiration time for a transaction.\n */\nexport type TransactionExpiration = { None: null } | { Epoch: number };\n\n// Move name of the Vector type.\nconst VECTOR = 'vector';\n\n// Imported to explicitly tell typescript that types match\ntype TypeSchema = {\n\tstructs?: { [key: string]: StructTypeDefinition };\n\tenums?: { [key: string]: EnumTypeDefinition };\n\taliases?: { [key: string]: string };\n};\n\nconst TransactionDataV1 = {\n\tkind: 'TransactionKind',\n\tsender: BCS.ADDRESS,\n\tgasData: 'GasData',\n\texpiration: 'TransactionExpiration',\n};\n\nconst BCS_SPEC: TypeSchema = {\n\tenums: {\n\t\t'Option<T>': {\n\t\t\tNone: null,\n\t\t\tSome: 'T',\n\t\t},\n\t\tObjectArg: {\n\t\t\tImmOrOwned: 'SuiObjectRef',\n\t\t\tShared: 'SharedObjectRef',\n\t\t},\n\t\tCallArg: {\n\t\t\tPure: [VECTOR, BCS.U8],\n\t\t\tObject: 'ObjectArg',\n\t\t\tObjVec: [VECTOR, 'ObjectArg'],\n\t\t},\n\t\tTypeTag: {\n\t\t\tbool: null,\n\t\t\tu8: null,\n\t\t\tu64: null,\n\t\t\tu128: null,\n\t\t\taddress: null,\n\t\t\tsigner: null,\n\t\t\tvector: 'TypeTag',\n\t\t\tstruct: 'StructTag',\n\t\t\tu16: null,\n\t\t\tu32: null,\n\t\t\tu256: null,\n\t\t},\n\t\tTransactionKind: {\n\t\t\t// can not be called from sui.js; dummy placement\n\t\t\t// to set the enum counter right for ProgrammableTransact\n\t\t\tProgrammableTransaction: 'ProgrammableTransaction',\n\t\t\tChangeEpoch: null,\n\t\t\tGenesis: null,\n\t\t\tConsensusCommitPrologue: null,\n\t\t},\n\t\tTransactionExpiration: {\n\t\t\tNone: null,\n\t\t\tEpoch: 'unsafe_u64',\n\t\t},\n\t\tTransactionData: {\n\t\t\tV1: 'TransactionDataV1',\n\t\t},\n\t},\n\tstructs: {\n\t\tSuiObjectRef: {\n\t\t\tobjectId: BCS.ADDRESS,\n\t\t\tversion: BCS.U64,\n\t\t\tdigest: 'ObjectDigest',\n\t\t},\n\t\tSharedObjectRef: {\n\t\t\tobjectId: BCS.ADDRESS,\n\t\t\tinitialSharedVersion: BCS.U64,\n\t\t\tmutable: BCS.BOOL,\n\t\t},\n\t\tStructTag: {\n\t\t\taddress: BCS.ADDRESS,\n\t\t\tmodule: BCS.STRING,\n\t\t\tname: BCS.STRING,\n\t\t\ttypeParams: [VECTOR, 'TypeTag'],\n\t\t},\n\t\tGasData: {\n\t\t\tpayment: [VECTOR, 'SuiObjectRef'],\n\t\t\towner: BCS.ADDRESS,\n\t\t\tprice: BCS.U64,\n\t\t\tbudget: BCS.U64,\n\t\t},\n\t\t// Signed transaction data needed to generate transaction digest.\n\t\tSenderSignedData: {\n\t\t\tdata: 'TransactionData',\n\t\t\ttxSignatures: [VECTOR, [VECTOR, BCS.U8]],\n\t\t},\n\t\tTransactionDataV1,\n\t},\n\taliases: {\n\t\tObjectDigest: BCS.BASE58,\n\t},\n};\n\nconst bcs = new BCS({ ...getSuiMoveConfig(), types: BCS_SPEC });\n\nbcs.registerType(\n\t'utf8string',\n\t(writer, str) => {\n\t\tconst bytes = Array.from(new TextEncoder().encode(str));\n\t\treturn writer.writeVec(bytes, (writer, el) => writer.write8(el));\n\t},\n\t(reader) => {\n\t\tlet bytes = reader.readVec((reader) => reader.read8());\n\t\treturn new TextDecoder().decode(new Uint8Array(bytes));\n\t},\n);\n\nbcs.registerType(\n\t'unsafe_u64',\n\t(writer, data) => writer.write64(data),\n\t(reader) => Number.parseInt(reader.read64(), 10),\n);\n\nexport { bcs };\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { array, nullable, number, object, string } from 'superstruct';\nimport { TransactionDigest, ObjectId } from './common.js';\n\nexport const FaucetCoinInfo = object({\n\tamount: number(),\n\tid: ObjectId,\n\ttransferTxDigest: TransactionDigest,\n});\n\nexport type FaucetCoinInfo = Infer<typeof FaucetCoinInfo>;\n\nexport const FaucetResponse = object({\n\ttransferredGasObjects: array(FaucetCoinInfo),\n\terror: nullable(string()),\n});\n\nexport type FaucetResponse = Infer<typeof FaucetResponse>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tobject,\n\tstring,\n\tunion,\n\tboolean,\n\tdefine,\n\tnumber,\n\tliteral,\n\trecord,\n\tis,\n\ttuple,\n} from 'superstruct';\n\nexport type SuiMoveFunctionArgTypesResponse = Infer<typeof SuiMoveFunctionArgType>[];\n\nexport const SuiMoveFunctionArgType = union([string(), object({ Object: string() })]);\n\nexport const SuiMoveFunctionArgTypes = array(SuiMoveFunctionArgType);\nexport type SuiMoveFunctionArgTypes = Infer<typeof SuiMoveFunctionArgTypes>;\n\nexport const SuiMoveModuleId = object({\n\taddress: string(),\n\tname: string(),\n});\nexport type SuiMoveModuleId = Infer<typeof SuiMoveModuleId>;\n\nexport const SuiMoveVisibility = union([literal('Private'), literal('Public'), literal('Friend')]);\nexport type SuiMoveVisibility = Infer<typeof SuiMoveVisibility>;\n\nexport const SuiMoveAbilitySet = object({\n\tabilities: array(string()),\n});\nexport type SuiMoveAbilitySet = Infer<typeof SuiMoveAbilitySet>;\n\nexport const SuiMoveStructTypeParameter = object({\n\tconstraints: SuiMoveAbilitySet,\n\tisPhantom: boolean(),\n});\nexport type SuiMoveStructTypeParameter = Infer<typeof SuiMoveStructTypeParameter>;\n\nexport const SuiMoveNormalizedTypeParameterType = object({\n\tTypeParameter: number(),\n});\nexport type SuiMoveNormalizedTypeParameterType = Infer<typeof SuiMoveNormalizedTypeParameterType>;\n\nexport type SuiMoveNormalizedType =\n\t| string\n\t| SuiMoveNormalizedTypeParameterType\n\t| { Reference: SuiMoveNormalizedType }\n\t| { MutableReference: SuiMoveNormalizedType }\n\t| { Vector: SuiMoveNormalizedType }\n\t| SuiMoveNormalizedStructType;\n\nexport const MoveCallMetric = tuple([\n\tobject({\n\t\tmodule: string(),\n\t\tpackage: string(),\n\t\tfunction: string(),\n\t}),\n\tstring(),\n]);\n\nexport type MoveCallMetric = Infer<typeof MoveCallMetric>;\n\nexport const MoveCallMetrics = object({\n\trank3Days: array(MoveCallMetric),\n\trank7Days: array(MoveCallMetric),\n\trank30Days: array(MoveCallMetric),\n});\n\nexport type MoveCallMetrics = Infer<typeof MoveCallMetrics>;\n\nfunction isSuiMoveNormalizedType(value: unknown): value is SuiMoveNormalizedType {\n\tif (!value) return false;\n\tif (typeof value === 'string') return true;\n\tif (is(value, SuiMoveNormalizedTypeParameterType)) return true;\n\tif (isSuiMoveNormalizedStructType(value)) return true;\n\tif (typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (is(valueProperties.Reference, SuiMoveNormalizedType)) return true;\n\tif (is(valueProperties.MutableReference, SuiMoveNormalizedType)) return true;\n\tif (is(valueProperties.Vector, SuiMoveNormalizedType)) return true;\n\treturn false;\n}\n\nexport const SuiMoveNormalizedType = define<SuiMoveNormalizedType>(\n\t'SuiMoveNormalizedType',\n\tisSuiMoveNormalizedType,\n);\n\nexport type SuiMoveNormalizedStructType = {\n\tStruct: {\n\t\taddress: string;\n\t\tmodule: string;\n\t\tname: string;\n\t\ttypeArguments: SuiMoveNormalizedType[];\n\t};\n};\n\nfunction isSuiMoveNormalizedStructType(value: unknown): value is SuiMoveNormalizedStructType {\n\tif (!value || typeof value !== 'object') return false;\n\n\tconst valueProperties = value as Record<string, unknown>;\n\tif (!valueProperties.Struct || typeof valueProperties.Struct !== 'object') return false;\n\n\tconst structProperties = valueProperties.Struct as Record<string, unknown>;\n\tif (\n\t\ttypeof structProperties.address !== 'string' ||\n\t\ttypeof structProperties.module !== 'string' ||\n\t\ttypeof structProperties.name !== 'string' ||\n\t\t!Array.isArray(structProperties.typeArguments) ||\n\t\t!structProperties.typeArguments.every((value) => isSuiMoveNormalizedType(value))\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// NOTE: This type is recursive, so we need to manually implement it:\nexport const SuiMoveNormalizedStructType = define<SuiMoveNormalizedStructType>(\n\t'SuiMoveNormalizedStructType',\n\tisSuiMoveNormalizedStructType,\n);\n\nexport const SuiMoveNormalizedFunction = object({\n\tvisibility: SuiMoveVisibility,\n\tisEntry: boolean(),\n\ttypeParameters: array(SuiMoveAbilitySet),\n\tparameters: array(SuiMoveNormalizedType),\n\treturn: array(SuiMoveNormalizedType),\n});\nexport type SuiMoveNormalizedFunction = Infer<typeof SuiMoveNormalizedFunction>;\n\nexport const SuiMoveNormalizedField = object({\n\tname: string(),\n\ttype: SuiMoveNormalizedType,\n});\nexport type SuiMoveNormalizedField = Infer<typeof SuiMoveNormalizedField>;\n\nexport const SuiMoveNormalizedStruct = object({\n\tabilities: SuiMoveAbilitySet,\n\ttypeParameters: array(SuiMoveStructTypeParameter),\n\tfields: array(SuiMoveNormalizedField),\n});\nexport type SuiMoveNormalizedStruct = Infer<typeof SuiMoveNormalizedStruct>;\n\nexport const SuiMoveNormalizedModule = object({\n\tfileFormatVersion: number(),\n\taddress: string(),\n\tname: string(),\n\tfriends: array(SuiMoveModuleId),\n\tstructs: record(string(), SuiMoveNormalizedStruct),\n\texposedFunctions: record(string(), SuiMoveNormalizedFunction),\n});\nexport type SuiMoveNormalizedModule = Infer<typeof SuiMoveNormalizedModule>;\n\nexport const SuiMoveNormalizedModules = record(string(), SuiMoveNormalizedModule);\nexport type SuiMoveNormalizedModules = Infer<typeof SuiMoveNormalizedModules>;\n\nexport function extractMutableReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'MutableReference' in normalizedType\n\t\t? normalizedType.MutableReference\n\t\t: undefined;\n}\n\nexport function extractReference(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedType | undefined {\n\treturn typeof normalizedType === 'object' && 'Reference' in normalizedType\n\t\t? normalizedType.Reference\n\t\t: undefined;\n}\n\nexport function extractStructTag(\n\tnormalizedType: SuiMoveNormalizedType,\n): SuiMoveNormalizedStructType | undefined {\n\tif (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\n\t\treturn normalizedType;\n\t}\n\n\tconst ref = extractReference(normalizedType);\n\tconst mutRef = extractMutableReference(normalizedType);\n\n\tif (typeof ref === 'object' && 'Struct' in ref) {\n\t\treturn ref;\n\t}\n\n\tif (typeof mutRef === 'object' && 'Struct' in mutRef) {\n\t\treturn mutRef;\n\t}\n\treturn undefined;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tboolean,\n\tliteral,\n\tnumber,\n\tobject,\n\tstring,\n\tunion,\n\tnullable,\n\ttuple,\n\toptional,\n} from 'superstruct';\nimport { ObjectId, SuiAddress } from './common.js';\nimport { AuthorityName, EpochId } from './transactions.js';\n\n/* -------------- Types for the SuiSystemState Rust definition -------------- */\n\nexport type DelegatedStake = Infer<typeof DelegatedStake>;\nexport type CommitteeInfo = Infer<typeof CommitteeInfo>;\nexport type StakeObject = Infer<typeof StakeObject>;\n\n// APY Response\nexport const Apy = object({\n\tapy: number(),\n\taddress: SuiAddress,\n});\n\nexport const ValidatorsApy = object({\n\tepoch: string(),\n\tapys: array(Apy),\n});\n\nexport type ValidatorsApy = Infer<typeof ValidatorsApy>;\n\n// Staking\nexport const Balance = object({\n\tvalue: number(),\n});\n\nexport const StakeObject = object({\n\tstakedSuiId: ObjectId,\n\tstakeRequestEpoch: EpochId,\n\tstakeActiveEpoch: EpochId,\n\tprincipal: string(),\n\tstatus: union([literal('Active'), literal('Pending'), literal('Unstaked')]),\n\testimatedReward: optional(string()),\n});\n\nexport const DelegatedStake = object({\n\tvalidatorAddress: SuiAddress,\n\tstakingPool: ObjectId,\n\tstakes: array(StakeObject),\n});\n\nexport const StakeSubsidyFields = object({\n\tbalance: object({ value: number() }),\n\tdistribution_counter: number(),\n\tcurrent_distribution_amount: number(),\n\tstake_subsidy_period_length: number(),\n\tstake_subsidy_decrease_rate: number(),\n});\n\nexport const StakeSubsidy = object({\n\ttype: string(),\n\tfields: StakeSubsidyFields,\n});\n\nexport const SuiSupplyFields = object({\n\tvalue: number(),\n});\n\nexport const ContentsFields = object({\n\tid: string(),\n\tsize: number(),\n\thead: object({ vec: array() }),\n\ttail: object({ vec: array() }),\n});\n\nexport const ContentsFieldsWithdraw = object({\n\tid: string(),\n\tsize: number(),\n});\n\nexport const Contents = object({\n\ttype: string(),\n\tfields: ContentsFields,\n});\n\nexport const DelegationStakingPoolFields = object({\n\texchangeRates: object({\n\t\tid: string(),\n\t\tsize: number(),\n\t}),\n\tid: string(),\n\tpendingStake: number(),\n\tpendingPoolTokenWithdraw: number(),\n\tpendingTotalSuiWithdraw: number(),\n\tpoolTokenBalance: number(),\n\trewardsPool: object({ value: number() }),\n\tactivationEpoch: object({ vec: array() }),\n\tdeactivationEpoch: object({ vec: array() }),\n\tsuiBalance: number(),\n});\n\nexport const DelegationStakingPool = object({\n\ttype: string(),\n\tfields: DelegationStakingPoolFields,\n});\n\nexport const Validators = array(tuple([AuthorityName, string()]));\n\nexport const CommitteeInfo = object({\n\tepoch: EpochId,\n\t/** Array of (validator public key, stake unit) tuple */\n\tvalidators: Validators,\n});\n\nexport const SuiValidatorSummary = object({\n\tsuiAddress: SuiAddress,\n\tprotocolPubkeyBytes: string(),\n\tnetworkPubkeyBytes: string(),\n\tworkerPubkeyBytes: string(),\n\tproofOfPossessionBytes: string(),\n\toperationCapId: string(),\n\tname: string(),\n\tdescription: string(),\n\timageUrl: string(),\n\tprojectUrl: string(),\n\tp2pAddress: string(),\n\tnetAddress: string(),\n\tprimaryAddress: string(),\n\tworkerAddress: string(),\n\tnextEpochProtocolPubkeyBytes: nullable(string()),\n\tnextEpochProofOfPossession: nullable(string()),\n\tnextEpochNetworkPubkeyBytes: nullable(string()),\n\tnextEpochWorkerPubkeyBytes: nullable(string()),\n\tnextEpochNetAddress: nullable(string()),\n\tnextEpochP2pAddress: nullable(string()),\n\tnextEpochPrimaryAddress: nullable(string()),\n\tnextEpochWorkerAddress: nullable(string()),\n\tvotingPower: string(),\n\tgasPrice: string(),\n\tcommissionRate: string(),\n\tnextEpochStake: string(),\n\tnextEpochGasPrice: string(),\n\tnextEpochCommissionRate: string(),\n\tstakingPoolId: string(),\n\tstakingPoolActivationEpoch: nullable(string()),\n\tstakingPoolDeactivationEpoch: nullable(string()),\n\tstakingPoolSuiBalance: string(),\n\trewardsPool: string(),\n\tpoolTokenBalance: string(),\n\tpendingStake: string(),\n\tpendingPoolTokenWithdraw: string(),\n\tpendingTotalSuiWithdraw: string(),\n\texchangeRatesId: string(),\n\texchangeRatesSize: string(),\n});\n\nexport type SuiValidatorSummary = Infer<typeof SuiValidatorSummary>;\n\nexport const SuiSystemStateSummary = object({\n\tepoch: string(),\n\tprotocolVersion: string(),\n\tsystemStateVersion: string(),\n\tstorageFundTotalObjectStorageRebates: string(),\n\tstorageFundNonRefundableBalance: string(),\n\treferenceGasPrice: string(),\n\tsafeMode: boolean(),\n\tsafeModeStorageRewards: string(),\n\tsafeModeComputationRewards: string(),\n\tsafeModeStorageRebates: string(),\n\tsafeModeNonRefundableStorageFee: string(),\n\tepochStartTimestampMs: string(),\n\tepochDurationMs: string(),\n\tstakeSubsidyStartEpoch: string(),\n\tmaxValidatorCount: string(),\n\tminValidatorJoiningStake: string(),\n\tvalidatorLowStakeThreshold: string(),\n\tvalidatorVeryLowStakeThreshold: string(),\n\tvalidatorLowStakeGracePeriod: string(),\n\tstakeSubsidyBalance: string(),\n\tstakeSubsidyDistributionCounter: string(),\n\tstakeSubsidyCurrentDistributionAmount: string(),\n\tstakeSubsidyPeriodLength: string(),\n\tstakeSubsidyDecreaseRate: number(),\n\ttotalStake: string(),\n\tactiveValidators: array(SuiValidatorSummary),\n\tpendingActiveValidatorsId: string(),\n\tpendingActiveValidatorsSize: string(),\n\tpendingRemovals: array(string()),\n\tstakingPoolMappingsId: string(),\n\tstakingPoolMappingsSize: string(),\n\tinactivePoolsId: string(),\n\tinactivePoolsSize: string(),\n\tvalidatorCandidatesId: string(),\n\tvalidatorCandidatesSize: string(),\n\tatRiskValidators: array(tuple([SuiAddress, string()])),\n\tvalidatorReportRecords: array(tuple([SuiAddress, array(SuiAddress)])),\n});\n\nexport type SuiSystemStateSummary = Infer<typeof SuiSystemStateSummary>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { array, boolean, nullable, number, object, optional, string } from 'superstruct';\nimport { ObjectId, TransactionDigest } from './common.js';\n\nexport const CoinStruct = object({\n\tcoinType: string(),\n\t// TODO(chris): rename this to objectId\n\tcoinObjectId: ObjectId,\n\tversion: string(),\n\tdigest: TransactionDigest,\n\tbalance: string(),\n\t// TODO (jian): remove this when we move to 0.34\n\tlockedUntilEpoch: optional(nullable(number())),\n\tpreviousTransaction: TransactionDigest,\n});\n\nexport type CoinStruct = Infer<typeof CoinStruct>;\n\nexport const PaginatedCoins = object({\n\tdata: array(CoinStruct),\n\tnextCursor: nullable(ObjectId),\n\thasNextPage: boolean(),\n});\n\nexport type PaginatedCoins = Infer<typeof PaginatedCoins>;\n\nexport const CoinBalance = object({\n\tcoinType: string(),\n\tcoinObjectCount: number(),\n\ttotalBalance: string(),\n\tlockedBalance: object({\n\t\tepochId: optional(number()),\n\t\tnumber: optional(number()),\n\t}),\n});\n\nexport type CoinBalance = Infer<typeof CoinBalance>;\n\nexport const CoinSupply = object({\n\tvalue: string(),\n});\n\nexport type CoinSupply = Infer<typeof CoinSupply>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport type { Infer } from 'superstruct';\nimport { array, boolean, nullable, number, object, string } from 'superstruct';\nimport { SuiValidatorSummary } from './validator.js';\n\nexport const EndOfEpochInfo = object({\n\tlastCheckpointId: string(),\n\tepochEndTimestamp: string(),\n\tprotocolVersion: string(),\n\treferenceGasPrice: string(),\n\ttotalStake: string(),\n\tstorageFundReinvestment: string(),\n\tstorageCharge: string(),\n\tstorageRebate: string(),\n\tstorageFundBalance: string(),\n\tstakeSubsidyAmount: string(),\n\ttotalGasFees: string(),\n\ttotalStakeRewardsDistributed: string(),\n\tleftoverStorageFundInflow: string(),\n});\n\nexport type EndOfEpochInfo = Infer<typeof EndOfEpochInfo>;\n\nexport const EpochInfo = object({\n\tepoch: string(),\n\tvalidators: array(SuiValidatorSummary),\n\tepochTotalTransactions: string(),\n\tfirstCheckpointId: string(),\n\tepochStartTimestamp: string(),\n\tendOfEpochInfo: nullable(EndOfEpochInfo),\n\treferenceGasPrice: nullable(number()),\n});\n\nexport type EpochInfo = Infer<typeof EpochInfo>;\n\nexport const EpochPage = object({\n\tdata: array(EpochInfo),\n\tnextCursor: nullable(string()),\n\thasNextPage: boolean(),\n});\n\nexport type EpochPage = Infer<typeof EpochPage>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { number } from 'superstruct';\n\nexport const SubscriptionId = number();\nexport type SubscriptionId = Infer<typeof SubscriptionId>;\n\nexport type Unsubscribe = () => Promise<boolean>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { array, boolean, nullable, object, string } from 'superstruct';\nimport { ObjectId } from './common.js';\n\nexport const ResolvedNameServiceNames = object({\n\tdata: array(string()),\n\thasNextPage: boolean(),\n\tnextCursor: nullable(ObjectId),\n});\nexport type ResolvedNameServiceNames = Infer<typeof ResolvedNameServiceNames>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { any, array, boolean, literal, nullable, number, object, string, union } from 'superstruct';\nimport { ObjectId } from './common.js';\n\nexport const DynamicFieldType = union([literal('DynamicField'), literal('DynamicObject')]);\nexport type DynamicFieldType = Infer<typeof DynamicFieldType>;\n\nexport const DynamicFieldName = object({\n\ttype: string(),\n\tvalue: any(),\n});\nexport type DynamicFieldName = Infer<typeof DynamicFieldName>;\n\nexport const DynamicFieldInfo = object({\n\tname: DynamicFieldName,\n\tbcsName: string(),\n\ttype: DynamicFieldType,\n\tobjectType: string(),\n\tobjectId: ObjectId,\n\tversion: number(),\n\tdigest: string(),\n});\nexport type DynamicFieldInfo = Infer<typeof DynamicFieldInfo>;\n\nexport const DynamicFieldPage = object({\n\tdata: array(DynamicFieldInfo),\n\tnextCursor: nullable(ObjectId),\n\thasNextPage: boolean(),\n});\nexport type DynamicFieldPage = Infer<typeof DynamicFieldPage>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tnumber,\n\tobject,\n\tstring,\n\ttuple,\n\tboolean,\n\toptional,\n\tany,\n\tnullable,\n} from 'superstruct';\n\nimport { TransactionDigest, TransactionEffectsDigest } from './common.js';\n\nexport const GasCostSummary = object({\n\tcomputationCost: string(),\n\tstorageCost: string(),\n\tstorageRebate: string(),\n\tnonRefundableStorageFee: string(),\n});\nexport type GasCostSummary = Infer<typeof GasCostSummary>;\n\nexport const CheckPointContentsDigest = string();\nexport type CheckPointContentsDigest = Infer<typeof CheckPointContentsDigest>;\n\nexport const CheckpointDigest = string();\nexport type CheckpointDigest = Infer<typeof CheckpointDigest>;\n\nexport const ECMHLiveObjectSetDigest = object({\n\tdigest: array(number()),\n});\nexport type ECMHLiveObjectSetDigest = Infer<typeof ECMHLiveObjectSetDigest>;\n\nexport const CheckpointCommitment = any();\nexport type CheckpointCommitment = Infer<typeof CheckpointCommitment>;\n\nexport const ValidatorSignature = string();\nexport type ValidatorSignature = Infer<typeof ValidatorSignature>;\n\nexport const EndOfEpochData = object({\n\tnextEpochCommittee: array(tuple([string(), string()])),\n\tnextEpochProtocolVersion: string(),\n\tepochCommitments: array(CheckpointCommitment),\n});\nexport type EndOfEpochData = Infer<typeof EndOfEpochData>;\n\nexport const ExecutionDigests = object({\n\ttransaction: TransactionDigest,\n\teffects: TransactionEffectsDigest,\n});\n\nexport const Checkpoint = object({\n\tepoch: string(),\n\tsequenceNumber: string(),\n\tdigest: CheckpointDigest,\n\tnetworkTotalTransactions: string(),\n\tpreviousDigest: optional(CheckpointDigest),\n\tepochRollingGasCostSummary: GasCostSummary,\n\ttimestampMs: string(),\n\tendOfEpochData: optional(EndOfEpochData),\n\t// TODO(jian): remove optional after 0.30.0 is released\n\tvalidatorSignature: optional(ValidatorSignature),\n\ttransactions: array(TransactionDigest),\n\tcheckpointCommitments: array(CheckpointCommitment),\n});\nexport type Checkpoint = Infer<typeof Checkpoint>;\n\nexport const CheckpointPage = object({\n\tdata: array(Checkpoint),\n\tnextCursor: nullable(string()),\n\thasNextPage: boolean(),\n});\nexport type CheckpointPage = Infer<typeof CheckpointPage>;\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nimport { toHEX } from '@mysten/bcs';\nimport { mnemonicToSeedSync as bip39MnemonicToSeedSync } from '@scure/bip39';\n\n/**\n * Parse and validate a path that is compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\n *\n * @param path path string (e.g. `m/44'/784'/0'/0'/0'`).\n */\nexport function isValidHardenedPath(path: string): boolean {\n\tif (!new RegExp(\"^m\\\\/44'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+'\\\\/[0-9]+'+$\").test(path)) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Parse and validate a path that is compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}\n * for Secp256k1 and m/74'/784'/{account_index}'/{change_index}/{address_index} for Secp256r1.\n *\n * Note that the purpose for Secp256k1 is registered as 54, to differentiate from Ed25519 with purpose 44.\n *\n * @param path path string (e.g. `m/54'/784'/0'/0/0`).\n */\nexport function isValidBIP32Path(path: string): boolean {\n\tif (!new RegExp(\"^m\\\\/(54|74)'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+\\\\/[0-9]+$\").test(path)) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\n/**\n * Uses KDF to derive 64 bytes of key data from mnemonic with empty password.\n *\n * @param mnemonics 12 words string split by spaces.\n */\nexport function mnemonicToSeed(mnemonics: string): Uint8Array {\n\treturn bip39MnemonicToSeedSync(mnemonics, '');\n}\n\n/**\n * Derive the seed in hex format from a 12-word mnemonic string.\n *\n * @param mnemonics 12 words string split by spaces.\n */\nexport function mnemonicToSeedHex(mnemonics: string): string {\n\treturn toHEX(mnemonicToSeed(mnemonics));\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// This is adapted from https://github.com/alepop/ed25519-hd-key replacing create-hmac\n// with @noble/hashes to be browser compatible.\n\nimport { sha512 } from '@noble/hashes/sha512';\nimport { hmac } from '@noble/hashes/hmac';\nimport nacl from 'tweetnacl';\nimport { fromHEX } from '@mysten/bcs';\n\ntype Hex = string;\ntype Path = string;\n\ntype Keys = {\n\tkey: Uint8Array;\n\tchainCode: Uint8Array;\n};\n\nconst ED25519_CURVE = 'ed25519 seed';\nconst HARDENED_OFFSET = 0x80000000;\n\nexport const pathRegex = new RegExp(\"^m(\\\\/[0-9]+')+$\");\n\nexport const replaceDerive = (val: string): string => val.replace(\"'\", '');\n\nexport const getMasterKeyFromSeed = (seed: Hex): Keys => {\n\tconst h = hmac.create(sha512, ED25519_CURVE);\n\tconst I = h.update(fromHEX(seed)).digest();\n\tconst IL = I.slice(0, 32);\n\tconst IR = I.slice(32);\n\treturn {\n\t\tkey: IL,\n\t\tchainCode: IR,\n\t};\n};\n\nconst CKDPriv = ({ key, chainCode }: Keys, index: number): Keys => {\n\tconst indexBuffer = new ArrayBuffer(4);\n\tconst cv = new DataView(indexBuffer);\n\tcv.setUint32(0, index);\n\n\tconst data = new Uint8Array(1 + key.length + indexBuffer.byteLength);\n\tdata.set(new Uint8Array(1).fill(0));\n\tdata.set(key, 1);\n\tdata.set(new Uint8Array(indexBuffer, 0, indexBuffer.byteLength), key.length + 1);\n\n\tconst I = hmac.create(sha512, chainCode).update(data).digest();\n\tconst IL = I.slice(0, 32);\n\tconst IR = I.slice(32);\n\treturn {\n\t\tkey: IL,\n\t\tchainCode: IR,\n\t};\n};\n\nexport const getPublicKey = (privateKey: Uint8Array, withZeroByte = true): Uint8Array => {\n\tconst keyPair = nacl.sign.keyPair.fromSeed(privateKey);\n\tconst signPk = keyPair.secretKey.subarray(32);\n\tconst newArr = new Uint8Array(signPk.length + 1);\n\tnewArr.set([0]);\n\tnewArr.set(signPk, 1);\n\treturn withZeroByte ? newArr : signPk;\n};\n\nexport const isValidPath = (path: string): boolean => {\n\tif (!pathRegex.test(path)) {\n\t\treturn false;\n\t}\n\treturn !path\n\t\t.split('/')\n\t\t.slice(1)\n\t\t.map(replaceDerive)\n\t\t.some(isNaN as any /* ts T_T*/);\n};\n\nexport const derivePath = (path: Path, seed: Hex, offset = HARDENED_OFFSET): Keys => {\n\tif (!isValidPath(path)) {\n\t\tthrow new Error('Invalid derivation path');\n\t}\n\n\tconst { key, chainCode } = getMasterKeyFromSeed(seed);\n\tconst segments = path\n\t\t.split('/')\n\t\t.slice(1)\n\t\t.map(replaceDerive)\n\t\t.map((el) => parseInt(el, 10));\n\n\treturn segments.reduce((parentKeys, segment) => CKDPriv(parentKeys, segment + offset), {\n\t\tkey,\n\t\tchainCode,\n\t});\n};\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { PublicKey } from './publickey.js';\nimport type { SignatureScheme } from './signature.js';\n\nexport const PRIVATE_KEY_SIZE = 32;\nexport const LEGACY_PRIVATE_KEY_SIZE = 64;\n\nexport type ExportedKeypair = {\n\tschema: SignatureScheme;\n\tprivateKey: string;\n};\n\n/**\n * A keypair used for signing transactions.\n */\nexport interface Keypair {\n\t/**\n\t * The public key for this keypair\n\t */\n\tgetPublicKey(): PublicKey;\n\n\t/**\n\t * Return the signature for the data\n\t */\n\tsignData(data: Uint8Array): Uint8Array;\n\n\t/**\n\t * Get the key scheme of the keypair: Secp256k1 or ED25519\n\t */\n\tgetKeyScheme(): SignatureScheme;\n\n\texport(): ExportedKeypair;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { ExportedKeypair, Keypair } from '../../cryptography/keypair.js';\nimport type { PublicKey } from '../../cryptography/publickey.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Secp256k1PublicKey } from './publickey.js';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { isValidBIP32Path, mnemonicToSeed } from '../../cryptography/mnemonics.js';\nimport { HDKey } from '@scure/bip32';\nimport { toB64 } from '@mysten/bcs';\nimport type { SignatureScheme } from '../../cryptography/signature.js';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { blake2b } from '@noble/hashes/blake2b';\n\nexport const DEFAULT_SECP256K1_DERIVATION_PATH = \"m/54'/784'/0'/0/0\";\n\n/**\n * Secp256k1 Keypair data\n */\nexport interface Secp256k1KeypairData {\n\tpublicKey: Uint8Array;\n\tsecretKey: Uint8Array;\n}\n\n/**\n * An Secp256k1 Keypair used for signing transactions.\n */\nexport class Secp256k1Keypair implements Keypair {\n\tprivate keypair: Secp256k1KeypairData;\n\n\t/**\n\t * Create a new keypair instance.\n\t * Generate random keypair if no {@link Secp256k1Keypair} is provided.\n\t *\n\t * @param keypair secp256k1 keypair\n\t */\n\tconstructor(keypair?: Secp256k1KeypairData) {\n\t\tif (keypair) {\n\t\t\tthis.keypair = keypair;\n\t\t} else {\n\t\t\tconst secretKey: Uint8Array = secp256k1.utils.randomPrivateKey();\n\t\t\tconst publicKey: Uint8Array = secp256k1.getPublicKey(secretKey, true);\n\n\t\t\tthis.keypair = { publicKey, secretKey };\n\t\t}\n\t}\n\n\t/**\n\t * Get the key scheme of the keypair Secp256k1\n\t */\n\tgetKeyScheme(): SignatureScheme {\n\t\treturn 'Secp256k1';\n\t}\n\n\t/**\n\t * Generate a new random keypair\n\t */\n\tstatic generate(): Secp256k1Keypair {\n\t\treturn new Secp256k1Keypair();\n\t}\n\n\t/**\n\t * Create a keypair from a raw secret key byte array.\n\t *\n\t * This method should only be used to recreate a keypair from a previously\n\t * generated secret key. Generating keypairs from a random seed should be done\n\t * with the {@link Keypair.fromSeed} method.\n\t *\n\t * @throws error if the provided secret key is invalid and validation is not skipped.\n\t *\n\t * @param secretKey secret key byte array\n\t * @param options: skip secret key validation\n\t */\n\n\tstatic fromSecretKey(\n\t\tsecretKey: Uint8Array,\n\t\toptions?: { skipValidation?: boolean },\n\t): Secp256k1Keypair {\n\t\tconst publicKey: Uint8Array = secp256k1.getPublicKey(secretKey, true);\n\t\tif (!options || !options.skipValidation) {\n\t\t\tconst encoder = new TextEncoder();\n\t\t\tconst signData = encoder.encode('sui validation');\n\t\t\tconst msgHash = bytesToHex(blake2b(signData, { dkLen: 32 }));\n\t\t\tconst signature = secp256k1.sign(msgHash, secretKey);\n\t\t\tif (!secp256k1.verify(signature, msgHash, publicKey, { lowS: true })) {\n\t\t\t\tthrow new Error('Provided secretKey is invalid');\n\t\t\t}\n\t\t}\n\t\treturn new Secp256k1Keypair({ publicKey, secretKey });\n\t}\n\n\t/**\n\t * Generate a keypair from a 32 byte seed.\n\t *\n\t * @param seed seed byte array\n\t */\n\tstatic fromSeed(seed: Uint8Array): Secp256k1Keypair {\n\t\tlet publicKey = secp256k1.getPublicKey(seed, true);\n\t\treturn new Secp256k1Keypair({ publicKey, secretKey: seed });\n\t}\n\n\t/**\n\t * The public key for this keypair\n\t */\n\tgetPublicKey(): PublicKey {\n\t\treturn new Secp256k1PublicKey(this.keypair.publicKey);\n\t}\n\n\t/**\n\t * Return the signature for the provided data.\n\t */\n\tsignData(data: Uint8Array): Uint8Array {\n\t\tconst msgHash = sha256(data);\n\t\tconst sig = secp256k1.sign(msgHash, this.keypair.secretKey, {\n\t\t\tlowS: true,\n\t\t});\n\t\treturn sig.toCompactRawBytes();\n\t}\n\n\t/**\n\t * Derive Secp256k1 keypair from mnemonics and path. The mnemonics must be normalized\n\t * and validated against the english wordlist.\n\t *\n\t * If path is none, it will default to m/54'/784'/0'/0/0, otherwise the path must\n\t * be compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}.\n\t */\n\tstatic deriveKeypair(mnemonics: string, path?: string): Secp256k1Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_SECP256K1_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidBIP32Path(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\tconst key = HDKey.fromMasterSeed(mnemonicToSeed(mnemonics)).derive(path);\n\t\tif (key.publicKey == null || key.privateKey == null) {\n\t\t\tthrow new Error('Invalid key');\n\t\t}\n\t\treturn new Secp256k1Keypair({\n\t\t\tpublicKey: key.publicKey,\n\t\t\tsecretKey: key.privateKey,\n\t\t});\n\t}\n\n\texport(): ExportedKeypair {\n\t\treturn {\n\t\t\tschema: 'Secp256k1',\n\t\t\tprivateKey: toB64(this.keypair.secretKey),\n\t\t};\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../../types/index.js';\nimport type { PublicKey, PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { bytesEqual } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature.js';\n\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256k1 public key\n */\nexport class Secp256k1PublicKey implements PublicKey {\n\tstatic SIZE = SECP256K1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256k1PublicKey object\n\t * @param value secp256k1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256k1 public keys are equal\n\t */\n\tequals(publicKey: Secp256k1PublicKey): boolean {\n\t\treturn bytesEqual(this.toBytes(), publicKey.toBytes());\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Secp256k1 public key\n\t */\n\ttoBase64(): string {\n\t\treturn toB64(this.toBytes());\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256k1 public key\n\t */\n\ttoBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Secp256k1 public key\n\t */\n\ttoString(): string {\n\t\treturn this.toBase64();\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256k1 public key\n\t */\n\ttoSuiAddress(): string {\n\t\tlet tmp = new Uint8Array(SECP256K1_PUBLIC_KEY_SIZE + 1);\n\t\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['Secp256k1']]);\n\t\ttmp.set(this.toBytes(), 1);\n\t\t// Each hex char represents half a byte, hence hex address doubles the length\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(tmp, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256k1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256k1'];\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { ExportedKeypair, Keypair } from '../../cryptography/keypair.js';\nimport type { PublicKey } from '../../cryptography/publickey.js';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { Secp256r1PublicKey } from './publickey.js';\nimport { secp256r1 } from '@noble/curves/p256';\nimport { isValidBIP32Path, mnemonicToSeed } from '../../cryptography/mnemonics.js';\nimport { HDKey } from '@scure/bip32';\nimport { toB64 } from '@mysten/bcs';\nimport type { SignatureScheme } from '../../cryptography/signature.js';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { blake2b } from '@noble/hashes/blake2b';\n\nexport const DEFAULT_SECP256R1_DERIVATION_PATH = \"m/74'/784'/0'/0/0\";\n\n/**\n * Secp256r1 Keypair data\n */\nexport interface Secp256r1KeypairData {\n\tpublicKey: Uint8Array;\n\tsecretKey: Uint8Array;\n}\n\n/**\n * An Secp256r1 Keypair used for signing transactions.\n */\nexport class Secp256r1Keypair implements Keypair {\n\tprivate keypair: Secp256r1KeypairData;\n\n\t/**\n\t * Create a new keypair instance.\n\t * Generate random keypair if no {@link Secp256r1Keypair} is provided.\n\t *\n\t * @param keypair Secp256r1 keypair\n\t */\n\tconstructor(keypair?: Secp256r1KeypairData) {\n\t\tif (keypair) {\n\t\t\tthis.keypair = keypair;\n\t\t} else {\n\t\t\tconst secretKey: Uint8Array = secp256r1.utils.randomPrivateKey();\n\t\t\tconst publicKey: Uint8Array = secp256r1.getPublicKey(secretKey, true);\n\n\t\t\tthis.keypair = { publicKey, secretKey };\n\t\t}\n\t}\n\n\t/**\n\t * Get the key scheme of the keypair Secp256r1\n\t */\n\tgetKeyScheme(): SignatureScheme {\n\t\treturn 'Secp256r1';\n\t}\n\n\t/**\n\t * Generate a new random keypair\n\t */\n\tstatic generate(): Secp256r1Keypair {\n\t\treturn new Secp256r1Keypair();\n\t}\n\n\t/**\n\t * Create a keypair from a raw secret key byte array.\n\t *\n\t * This method should only be used to recreate a keypair from a previously\n\t * generated secret key. Generating keypairs from a random seed should be done\n\t * with the {@link Keypair.fromSeed} method.\n\t *\n\t * @throws error if the provided secret key is invalid and validation is not skipped.\n\t *\n\t * @param secretKey secret key byte array\n\t * @param options: skip secret key validation\n\t */\n\n\tstatic fromSecretKey(\n\t\tsecretKey: Uint8Array,\n\t\toptions?: { skipValidation?: boolean },\n\t): Secp256r1Keypair {\n\t\tconst publicKey: Uint8Array = secp256r1.getPublicKey(secretKey, true);\n\t\tif (!options || !options.skipValidation) {\n\t\t\tconst encoder = new TextEncoder();\n\t\t\tconst signData = encoder.encode('sui validation');\n\t\t\tconst msgHash = bytesToHex(blake2b(signData, { dkLen: 32 }));\n\t\t\tconst signature = secp256r1.sign(msgHash, secretKey, { lowS: true });\n\t\t\tif (!secp256r1.verify(signature, msgHash, publicKey, { lowS: true })) {\n\t\t\t\tthrow new Error('Provided secretKey is invalid');\n\t\t\t}\n\t\t}\n\t\treturn new Secp256r1Keypair({ publicKey, secretKey });\n\t}\n\n\t/**\n\t * Generate a keypair from a 32 byte seed.\n\t *\n\t * @param seed seed byte array\n\t */\n\tstatic fromSeed(seed: Uint8Array): Secp256r1Keypair {\n\t\tlet publicKey = secp256r1.getPublicKey(seed, true);\n\t\treturn new Secp256r1Keypair({ publicKey, secretKey: seed });\n\t}\n\n\t/**\n\t * The public key for this keypair\n\t */\n\tgetPublicKey(): PublicKey {\n\t\treturn new Secp256r1PublicKey(this.keypair.publicKey);\n\t}\n\n\t/**\n\t * Return the signature for the provided data.\n\t */\n\tsignData(data: Uint8Array): Uint8Array {\n\t\tconst msgHash = sha256(data);\n\t\tconst sig = secp256r1.sign(msgHash, this.keypair.secretKey, {\n\t\t\tlowS: true,\n\t\t});\n\t\treturn sig.toCompactRawBytes();\n\t}\n\n\t/**\n\t * Derive Secp256r1 keypair from mnemonics and path. The mnemonics must be normalized\n\t * and validated against the english wordlist.\n\t *\n\t * If path is none, it will default to m/74'/784'/0'/0/0, otherwise the path must\n\t * be compliant to BIP-32 in form m/74'/784'/{account_index}'/{change_index}/{address_index}.\n\t */\n\tstatic deriveKeypair(mnemonics: string, path?: string): Secp256r1Keypair {\n\t\tif (path == null) {\n\t\t\tpath = DEFAULT_SECP256R1_DERIVATION_PATH;\n\t\t}\n\t\tif (!isValidBIP32Path(path)) {\n\t\t\tthrow new Error('Invalid derivation path');\n\t\t}\n\t\t// We use HDKey which is hardcoded to use Secp256k1 but since we only need the 32 bytes for the private key it's okay to use here as well.\n\t\tconst privateKey = HDKey.fromMasterSeed(mnemonicToSeed(mnemonics)).derive(path).privateKey;\n\t\treturn Secp256r1Keypair.fromSecretKey(privateKey!);\n\t}\n\n\texport(): ExportedKeypair {\n\t\treturn {\n\t\t\tschema: 'Secp256r1',\n\t\t\tprivateKey: toB64(this.keypair.secretKey),\n\t\t};\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\nimport { normalizeSuiAddress, SUI_ADDRESS_LENGTH } from '../../types/index.js';\nimport type { PublicKey, PublicKeyInitData } from '../../cryptography/publickey.js';\nimport { bytesEqual } from '../../cryptography/publickey.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from '../../cryptography/signature.js';\n\nconst SECP256R1_PUBLIC_KEY_SIZE = 33;\n\n/**\n * A Secp256r1 public key\n */\nexport class Secp256r1PublicKey implements PublicKey {\n\tstatic SIZE = SECP256R1_PUBLIC_KEY_SIZE;\n\tprivate data: Uint8Array;\n\n\t/**\n\t * Create a new Secp256r1PublicKey object\n\t * @param value secp256r1 public key as buffer or base-64 encoded string\n\t */\n\tconstructor(value: PublicKeyInitData) {\n\t\tif (typeof value === 'string') {\n\t\t\tthis.data = fromB64(value);\n\t\t} else if (value instanceof Uint8Array) {\n\t\t\tthis.data = value;\n\t\t} else {\n\t\t\tthis.data = Uint8Array.from(value);\n\t\t}\n\n\t\tif (this.data.length !== SECP256R1_PUBLIC_KEY_SIZE) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid public key input. Expected ${SECP256R1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`,\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if two Secp256r1 public keys are equal\n\t */\n\tequals(publicKey: Secp256r1PublicKey): boolean {\n\t\treturn bytesEqual(this.toBytes(), publicKey.toBytes());\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Secp256r1 public key\n\t */\n\ttoBase64(): string {\n\t\treturn toB64(this.toBytes());\n\t}\n\n\t/**\n\t * Return the byte array representation of the Secp256r1 public key\n\t */\n\ttoBytes(): Uint8Array {\n\t\treturn this.data;\n\t}\n\n\t/**\n\t * Return the base-64 representation of the Secp256r1 public key\n\t */\n\ttoString(): string {\n\t\treturn this.toBase64();\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256r1 public key\n\t */\n\ttoSuiAddress(): string {\n\t\tlet tmp = new Uint8Array(SECP256R1_PUBLIC_KEY_SIZE + 1);\n\t\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['Secp256r1']]);\n\t\ttmp.set(this.toBytes(), 1);\n\t\t// Each hex char represents half a byte, hence hex address doubles the length\n\t\treturn normalizeSuiAddress(\n\t\t\tbytesToHex(blake2b(tmp, { dkLen: 32 })).slice(0, SUI_ADDRESS_LENGTH * 2),\n\t\t);\n\t}\n\n\t/**\n\t * Return the Sui address associated with this Secp256r1 public key\n\t */\n\tflag(): number {\n\t\treturn SIGNATURE_SCHEME_TO_FLAG['Secp256r1'];\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { SerializedSignature, SignaturePubkeyPair, SignatureScheme } from './signature.js';\nimport { SIGNATURE_SCHEME_TO_FLAG } from './signature.js';\n// eslint-disable-next-line import/no-cycle\nimport { toSingleSignaturePubkeyPair } from './utils.js';\nimport type { PublicKey } from './publickey.js';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { bytesToHex } from '@noble/hashes/utils';\n\nimport { normalizeSuiAddress } from '../types/index.js';\nimport { Ed25519PublicKey } from '../keypairs/ed25519/publickey.js';\nimport { Secp256k1PublicKey } from '../keypairs/secp256k1/publickey.js';\nimport { Secp256r1PublicKey } from '../keypairs/secp256r1/publickey.js';\nimport { builder } from '../builder/bcs.js';\n\nexport type PubkeyWeightPair = {\n\tpubKey: PublicKey;\n\tweight: number;\n};\n\nexport type CompressedSignature =\n\t| { ED25519: number[] }\n\t| { Secp256k1: number[] }\n\t| { Secp256r1: number[] };\n\nexport type PublicKeyEnum =\n\t| { ED25519: number[] }\n\t| { Secp256k1: number[] }\n\t| { Secp256r1: number[] };\n\nexport type PubkeyEnumWeightPair = {\n\tpubKey: PublicKeyEnum;\n\tweight: number;\n};\n\nexport type MultiSigPublicKey = {\n\tpk_map: PubkeyEnumWeightPair[];\n\tthreshold: number;\n};\n\nexport type MultiSig = {\n\tsigs: CompressedSignature[];\n\tbitmap: number;\n\tmultisig_pk: MultiSigPublicKey;\n};\n\nexport const MAX_SIGNER_IN_MULTISIG = 10;\n\n/// Derives a multisig address from a list of pk and weights and threshold.\n// It is the 32-byte Blake2b hash of the serializd bytes of `flag_MultiSig || threshold || flag_1 || pk_1 || weight_1\n/// || ... || flag_n || pk_n || weight_n`\nexport function toMultiSigAddress(pks: PubkeyWeightPair[], threshold: number): string {\n\tif (pks.length > MAX_SIGNER_IN_MULTISIG) {\n\t\tthrow new Error(`Max number of signers in a multisig is ${MAX_SIGNER_IN_MULTISIG}`);\n\t}\n\t// max length = 1 flag byte + (max pk size + max weight size (u8)) * max signer size + 2 threshold bytes (u16)\n\tlet maxLength = 1 + (64 + 1) * MAX_SIGNER_IN_MULTISIG + 2;\n\tlet tmp = new Uint8Array(maxLength);\n\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['MultiSig']]);\n\n\tlet arr = to_uint8array(threshold);\n\ttmp.set(arr, 1);\n\tlet i = 3;\n\tfor (const pk of pks) {\n\t\ttmp.set([pk.pubKey.flag()], i);\n\t\ttmp.set(pk.pubKey.toBytes(), i + 1);\n\t\ttmp.set([pk.weight], i + 1 + pk.pubKey.toBytes().length);\n\t\ti += pk.pubKey.toBytes().length + 2;\n\t}\n\treturn normalizeSuiAddress(bytesToHex(blake2b(tmp.slice(0, i), { dkLen: 32 })));\n}\n\n/// Combine a list of serialized sigs, a list of pk weight pairs\n/// and threshold into a single multisig. `sigs` are required to\n/// be in the same order as `pks`. e.g. for [pk1, pk2, pk3, pk4, pk5],\n/// [sig1, sig2, sig5] is valid, but [sig2, sig1, sig5] is invalid.\nexport function combinePartialSigs(\n\tsigs: SerializedSignature[],\n\tpks: PubkeyWeightPair[],\n\tthreshold: number,\n): SerializedSignature {\n\tlet multisig_pk: MultiSigPublicKey = {\n\t\tpk_map: pks.map((x) => toPkWeightPair(x)),\n\t\tthreshold: threshold,\n\t};\n\n\tlet bitmap = 0;\n\tlet compressed_sigs: CompressedSignature[] = new Array(sigs.length);\n\tfor (let i = 0; i < sigs.length; i++) {\n\t\tlet parsed = toSingleSignaturePubkeyPair(sigs[i]);\n\t\tlet bytes = Array.from(parsed.signature.map((x) => Number(x)));\n\t\tif (parsed.signatureScheme === 'ED25519') {\n\t\t\tcompressed_sigs[i] = { ED25519: bytes };\n\t\t} else if (parsed.signatureScheme === 'Secp256k1') {\n\t\t\tcompressed_sigs[i] = { Secp256k1: bytes };\n\t\t} else if (parsed.signatureScheme === 'Secp256r1') {\n\t\t\tcompressed_sigs[i] = { Secp256r1: bytes };\n\t\t}\n\t\tfor (let j = 0; j < pks.length; j++) {\n\t\t\tif (parsed.pubKey.equals(pks[j].pubKey)) {\n\t\t\t\tbitmap |= 1 << j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tlet multisig: MultiSig = {\n\t\tsigs: compressed_sigs,\n\t\tbitmap,\n\t\tmultisig_pk,\n\t};\n\n\tconst bytes = builder.ser('MultiSig', multisig).toBytes();\n\tlet tmp = new Uint8Array(bytes.length + 1);\n\ttmp.set([SIGNATURE_SCHEME_TO_FLAG['MultiSig']]);\n\ttmp.set(bytes, 1);\n\treturn toB64(tmp);\n}\n\n/// Decode a multisig signature into a list of signatures, public keys and flags.\nexport function decodeMultiSig(signature: string): SignaturePubkeyPair[] {\n\tconst parsed = fromB64(signature);\n\tif (parsed.length < 1 || parsed[0] !== SIGNATURE_SCHEME_TO_FLAG['MultiSig']) {\n\t\tthrow new Error('Invalid MultiSig flag');\n\t}\n\tconst multisig: MultiSig = builder.de('MultiSig', parsed.slice(1));\n\tlet res: SignaturePubkeyPair[] = new Array(multisig.sigs.length);\n\tfor (let i = 0; i < multisig.sigs.length; i++) {\n\t\tlet s: CompressedSignature = multisig.sigs[i];\n\t\tlet pk_index = as_indices(multisig.bitmap).at(i);\n\t\tlet pk_bytes = Object.values(multisig.multisig_pk.pk_map[pk_index as number].pubKey)[0];\n\t\tconst scheme = Object.keys(s)[0] as SignatureScheme;\n\n\t\tif (scheme === 'MultiSig') {\n\t\t\tthrow new Error('MultiSig is not supported inside MultiSig');\n\t\t}\n\n\t\tconst SIGNATURE_SCHEME_TO_PUBLIC_KEY = {\n\t\t\tED25519: Ed25519PublicKey,\n\t\t\tSecp256k1: Secp256k1PublicKey,\n\t\t\tSecp256r1: Secp256r1PublicKey,\n\t\t};\n\n\t\tconst PublicKey = SIGNATURE_SCHEME_TO_PUBLIC_KEY[scheme];\n\n\t\tres[i] = {\n\t\t\tsignatureScheme: scheme,\n\t\t\tsignature: Uint8Array.from(Object.values(s)[0]),\n\t\t\tpubKey: new PublicKey(pk_bytes),\n\t\t};\n\t}\n\treturn res;\n}\n\nfunction toPkWeightPair(pair: PubkeyWeightPair): PubkeyEnumWeightPair {\n\tlet pk_bytes = Array.from(pair.pubKey.toBytes().map((x) => Number(x)));\n\tswitch (pair.pubKey.flag()) {\n\t\tcase SIGNATURE_SCHEME_TO_FLAG['Secp256k1']:\n\t\t\treturn {\n\t\t\t\tpubKey: {\n\t\t\t\t\tSecp256k1: pk_bytes,\n\t\t\t\t},\n\t\t\t\tweight: pair.weight,\n\t\t\t};\n\t\tcase SIGNATURE_SCHEME_TO_FLAG['Secp256r1']:\n\t\t\treturn {\n\t\t\t\tpubKey: {\n\t\t\t\t\tSecp256r1: pk_bytes,\n\t\t\t\t},\n\t\t\t\tweight: pair.weight,\n\t\t\t};\n\t\tcase SIGNATURE_SCHEME_TO_FLAG['ED25519']:\n\t\t\treturn {\n\t\t\t\tpubKey: {\n\t\t\t\t\tED25519: pk_bytes,\n\t\t\t\t},\n\t\t\t\tweight: pair.weight,\n\t\t\t};\n\t\tdefault:\n\t\t\tthrow new Error('Unsupported signature scheme');\n\t}\n}\n\n/// Convert u16 to Uint8Array of length 2 in little endian.\nfunction to_uint8array(threshold: number): Uint8Array {\n\tif (threshold < 0 || threshold > 65535) {\n\t\tthrow new Error('Invalid threshold');\n\t}\n\tlet arr = new Uint8Array(2);\n\tarr[0] = threshold & 0xff;\n\tarr[1] = threshold >> 8;\n\treturn arr;\n}\n\nfunction as_indices(bitmap: number): Uint8Array {\n\tif (bitmap < 0 || bitmap > 1024) {\n\t\tthrow new Error('Invalid bitmap');\n\t}\n\tlet res: number[] = [];\n\tfor (let i = 0; i < 10; i++) {\n\t\tif ((bitmap & (1 << i)) !== 0) {\n\t\t\tres.push(i);\n\t\t}\n\t}\n\treturn Uint8Array.from(res);\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n/* eslint-disable import/no-cycle */\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport type { SerializedSignature, SignaturePubkeyPair, SignatureScheme } from './signature.js';\nimport { SIGNATURE_FLAG_TO_SCHEME, SIGNATURE_SCHEME_TO_FLAG } from './signature.js';\nimport { Secp256r1PublicKey } from '../keypairs/secp256r1/publickey.js';\nimport { Secp256k1PublicKey } from '../keypairs/secp256k1/publickey.js';\nimport { Ed25519PublicKey } from '../keypairs/ed25519/publickey.js';\nimport { decodeMultiSig } from './multisig.js';\nimport type { PublicKey } from './publickey.js';\nimport { Ed25519Keypair } from '../keypairs/ed25519/keypair.js';\nimport { Secp256k1Keypair } from '../keypairs/secp256k1/keypair.js';\nimport type { ExportedKeypair, Keypair } from './keypair.js';\nimport { LEGACY_PRIVATE_KEY_SIZE, PRIVATE_KEY_SIZE } from './keypair.js';\n\nexport function toSerializedSignature({\n\tsignature,\n\tsignatureScheme,\n\tpubKey,\n}: SignaturePubkeyPair): SerializedSignature {\n\tconst serializedSignature = new Uint8Array(1 + signature.length + pubKey.toBytes().length);\n\tserializedSignature.set([SIGNATURE_SCHEME_TO_FLAG[signatureScheme]]);\n\tserializedSignature.set(signature, 1);\n\tserializedSignature.set(pubKey.toBytes(), 1 + signature.length);\n\treturn toB64(serializedSignature);\n}\n\n/// Expects to parse a serialized signature by its signature scheme to a list of signature\n/// and public key pairs. The list is of length 1 if it is not multisig.\nexport function toParsedSignaturePubkeyPair(\n\tserializedSignature: SerializedSignature,\n): SignaturePubkeyPair[] {\n\tconst bytes = fromB64(serializedSignature);\n\tconst signatureScheme =\n\t\tSIGNATURE_FLAG_TO_SCHEME[bytes[0] as keyof typeof SIGNATURE_FLAG_TO_SCHEME];\n\n\tif (signatureScheme === 'MultiSig') {\n\t\ttry {\n\t\t\treturn decodeMultiSig(serializedSignature);\n\t\t} catch (e) {\n\t\t\t// Legacy format multisig do not render.\n\t\t\tthrow new Error('legacy multisig viewing unsupported');\n\t\t}\n\t}\n\n\tconst SIGNATURE_SCHEME_TO_PUBLIC_KEY = {\n\t\tED25519: Ed25519PublicKey,\n\t\tSecp256k1: Secp256k1PublicKey,\n\t\tSecp256r1: Secp256r1PublicKey,\n\t};\n\n\tconst PublicKey = SIGNATURE_SCHEME_TO_PUBLIC_KEY[signatureScheme];\n\n\tconst signature = bytes.slice(1, bytes.length - PublicKey.SIZE);\n\tconst pubkeyBytes = bytes.slice(1 + signature.length);\n\tconst pubKey = new PublicKey(pubkeyBytes);\n\n\treturn [\n\t\t{\n\t\t\tsignatureScheme,\n\t\t\tsignature,\n\t\t\tpubKey,\n\t\t},\n\t];\n}\n\n/// Expects to parse a single signature pubkey pair from the serialized\n/// signature. Use this only if multisig is not expected.\nexport function toSingleSignaturePubkeyPair(\n\tserializedSignature: SerializedSignature,\n): SignaturePubkeyPair {\n\tconst res = toParsedSignaturePubkeyPair(serializedSignature);\n\tif (res.length !== 1) {\n\t\tthrow Error('Expected a single signature');\n\t}\n\treturn res[0];\n}\n\nexport function publicKeyFromSerialized(schema: SignatureScheme, pubKey: string): PublicKey {\n\tif (schema === 'ED25519') {\n\t\treturn new Ed25519PublicKey(pubKey);\n\t}\n\tif (schema === 'Secp256k1') {\n\t\treturn new Secp256k1PublicKey(pubKey);\n\t}\n\tthrow new Error('Unknown public key schema');\n}\n\nexport function fromExportedKeypair(keypair: ExportedKeypair): Keypair {\n\tconst secretKey = fromB64(keypair.privateKey);\n\tswitch (keypair.schema) {\n\t\tcase 'ED25519':\n\t\t\tlet pureSecretKey = secretKey;\n\t\t\tif (secretKey.length === LEGACY_PRIVATE_KEY_SIZE) {\n\t\t\t\t// This is a legacy secret key, we need to strip the public key bytes and only read the first 32 bytes\n\t\t\t\tpureSecretKey = secretKey.slice(0, PRIVATE_KEY_SIZE);\n\t\t\t}\n\t\t\treturn Ed25519Keypair.fromSecretKey(pureSecretKey);\n\t\tcase 'Secp256k1':\n\t\t\treturn Secp256k1Keypair.fromSecretKey(secretKey);\n\t\tdefault:\n\t\t\tthrow new Error(`Invalid keypair schema ${keypair.schema}`);\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { TypeName } from '@mysten/bcs';\nimport { BCS } from '@mysten/bcs';\nimport { bcs } from '../types/sui-bcs.js';\nimport type { TypeTag } from '../types/index.js';\nimport { normalizeSuiAddress } from '../types/index.js';\nimport { TypeTagSerializer } from '../signers/txn-data-serializers/type-tag-serializer.js';\nimport type { TransactionArgument, MoveCallTransaction } from './Transactions.js';\n\nexport const ARGUMENT_INNER = 'Argument';\nexport const VECTOR = 'vector';\nexport const OPTION = 'Option';\nexport const CALL_ARG = 'CallArg';\nexport const TYPE_TAG = 'TypeTag';\nexport const OBJECT_ARG = 'ObjectArg';\nexport const PROGRAMMABLE_TX_BLOCK = 'ProgrammableTransaction';\nexport const PROGRAMMABLE_CALL_INNER = 'ProgrammableMoveCall';\nexport const TRANSACTION_INNER = 'Transaction';\nexport const COMPRESSED_SIGNATURE = 'CompressedSignature';\nexport const PUBLIC_KEY = 'PublicKey';\nexport const MULTISIG_PUBLIC_KEY = 'MultiSigPublicKey';\nexport const MULTISIG_PK_MAP = 'MultiSigPkMap';\nexport const MULTISIG = 'MultiSig';\n\nexport const ENUM_KIND = 'EnumKind';\n\n/** Wrapper around transaction Enum to support `kind` matching in TS */\nexport const TRANSACTION: TypeName = [ENUM_KIND, TRANSACTION_INNER];\n/** Wrapper around Argument Enum to support `kind` matching in TS */\nexport const ARGUMENT: TypeName = [ENUM_KIND, ARGUMENT_INNER];\n\n/** Custom serializer for decoding package, module, function easier */\nexport const PROGRAMMABLE_CALL = 'SimpleProgrammableMoveCall';\n\n/** Transaction types */\n\nexport type Option<T> = { some: T } | { none: true };\n\nexport const builder = new BCS(bcs);\nregisterFixedArray(builder, 'FixedArray[64]', 64);\nregisterFixedArray(builder, 'FixedArray[33]', 33);\nregisterFixedArray(builder, 'FixedArray[32]', 32);\n\nbuilder\n\t.registerStructType(PROGRAMMABLE_TX_BLOCK, {\n\t\tinputs: [VECTOR, CALL_ARG],\n\t\ttransactions: [VECTOR, TRANSACTION],\n\t})\n\t.registerEnumType(ARGUMENT_INNER, {\n\t\tGasCoin: null,\n\t\tInput: { index: BCS.U16 },\n\t\tResult: { index: BCS.U16 },\n\t\tNestedResult: { index: BCS.U16, resultIndex: BCS.U16 },\n\t})\n\t.registerStructType(PROGRAMMABLE_CALL_INNER, {\n\t\tpackage: BCS.ADDRESS,\n\t\tmodule: BCS.STRING,\n\t\tfunction: BCS.STRING,\n\t\ttype_arguments: [VECTOR, TYPE_TAG],\n\t\targuments: [VECTOR, ARGUMENT],\n\t})\n\t// Keep this in sync with crates/sui-types/src/messages.rs\n\t.registerEnumType(TRANSACTION_INNER, {\n\t\t/**\n\t\t * A Move Call - any public Move function can be called via\n\t\t * this transaction. The results can be used that instant to pass\n\t\t * into the next transaction.\n\t\t */\n\t\tMoveCall: PROGRAMMABLE_CALL,\n\t\t/**\n\t\t * Transfer vector of objects to a receiver.\n\t\t */\n\t\tTransferObjects: {\n\t\t\tobjects: [VECTOR, ARGUMENT],\n\t\t\taddress: ARGUMENT,\n\t\t},\n\t\t/**\n\t\t * Split `amount` from a `coin`.\n\t\t */\n\t\tSplitCoins: { coin: ARGUMENT, amounts: [VECTOR, ARGUMENT] },\n\t\t/**\n\t\t * Merge Vector of Coins (`sources`) into a `destination`.\n\t\t */\n\t\tMergeCoins: { destination: ARGUMENT, sources: [VECTOR, ARGUMENT] },\n\t\t/**\n\t\t * Publish a Move module.\n\t\t */\n\t\tPublish: {\n\t\t\tmodules: [VECTOR, [VECTOR, BCS.U8]],\n\t\t\tdependencies: [VECTOR, BCS.ADDRESS],\n\t\t},\n\t\t/**\n\t\t * Build a vector of objects using the input arguments.\n\t\t * It is impossible to construct a `vector<T: key>` otherwise,\n\t\t * so this call serves a utility function.\n\t\t */\n\t\tMakeMoveVec: {\n\t\t\ttype: [OPTION, TYPE_TAG],\n\t\t\tobjects: [VECTOR, ARGUMENT],\n\t\t},\n\t\t/**  */\n\t\tUpgrade: {\n\t\t\tmodules: [VECTOR, [VECTOR, BCS.U8]],\n\t\t\tdependencies: [VECTOR, BCS.ADDRESS],\n\t\t\tpackageId: BCS.ADDRESS,\n\t\t\tticket: ARGUMENT,\n\t\t},\n\t})\n\t.registerEnumType(COMPRESSED_SIGNATURE, {\n\t\tED25519: ['FixedArray[64]', 'u8'],\n\t\tSecp256k1: ['FixedArray[64]', 'u8'],\n\t\tSecp256r1: ['FixedArray[64]', 'u8'],\n\t})\n\t.registerEnumType(PUBLIC_KEY, {\n\t\tED25519: ['FixedArray[32]', 'u8'],\n\t\tSecp256k1: ['FixedArray[33]', 'u8'],\n\t\tSecp256r1: ['FixedArray[33]', 'u8'],\n\t})\n\t.registerStructType(MULTISIG_PK_MAP, {\n\t\tpubKey: PUBLIC_KEY,\n\t\tweight: BCS.U8,\n\t})\n\t.registerStructType(MULTISIG_PUBLIC_KEY, {\n\t\tpk_map: [VECTOR, MULTISIG_PK_MAP],\n\t\tthreshold: BCS.U16,\n\t})\n\t.registerStructType(MULTISIG, {\n\t\tsigs: [VECTOR, COMPRESSED_SIGNATURE],\n\t\tbitmap: BCS.U16,\n\t\tmultisig_pk: MULTISIG_PUBLIC_KEY,\n\t});\n/**\n * Utilities for better decoding.\n */\n\ntype ProgrammableCallInner = {\n\tpackage: string;\n\tmodule: string;\n\tfunction: string;\n\ttype_arguments: TypeTag[];\n\targuments: TransactionArgument[];\n};\n\n/**\n * Wrapper around Enum, which transforms any `T` into an object with `kind` property:\n * @example\n * ```\n * let bcsEnum = { TransferObjects: { objects: [], address: ... } }\n * // becomes\n * let translatedEnum = { kind: 'TransferObjects', objects: [], address: ... };\n * ```\n */\nbuilder.registerType(\n\t[ENUM_KIND, 'T'],\n\tfunction encode(this: BCS, writer, data: { kind: string }, typeParams, typeMap) {\n\t\tconst kind = data.kind;\n\t\tconst invariant = { [kind]: data };\n\t\tconst [enumType] = typeParams;\n\n\t\treturn this.getTypeInterface(enumType as string)._encodeRaw.call(\n\t\t\tthis,\n\t\t\twriter,\n\t\t\tinvariant,\n\t\t\ttypeParams,\n\t\t\ttypeMap,\n\t\t);\n\t},\n\tfunction decode(this: BCS, reader, typeParams, typeMap) {\n\t\tconst [enumType] = typeParams;\n\t\tconst data = this.getTypeInterface(enumType as string)._decodeRaw.call(\n\t\t\tthis,\n\t\t\treader,\n\t\t\ttypeParams,\n\t\t\ttypeMap,\n\t\t);\n\n\t\t// enum invariant can only have one `key` field\n\t\tconst kind = Object.keys(data)[0];\n\t\treturn { kind, ...data[kind] };\n\t},\n\t(data: { kind: string }) => {\n\t\tif (typeof data !== 'object' && !('kind' in data)) {\n\t\t\tthrow new Error(`EnumKind: Missing property \"kind\" in the input ${JSON.stringify(data)}`);\n\t\t}\n\n\t\treturn true;\n\t},\n);\n\n/**\n * Custom deserializer for the ProgrammableCall.\n *\n * Hides the inner structure and gives a simpler, more convenient\n * interface to encode and decode this struct as a part of `TransactionData`.\n *\n * - `(package)::(module)::(function)` are now `target` property.\n * - `TypeTag[]` array is now passed as strings, not as a struct.\n */\nbuilder.registerType(\n\tPROGRAMMABLE_CALL,\n\tfunction encodeProgrammableTx(this: BCS, writer, data: MoveCallTransaction, typeParams, typeMap) {\n\t\tconst [pkg, module, fun] = data.target.split('::');\n\t\tconst type_arguments = data.typeArguments.map((tag) =>\n\t\t\tTypeTagSerializer.parseFromStr(tag, true),\n\t\t);\n\n\t\treturn this.getTypeInterface(PROGRAMMABLE_CALL_INNER)._encodeRaw.call(\n\t\t\tthis,\n\t\t\twriter,\n\t\t\t{\n\t\t\t\tpackage: normalizeSuiAddress(pkg),\n\t\t\t\tmodule,\n\t\t\t\tfunction: fun,\n\t\t\t\ttype_arguments,\n\t\t\t\targuments: data.arguments,\n\t\t\t} as ProgrammableCallInner,\n\t\t\ttypeParams,\n\t\t\ttypeMap,\n\t\t);\n\t},\n\tfunction decodeProgrammableTx(this: BCS, reader, typeParams, typeMap) {\n\t\tlet data: ProgrammableCallInner = builder\n\t\t\t.getTypeInterface(PROGRAMMABLE_CALL_INNER)\n\t\t\t._decodeRaw.call(this, reader, typeParams, typeMap);\n\n\t\treturn {\n\t\t\ttarget: [data.package, data.module, data.function].join('::'),\n\t\t\targuments: data.arguments,\n\t\t\ttypeArguments: data.type_arguments.map(TypeTagSerializer.tagToString),\n\t\t};\n\t},\n\t// Validation callback to error out if the data format is invalid.\n\t// TODO: make sure TypeTag can be parsed.\n\t(data: MoveCallTransaction) => {\n\t\treturn data.target.split('::').length === 3;\n\t},\n);\n\nfunction registerFixedArray(bcs: BCS, name: string, length: number) {\n\tbcs.registerType(\n\t\tname,\n\t\tfunction encode(this: BCS, writer, data, typeParams, typeMap) {\n\t\t\tif (data.length !== length) {\n\t\t\t\tthrow new Error(`Expected fixed array of length ${length}, got ${data.length}`);\n\t\t\t}\n\n\t\t\tif (typeParams.length !== 1) {\n\t\t\t\tthrow new Error(`Expected one type parameter in a fixed array, got ${typeParams.length}`);\n\t\t\t}\n\n\t\t\tlet [type] = typeof typeParams[0] === 'string' ? [typeParams[0], []] : typeParams[0];\n\n\t\t\tfor (let piece of data) {\n\t\t\t\tthis.getTypeInterface(type)._encodeRaw.call(this, writer, piece, typeParams, typeMap);\n\t\t\t}\n\n\t\t\treturn writer;\n\t\t},\n\t\tfunction decode(this: BCS, reader, typeParams, typeMap) {\n\t\t\tif (typeParams.length !== 1) {\n\t\t\t\tthrow new Error(`Expected one type parameter in a fixed array, got ${typeParams.length}`);\n\t\t\t}\n\n\t\t\tlet result: any = [];\n\t\t\tlet [type] = typeof typeParams[0] === 'string' ? [typeParams[0], []] : typeParams[0];\n\n\t\t\tfor (let i = 0; i < length; i++) {\n\t\t\t\tresult.push(this.getTypeInterface(type)._decodeRaw.call(this, reader, typeParams, typeMap));\n\t\t\t}\n\n\t\t\treturn result;\n\t\t},\n\t);\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { splitGenericParameters } from '@mysten/bcs';\nimport type { TypeTag } from '../../types/index.js';\nimport { normalizeSuiAddress } from '../../types/index.js';\n\nconst VECTOR_REGEX = /^vector<(.+)>$/;\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::([^<]+)(<(.+)>)?/;\n\nexport class TypeTagSerializer {\n\tstatic parseFromStr(str: string, normalizeAddress = false): TypeTag {\n\t\tif (str === 'address') {\n\t\t\treturn { address: null };\n\t\t} else if (str === 'bool') {\n\t\t\treturn { bool: null };\n\t\t} else if (str === 'u8') {\n\t\t\treturn { u8: null };\n\t\t} else if (str === 'u16') {\n\t\t\treturn { u16: null };\n\t\t} else if (str === 'u32') {\n\t\t\treturn { u32: null };\n\t\t} else if (str === 'u64') {\n\t\t\treturn { u64: null };\n\t\t} else if (str === 'u128') {\n\t\t\treturn { u128: null };\n\t\t} else if (str === 'u256') {\n\t\t\treturn { u256: null };\n\t\t} else if (str === 'signer') {\n\t\t\treturn { signer: null };\n\t\t}\n\t\tconst vectorMatch = str.match(VECTOR_REGEX);\n\t\tif (vectorMatch) {\n\t\t\treturn {\n\t\t\t\tvector: TypeTagSerializer.parseFromStr(vectorMatch[1], normalizeAddress),\n\t\t\t};\n\t\t}\n\n\t\tconst structMatch = str.match(STRUCT_REGEX);\n\t\tif (structMatch) {\n\t\t\tconst address = normalizeAddress ? normalizeSuiAddress(structMatch[1]) : structMatch[1];\n\t\t\treturn {\n\t\t\t\tstruct: {\n\t\t\t\t\taddress,\n\t\t\t\t\tmodule: structMatch[2],\n\t\t\t\t\tname: structMatch[3],\n\t\t\t\t\ttypeParams:\n\t\t\t\t\t\tstructMatch[5] === undefined\n\t\t\t\t\t\t\t? []\n\t\t\t\t\t\t\t: TypeTagSerializer.parseStructTypeArgs(structMatch[5], normalizeAddress),\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tthrow new Error(`Encountered unexpected token when parsing type args for ${str}`);\n\t}\n\n\tstatic parseStructTypeArgs(str: string, normalizeAddress = false): TypeTag[] {\n\t\treturn splitGenericParameters(str).map((tok) =>\n\t\t\tTypeTagSerializer.parseFromStr(tok, normalizeAddress),\n\t\t);\n\t}\n\n\tstatic tagToString(tag: TypeTag): string {\n\t\tif ('bool' in tag) {\n\t\t\treturn 'bool';\n\t\t}\n\t\tif ('u8' in tag) {\n\t\t\treturn 'u8';\n\t\t}\n\t\tif ('u16' in tag) {\n\t\t\treturn 'u16';\n\t\t}\n\t\tif ('u32' in tag) {\n\t\t\treturn 'u32';\n\t\t}\n\t\tif ('u64' in tag) {\n\t\t\treturn 'u64';\n\t\t}\n\t\tif ('u128' in tag) {\n\t\t\treturn 'u128';\n\t\t}\n\t\tif ('u256' in tag) {\n\t\t\treturn 'u256';\n\t\t}\n\t\tif ('address' in tag) {\n\t\t\treturn 'address';\n\t\t}\n\t\tif ('signer' in tag) {\n\t\t\treturn 'signer';\n\t\t}\n\t\tif ('vector' in tag) {\n\t\t\treturn `vector<${TypeTagSerializer.tagToString(tag.vector)}>`;\n\t\t}\n\t\tif ('struct' in tag) {\n\t\t\tconst struct = tag.struct;\n\t\t\tconst typeParams = struct.typeParams.map(TypeTagSerializer.tagToString).join(', ');\n\t\t\treturn `${struct.address}::${struct.module}::${struct.name}${\n\t\t\t\ttypeParams ? `<${typeParams}>` : ''\n\t\t\t}`;\n\t\t}\n\t\tthrow new Error('Invalid TypeTag');\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { RequestManager, HTTPTransport, Client } from '@open-rpc/client-js';\nimport type { Struct } from 'superstruct';\nimport { validate } from 'superstruct';\nimport { PACKAGE_VERSION, TARGETED_RPC_VERSION } from '../version.js';\nimport { RPCValidationError } from '../utils/errors.js';\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = { [header: string]: string };\n\nexport class JsonRpcClient {\n\tprivate rpcClient: Client;\n\n\tconstructor(url: string, httpHeaders?: HttpHeaders) {\n\t\tconst transport = new HTTPTransport(url, {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t'Client-Sdk-Type': 'typescript',\n\t\t\t\t'Client-Sdk-Version': PACKAGE_VERSION,\n\t\t\t\t'Client-Target-Api-Version': TARGETED_RPC_VERSION,\n\t\t\t\t...httpHeaders,\n\t\t\t},\n\t\t});\n\n\t\tthis.rpcClient = new Client(new RequestManager([transport]));\n\t}\n\n\tasync requestWithType<T>(method: string, args: any[], struct: Struct<T>): Promise<T> {\n\t\tconst req = { method, args };\n\n\t\tconst response = await this.request(method, args);\n\n\t\tif (process.env.NODE_ENV === 'test') {\n\t\t\tconst [err] = validate(response, struct);\n\t\t\tif (err) {\n\t\t\t\tthrow new RPCValidationError({\n\t\t\t\t\treq,\n\t\t\t\t\tresult: response,\n\t\t\t\t\tcause: err,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn response;\n\t}\n\n\tasync request(method: string, params: any[]): Promise<any> {\n\t\treturn await this.rpcClient.request({ method, params });\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// This file is generated by genversion.mjs. Do not edit it directly.\n\nexport const PACKAGE_VERSION = '0.37.1';\nexport const TARGETED_RPC_VERSION = '1.5.0';\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\ninterface RPCErrorRequest {\n\tmethod: string;\n\targs: any[];\n}\n\nexport class RPCValidationError extends Error {\n\treq: RPCErrorRequest;\n\tresult?: unknown;\n\n\tconstructor(options: { req: RPCErrorRequest; result?: unknown; cause?: Error }) {\n\t\tsuper(\n\t\t\t'RPC Validation Error: The response returned from RPC server does not match the TypeScript definition. This is likely because the SDK version is not compatible with the RPC server.',\n\t\t\t{ cause: options.cause },\n\t\t);\n\n\t\tthis.req = options.req;\n\t\tthis.result = options.result;\n\t\tthis.message = this.toString();\n\t}\n\n\ttoString() {\n\t\tlet str = super.toString();\n\t\tif (this.cause) {\n\t\t\tstr += `\\nCause: ${this.cause}`;\n\t\t}\n\t\tif (this.result) {\n\t\t\tstr += `\\nReponse Received: ${JSON.stringify(this.result, null, 2)}`;\n\t\t}\n\t\treturn str;\n\t}\n}\n\nexport class FaucetRateLimitError extends Error {}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SubscriptionId } from '../types/index.js';\nimport { RequestManager, Client, WebSocketTransport } from '@open-rpc/client-js';\n\nexport const getWebsocketUrl = (httpUrl: string, port?: number): string => {\n\tconst url = new URL(httpUrl);\n\turl.protocol = url.protocol.replace('http', 'ws');\n\tif (port) {\n\t\turl.port = port.toString();\n\t}\n\treturn url.toString();\n};\n\ntype NotificationMessageParams = {\n\tsubscription: SubscriptionId;\n\tresult: object;\n};\n\ntype SubscriptionRequest<T = any> = {\n\tid?: number;\n\tmethod: string;\n\tunsubscribe: string;\n\tparams: any[];\n\tonMessage: (event: T) => void;\n};\n\n/**\n * Configuration options for the websocket connection\n */\nexport type WebsocketClientOptions = {\n\t/**\n\t * Milliseconds before timing out while calling an RPC method\n\t */\n\tcallTimeout: number;\n\t/**\n\t * Milliseconds between attempts to connect\n\t */\n\treconnectTimeout: number;\n\t/**\n\t * Maximum number of times to try connecting before giving up\n\t */\n\tmaxReconnects: number;\n};\n\nexport const DEFAULT_CLIENT_OPTIONS: WebsocketClientOptions = {\n\tcallTimeout: 30000,\n\treconnectTimeout: 3000,\n\tmaxReconnects: 5,\n};\n\nexport class WebsocketClient {\n\t#client: Client | null;\n\t#subscriptions: Map<SubscriptionId, SubscriptionRequest & { id: number }>;\n\t#disconnects: number;\n\n\tconstructor(\n\t\tpublic endpoint: string,\n\t\tpublic options: WebsocketClientOptions = DEFAULT_CLIENT_OPTIONS,\n\t) {\n\t\tif (this.endpoint.startsWith('http')) {\n\t\t\tthis.endpoint = getWebsocketUrl(this.endpoint);\n\t\t}\n\n\t\tthis.#client = null;\n\t\tthis.#subscriptions = new Map();\n\t\tthis.#disconnects = 0;\n\t}\n\n\t#setupClient() {\n\t\tif (this.#client) {\n\t\t\treturn this.#client;\n\t\t}\n\n\t\tconst transport = new WebSocketTransport(this.endpoint);\n\t\tconst requestManager = new RequestManager([transport]);\n\t\tthis.#client = new Client(requestManager);\n\n\t\ttransport.connection.addEventListener('open', () => {\n\t\t\tthis.#disconnects = 0;\n\t\t});\n\n\t\ttransport.connection.addEventListener('close', () => {\n\t\t\tthis.#disconnects++;\n\t\t\tif (this.#disconnects <= this.options.maxReconnects) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.#reconnect();\n\t\t\t\t}, this.options.reconnectTimeout);\n\t\t\t}\n\t\t});\n\n\t\tthis.#client.onNotification((data) => {\n\t\t\tconst params = data.params as NotificationMessageParams;\n\n\t\t\tthis.#subscriptions.forEach((subscription) => {\n\t\t\t\tif (subscription.method === data.method && params.subscription === subscription.id) {\n\t\t\t\t\tsubscription.onMessage(params.result);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn this.#client;\n\t}\n\n\t#reconnect() {\n\t\tthis.#client?.close();\n\t\tthis.#client = null;\n\n\t\tthis.#subscriptions.forEach((subscription) => this.request(subscription));\n\t}\n\n\tasync request<T>(input: SubscriptionRequest<T>) {\n\t\tconst client = this.#setupClient();\n\t\tconst id = await client.request(\n\t\t\t{ method: input.method, params: input.params },\n\t\t\tthis.options.callTimeout,\n\t\t);\n\n\t\t// If an input ID is provided, this is a reconnect and we need to use that ID instead:\n\t\tthis.#subscriptions.set(input.id || id, {\n\t\t\t...input,\n\t\t\t// Always set the latest actual subscription ID:\n\t\t\tid,\n\t\t});\n\n\t\treturn async () => {\n\t\t\tconst client = this.#setupClient();\n\t\t\t// NOTE: Due to reconnects, the inner subscription ID could have actually changed:\n\t\t\tconst subscription = this.#subscriptions.get(id);\n\t\t\tif (!subscription) return false;\n\n\t\t\tthis.#subscriptions.delete(id);\n\n\t\t\treturn client.request(\n\t\t\t\t{ method: input.unsubscribe, params: [subscription.id] },\n\t\t\t\tthis.options.callTimeout,\n\t\t\t);\n\t\t};\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { FaucetResponse, SuiAddress } from '../types/index.js';\nimport { FaucetRateLimitError } from '../utils/errors.js';\nimport type { HttpHeaders } from './client.js';\n\nexport async function requestSuiFromFaucet(\n\tendpoint: string,\n\trecipient: SuiAddress,\n\thttpHeaders?: HttpHeaders,\n): Promise<FaucetResponse> {\n\tconst res = await fetch(endpoint, {\n\t\tmethod: 'POST',\n\t\tbody: JSON.stringify({\n\t\t\tFixedAmountRequest: {\n\t\t\t\trecipient,\n\t\t\t},\n\t\t}),\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json',\n\t\t\t...(httpHeaders || {}),\n\t\t},\n\t});\n\n\tif (res.status === 429) {\n\t\tthrow new FaucetRateLimitError(\n\t\t\t`Too many requests from this client have been sent to the faucet. Please retry later`,\n\t\t);\n\t}\n\tlet parsed;\n\ttry {\n\t\tparsed = await res.json();\n\t} catch (e) {\n\t\tthrow new Error(\n\t\t\t`Encountered error when parsing response from faucet, error: ${e}, status ${res.status}, response ${res}`,\n\t\t);\n\t}\n\tif (parsed.error) {\n\t\tthrow new Error(`Faucet returns error: ${parsed.error}`);\n\t}\n\treturn parsed;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { HttpHeaders } from '../rpc/client.js';\nimport { JsonRpcClient } from '../rpc/client.js';\nimport type {\n\tExecuteTransactionRequestType,\n\tObjectId,\n\tSuiEventFilter,\n\tTransactionDigest,\n\tSuiTransactionBlockResponseQuery,\n\tFaucetResponse,\n\tOrder,\n\tCoinMetadata,\n\tCheckpointDigest,\n\tSuiObjectDataOptions,\n\tSuiTransactionBlockResponseOptions,\n\tSuiEvent,\n\tSuiObjectResponseQuery,\n\tTransactionFilter,\n\tTransactionEffects,\n\tUnsubscribe,\n} from '../types/index.js';\nimport {\n\tPaginatedTransactionResponse,\n\tSuiAddress,\n\tSuiMoveFunctionArgTypes,\n\tSuiMoveNormalizedFunction,\n\tSuiMoveNormalizedModule,\n\tSuiMoveNormalizedModules,\n\tSuiMoveNormalizedStruct,\n\tSuiTransactionBlockResponse,\n\tPaginatedEvents,\n\tDevInspectResults,\n\tisValidTransactionDigest,\n\tisValidSuiAddress,\n\tisValidSuiObjectId,\n\tnormalizeSuiAddress,\n\tnormalizeSuiObjectId,\n\tCoinMetadataStruct,\n\tPaginatedCoins,\n\tSuiObjectResponse,\n\tDelegatedStake,\n\tCoinBalance,\n\tCoinSupply,\n\tCheckpoint,\n\tCommitteeInfo,\n\tDryRunTransactionBlockResponse,\n\tSuiSystemStateSummary,\n\tPaginatedObjectsResponse,\n\tValidatorsApy,\n\tMoveCallMetrics,\n\tObjectRead,\n\tResolvedNameServiceNames,\n\tProtocolConfig,\n} from '../types/index.js';\nimport type { DynamicFieldName } from '../types/dynamic_fields.js';\nimport { DynamicFieldPage } from '../types/dynamic_fields.js';\nimport type { WebsocketClientOptions } from '../rpc/websocket-client.js';\nimport { DEFAULT_CLIENT_OPTIONS, WebsocketClient } from '../rpc/websocket-client.js';\nimport { requestSuiFromFaucet } from '../rpc/faucet-client.js';\nimport { any, array, string, nullable } from 'superstruct';\nimport { fromB58, toB64, toHEX } from '@mysten/bcs';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport type { Connection } from '../rpc/connection.js';\nimport { devnetConnection } from '../rpc/connection.js';\nimport { TransactionBlock } from '../builder/index.js';\nimport { CheckpointPage } from '../types/checkpoints.js';\nimport { NetworkMetrics, AddressMetrics } from '../types/metrics.js';\nimport { EpochInfo, EpochPage } from '../types/epochs.js';\n\nexport interface PaginationArguments<Cursor> {\n\t/** Optional paging cursor */\n\tcursor?: Cursor;\n\t/** Maximum item returned per page */\n\tlimit?: number | null;\n}\n\nexport interface OrderArguments {\n\torder?: Order | null;\n}\n\n/**\n * Configuration options for the JsonRpcProvider. If the value of a field is not provided,\n * value in `DEFAULT_OPTIONS` for that field will be used\n */\nexport type RpcProviderOptions = {\n\t/**\n\t * Configuration options for the websocket connection\n\t * TODO: Move to connection.\n\t */\n\tsocketOptions?: WebsocketClientOptions;\n\t/**\n\t * Cache timeout in seconds for the RPC API Version\n\t */\n\tversionCacheTimeoutInSeconds?: number;\n\n\t/** Allow defining a custom RPC client to use */\n\trpcClient?: JsonRpcClient;\n\n\t/** Allow defining a custom websocket client to use */\n\twebsocketClient?: WebsocketClient;\n};\n\nconst DEFAULT_OPTIONS: RpcProviderOptions = {\n\tsocketOptions: DEFAULT_CLIENT_OPTIONS,\n\tversionCacheTimeoutInSeconds: 600,\n};\n\nexport class JsonRpcProvider {\n\tpublic connection: Connection;\n\tprotected client: JsonRpcClient;\n\tprotected wsClient: WebsocketClient;\n\tprivate rpcApiVersion: string | undefined;\n\tprivate cacheExpiry: number | undefined;\n\t/**\n\t * Establish a connection to a Sui RPC endpoint\n\t *\n\t * @param connection The `Connection` object containing configuration for the network.\n\t * @param options configuration options for the provider\n\t */\n\tconstructor(\n\t\t// TODO: Probably remove the default endpoint here:\n\t\tconnection: Connection = devnetConnection,\n\t\tpublic options: RpcProviderOptions = DEFAULT_OPTIONS,\n\t) {\n\t\tthis.connection = connection;\n\n\t\tconst opts = { ...DEFAULT_OPTIONS, ...options };\n\t\tthis.options = opts;\n\t\t// TODO: add header for websocket request\n\t\tthis.client = opts.rpcClient ?? new JsonRpcClient(this.connection.fullnode);\n\n\t\tthis.wsClient =\n\t\t\topts.websocketClient ?? new WebsocketClient(this.connection.websocket, opts.socketOptions);\n\t}\n\n\tasync getRpcApiVersion(): Promise<string | undefined> {\n\t\tif (this.rpcApiVersion && this.cacheExpiry && this.cacheExpiry <= Date.now()) {\n\t\t\treturn this.rpcApiVersion;\n\t\t}\n\n\t\ttry {\n\t\t\tconst resp = await this.client.requestWithType('rpc.discover', [], any());\n\t\t\tthis.rpcApiVersion = resp.info.version;\n\t\t\tthis.cacheExpiry =\n\t\t\t\t// Date.now() is in milliseconds, but the timeout is in seconds\n\t\t\t\tDate.now() + (this.options.versionCacheTimeoutInSeconds ?? 0) * 1000;\n\t\t\treturn this.rpcApiVersion;\n\t\t} catch (err) {\n\t\t\tconsole.warn('Error fetching version number of the RPC API', err);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync requestSuiFromFaucet(\n\t\trecipient: SuiAddress,\n\t\thttpHeaders?: HttpHeaders,\n\t): Promise<FaucetResponse> {\n\t\tif (!this.connection.faucet) {\n\t\t\tthrow new Error('Faucet URL is not specified');\n\t\t}\n\t\treturn requestSuiFromFaucet(this.connection.faucet, recipient, httpHeaders);\n\t}\n\n\t/**\n\t * Get all Coin<`coin_type`> objects owned by an address.\n\t */\n\tasync getCoins(\n\t\tinput: {\n\t\t\towner: SuiAddress;\n\t\t\tcoinType?: string | null;\n\t\t} & PaginationArguments<PaginatedCoins['nextCursor']>,\n\t): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getCoins',\n\t\t\t[input.owner, input.coinType, input.cursor, input.limit],\n\t\t\tPaginatedCoins,\n\t\t);\n\t}\n\n\t/**\n\t * Get all Coin objects owned by an address.\n\t */\n\tasync getAllCoins(\n\t\tinput: {\n\t\t\towner: SuiAddress;\n\t\t} & PaginationArguments<PaginatedCoins['nextCursor']>,\n\t): Promise<PaginatedCoins> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getAllCoins',\n\t\t\t[input.owner, input.cursor, input.limit],\n\t\t\tPaginatedCoins,\n\t\t);\n\t}\n\n\t/**\n\t * Get the total coin balance for one coin type, owned by the address owner.\n\t */\n\tasync getBalance(input: {\n\t\towner: SuiAddress;\n\t\t/** optional fully qualified type names for the coin (e.g., 0x168da5bf1f48dafc111b0a488fa454aca95e0b5e::usdc::USDC), default to 0x2::sui::SUI if not specified. */\n\t\tcoinType?: string | null;\n\t}): Promise<CoinBalance> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getBalance',\n\t\t\t[input.owner, input.coinType],\n\t\t\tCoinBalance,\n\t\t);\n\t}\n\n\t/**\n\t * Get the total coin balance for all coin types, owned by the address owner.\n\t */\n\tasync getAllBalances(input: { owner: SuiAddress }): Promise<CoinBalance[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getAllBalances',\n\t\t\t[input.owner],\n\t\t\tarray(CoinBalance),\n\t\t);\n\t}\n\n\t/**\n\t * Fetch CoinMetadata for a given coin type\n\t */\n\tasync getCoinMetadata(input: { coinType: string }): Promise<CoinMetadata | null> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getCoinMetadata',\n\t\t\t[input.coinType],\n\t\t\tCoinMetadataStruct,\n\t\t);\n\t}\n\n\t/**\n\t *  Fetch total supply for a coin\n\t */\n\tasync getTotalSupply(input: { coinType: string }): Promise<CoinSupply> {\n\t\treturn await this.client.requestWithType('suix_getTotalSupply', [input.coinType], CoinSupply);\n\t}\n\n\t/**\n\t * Invoke any RPC method\n\t * @param method the method to be invoked\n\t * @param args the arguments to be passed to the RPC request\n\t */\n\tasync call(method: string, params: any[]): Promise<any> {\n\t\treturn await this.client.request(method, params);\n\t}\n\n\t/**\n\t * Get Move function argument types like read, write and full access\n\t */\n\tasync getMoveFunctionArgTypes(input: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t\tfunction: string;\n\t}): Promise<SuiMoveFunctionArgTypes> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getMoveFunctionArgTypes',\n\t\t\t[input.package, input.module, input.function],\n\t\t\tSuiMoveFunctionArgTypes,\n\t\t);\n\t}\n\n\t/**\n\t * Get a map from module name to\n\t * structured representations of Move modules\n\t */\n\tasync getNormalizedMoveModulesByPackage(input: {\n\t\tpackage: string;\n\t}): Promise<SuiMoveNormalizedModules> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getNormalizedMoveModulesByPackage',\n\t\t\t[input.package],\n\t\t\tSuiMoveNormalizedModules,\n\t\t);\n\t}\n\n\t/**\n\t * Get a structured representation of Move module\n\t */\n\tasync getNormalizedMoveModule(input: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t}): Promise<SuiMoveNormalizedModule> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getNormalizedMoveModule',\n\t\t\t[input.package, input.module],\n\t\t\tSuiMoveNormalizedModule,\n\t\t);\n\t}\n\n\t/**\n\t * Get a structured representation of Move function\n\t */\n\tasync getNormalizedMoveFunction(input: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t\tfunction: string;\n\t}): Promise<SuiMoveNormalizedFunction> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getNormalizedMoveFunction',\n\t\t\t[input.package, input.module, input.function],\n\t\t\tSuiMoveNormalizedFunction,\n\t\t);\n\t}\n\n\t/**\n\t * Get a structured representation of Move struct\n\t */\n\tasync getNormalizedMoveStruct(input: {\n\t\tpackage: string;\n\t\tmodule: string;\n\t\tstruct: string;\n\t}): Promise<SuiMoveNormalizedStruct> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getNormalizedMoveStruct',\n\t\t\t[input.package, input.module, input.struct],\n\t\t\tSuiMoveNormalizedStruct,\n\t\t);\n\t}\n\n\t/**\n\t * Get all objects owned by an address\n\t */\n\tasync getOwnedObjects(\n\t\tinput: {\n\t\t\towner: SuiAddress;\n\t\t} & PaginationArguments<PaginatedObjectsResponse['nextCursor']> &\n\t\t\tSuiObjectResponseQuery,\n\t): Promise<PaginatedObjectsResponse> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getOwnedObjects',\n\t\t\t[\n\t\t\t\tinput.owner,\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiObjectResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t],\n\t\t\tPaginatedObjectsResponse,\n\t\t);\n\t}\n\n\t/**\n\t * Get details about an object\n\t */\n\tasync getObject(input: {\n\t\tid: ObjectId;\n\t\toptions?: SuiObjectDataOptions;\n\t}): Promise<SuiObjectResponse> {\n\t\tif (!input.id || !isValidSuiObjectId(normalizeSuiObjectId(input.id))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getObject',\n\t\t\t[input.id, input.options],\n\t\t\tSuiObjectResponse,\n\t\t);\n\t}\n\n\tasync tryGetPastObject(input: {\n\t\tid: ObjectId;\n\t\tversion: number;\n\t\toptions?: SuiObjectDataOptions;\n\t}): Promise<ObjectRead> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_tryGetPastObject',\n\t\t\t[input.id, input.version, input.options],\n\t\t\tObjectRead,\n\t\t);\n\t}\n\n\t/**\n\t * Batch get details about a list of objects. If any of the object ids are duplicates the call will fail\n\t */\n\tasync multiGetObjects(input: {\n\t\tids: ObjectId[];\n\t\toptions?: SuiObjectDataOptions;\n\t}): Promise<SuiObjectResponse[]> {\n\t\tinput.ids.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Object id ${id}`);\n\t\t\t}\n\t\t});\n\t\tconst hasDuplicates = input.ids.length !== new Set(input.ids).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate object ids in batch call ${input.ids}`);\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_multiGetObjects',\n\t\t\t[input.ids, input.options],\n\t\t\tarray(SuiObjectResponse),\n\t\t);\n\t}\n\n\t/**\n\t * Get transaction blocks for a given query criteria\n\t */\n\tasync queryTransactionBlocks(\n\t\tinput: SuiTransactionBlockResponseQuery &\n\t\t\tPaginationArguments<PaginatedTransactionResponse['nextCursor']> &\n\t\t\tOrderArguments,\n\t): Promise<PaginatedTransactionResponse> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_queryTransactionBlocks',\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tfilter: input.filter,\n\t\t\t\t\toptions: input.options,\n\t\t\t\t} as SuiTransactionBlockResponseQuery,\n\t\t\t\tinput.cursor,\n\t\t\t\tinput.limit,\n\t\t\t\t(input.order || 'descending') === 'descending',\n\t\t\t],\n\t\t\tPaginatedTransactionResponse,\n\t\t);\n\t}\n\n\tasync getTransactionBlock(input: {\n\t\tdigest: TransactionDigest;\n\t\toptions?: SuiTransactionBlockResponseOptions;\n\t}): Promise<SuiTransactionBlockResponse> {\n\t\tif (!isValidTransactionDigest(input.digest)) {\n\t\t\tthrow new Error('Invalid Transaction digest');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getTransactionBlock',\n\t\t\t[input.digest, input.options],\n\t\t\tSuiTransactionBlockResponse,\n\t\t);\n\t}\n\n\tasync multiGetTransactionBlocks(input: {\n\t\tdigests: TransactionDigest[];\n\t\toptions?: SuiTransactionBlockResponseOptions;\n\t}): Promise<SuiTransactionBlockResponse[]> {\n\t\tinput.digests.forEach((d) => {\n\t\t\tif (!isValidTransactionDigest(d)) {\n\t\t\t\tthrow new Error(`Invalid Transaction digest ${d}`);\n\t\t\t}\n\t\t});\n\n\t\tconst hasDuplicates = input.digests.length !== new Set(input.digests).size;\n\t\tif (hasDuplicates) {\n\t\t\tthrow new Error(`Duplicate digests in batch call ${input.digests}`);\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_multiGetTransactionBlocks',\n\t\t\t[input.digests, input.options],\n\t\t\tarray(SuiTransactionBlockResponse),\n\t\t);\n\t}\n\n\tasync executeTransactionBlock(input: {\n\t\ttransactionBlock: Uint8Array | string;\n\t\tsignature: SerializedSignature | SerializedSignature[];\n\t\toptions?: SuiTransactionBlockResponseOptions;\n\t\trequestType?: ExecuteTransactionRequestType;\n\t}): Promise<SuiTransactionBlockResponse> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_executeTransactionBlock',\n\t\t\t[\n\t\t\t\ttypeof input.transactionBlock === 'string'\n\t\t\t\t\t? input.transactionBlock\n\t\t\t\t\t: toB64(input.transactionBlock),\n\t\t\t\tArray.isArray(input.signature) ? input.signature : [input.signature],\n\t\t\t\tinput.options,\n\t\t\t\tinput.requestType,\n\t\t\t],\n\t\t\tSuiTransactionBlockResponse,\n\t\t);\n\t}\n\n\t/**\n\t * Get total number of transactions\n\t */\n\n\tasync getTotalTransactionBlocks(): Promise<bigint> {\n\t\tconst resp = await this.client.requestWithType('sui_getTotalTransactionBlocks', [], string());\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Getting the reference gas price for the network\n\t */\n\tasync getReferenceGasPrice(): Promise<bigint> {\n\t\tconst resp = await this.client.requestWithType('suix_getReferenceGasPrice', [], string());\n\t\treturn BigInt(resp);\n\t}\n\n\t/**\n\t * Return the delegated stakes for an address\n\t */\n\tasync getStakes(input: { owner: SuiAddress }): Promise<DelegatedStake[]> {\n\t\tif (!input.owner || !isValidSuiAddress(normalizeSuiAddress(input.owner))) {\n\t\t\tthrow new Error('Invalid Sui address');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getStakes',\n\t\t\t[input.owner],\n\t\t\tarray(DelegatedStake),\n\t\t);\n\t}\n\n\t/**\n\t * Return the delegated stakes queried by id.\n\t */\n\tasync getStakesByIds(input: { stakedSuiIds: ObjectId[] }): Promise<DelegatedStake[]> {\n\t\tinput.stakedSuiIds.forEach((id) => {\n\t\t\tif (!id || !isValidSuiObjectId(normalizeSuiObjectId(id))) {\n\t\t\t\tthrow new Error(`Invalid Sui Stake id ${id}`);\n\t\t\t}\n\t\t});\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getStakesByIds',\n\t\t\t[input.stakedSuiIds],\n\t\t\tarray(DelegatedStake),\n\t\t);\n\t}\n\n\t/**\n\t * Return the latest system state content.\n\t */\n\tasync getLatestSuiSystemState(): Promise<SuiSystemStateSummary> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getLatestSuiSystemState',\n\t\t\t[],\n\t\t\tSuiSystemStateSummary,\n\t\t);\n\t}\n\n\t/**\n\t * Get events for a given query criteria\n\t */\n\tasync queryEvents(\n\t\tinput: {\n\t\t\t/** the event query criteria. */\n\t\t\tquery: SuiEventFilter;\n\t\t} & PaginationArguments<PaginatedEvents['nextCursor']> &\n\t\t\tOrderArguments,\n\t): Promise<PaginatedEvents> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_queryEvents',\n\t\t\t[input.query, input.cursor, input.limit, (input.order || 'descending') === 'descending'],\n\t\t\tPaginatedEvents,\n\t\t);\n\t}\n\n\t/**\n\t * Subscribe to get notifications whenever an event matching the filter occurs\n\t */\n\tasync subscribeEvent(input: {\n\t\t/** filter describing the subset of events to follow */\n\t\tfilter: SuiEventFilter;\n\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\tonMessage: (event: SuiEvent) => void;\n\t}): Promise<Unsubscribe> {\n\t\treturn this.wsClient.request({\n\t\t\tmethod: 'suix_subscribeEvent',\n\t\t\tunsubscribe: 'suix_unsubscribeEvent',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\tasync subscribeTransaction(input: {\n\t\t/** filter describing the subset of events to follow */\n\t\tfilter: TransactionFilter;\n\t\t/** function to run when we receive a notification of a new event matching the filter */\n\t\tonMessage: (event: TransactionEffects) => void;\n\t}): Promise<Unsubscribe> {\n\t\treturn this.wsClient.request({\n\t\t\tmethod: 'suix_subscribeTransaction',\n\t\t\tunsubscribe: 'suix_unsubscribeTransaction',\n\t\t\tparams: [input.filter],\n\t\t\tonMessage: input.onMessage,\n\t\t});\n\t}\n\n\t/**\n\t * Runs the transaction block in dev-inspect mode. Which allows for nearly any\n\t * transaction (or Move call) with any arguments. Detailed results are\n\t * provided, including both the transaction effects and any return values.\n\t */\n\tasync devInspectTransactionBlock(input: {\n\t\ttransactionBlock: TransactionBlock | string | Uint8Array;\n\t\tsender: SuiAddress;\n\t\t/** Default to use the network reference gas price stored in the Sui System State object */\n\t\tgasPrice?: bigint | number | null;\n\t\t/** optional. Default to use the current epoch number stored in the Sui System State object */\n\t\tepoch?: string | null;\n\t}): Promise<DevInspectResults> {\n\t\tlet devInspectTxBytes;\n\t\tif (TransactionBlock.is(input.transactionBlock)) {\n\t\t\tinput.transactionBlock.setSenderIfNotSet(input.sender);\n\t\t\tdevInspectTxBytes = toB64(\n\t\t\t\tawait input.transactionBlock.build({\n\t\t\t\t\tprovider: this,\n\t\t\t\t\tonlyTransactionKind: true,\n\t\t\t\t}),\n\t\t\t);\n\t\t} else if (typeof input.transactionBlock === 'string') {\n\t\t\tdevInspectTxBytes = input.transactionBlock;\n\t\t} else if (input.transactionBlock instanceof Uint8Array) {\n\t\t\tdevInspectTxBytes = toB64(input.transactionBlock);\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction block format.');\n\t\t}\n\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_devInspectTransactionBlock',\n\t\t\t[input.sender, devInspectTxBytes, input.gasPrice, input.epoch],\n\t\t\tDevInspectResults,\n\t\t);\n\t}\n\n\t/**\n\t * Dry run a transaction block and return the result.\n\t */\n\tasync dryRunTransactionBlock(input: {\n\t\ttransactionBlock: Uint8Array | string;\n\t}): Promise<DryRunTransactionBlockResponse> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_dryRunTransactionBlock',\n\t\t\t[\n\t\t\t\ttypeof input.transactionBlock === 'string'\n\t\t\t\t\t? input.transactionBlock\n\t\t\t\t\t: toB64(input.transactionBlock),\n\t\t\t],\n\t\t\tDryRunTransactionBlockResponse,\n\t\t);\n\t}\n\n\t/**\n\t * Return the list of dynamic field objects owned by an object\n\t */\n\tasync getDynamicFields(\n\t\tinput: {\n\t\t\t/** The id of the parent object */\n\t\t\tparentId: ObjectId;\n\t\t} & PaginationArguments<DynamicFieldPage['nextCursor']>,\n\t): Promise<DynamicFieldPage> {\n\t\tif (!input.parentId || !isValidSuiObjectId(normalizeSuiObjectId(input.parentId))) {\n\t\t\tthrow new Error('Invalid Sui Object id');\n\t\t}\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getDynamicFields',\n\t\t\t[input.parentId, input.cursor, input.limit],\n\t\t\tDynamicFieldPage,\n\t\t);\n\t}\n\n\t/**\n\t * Return the dynamic field object information for a specified object\n\t */\n\tasync getDynamicFieldObject(input: {\n\t\t/** The ID of the quered parent object */\n\t\tparentId: ObjectId;\n\t\t/** The name of the dynamic field */\n\t\tname: string | DynamicFieldName;\n\t}): Promise<SuiObjectResponse> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getDynamicFieldObject',\n\t\t\t[input.parentId, input.name],\n\t\t\tSuiObjectResponse,\n\t\t);\n\t}\n\n\t/**\n\t * Get the sequence number of the latest checkpoint that has been executed\n\t */\n\tasync getLatestCheckpointSequenceNumber(): Promise<string> {\n\t\tconst resp = await this.client.requestWithType(\n\t\t\t'sui_getLatestCheckpointSequenceNumber',\n\t\t\t[],\n\t\t\tstring(),\n\t\t);\n\t\treturn String(resp);\n\t}\n\n\t/**\n\t * Returns information about a given checkpoint\n\t */\n\tasync getCheckpoint(input: {\n\t\t/** The checkpoint digest or sequence number */\n\t\tid: CheckpointDigest | string;\n\t}): Promise<Checkpoint> {\n\t\treturn await this.client.requestWithType('sui_getCheckpoint', [input.id], Checkpoint);\n\t}\n\n\t/**\n\t * Returns historical checkpoints paginated\n\t */\n\tasync getCheckpoints(\n\t\tinput: {\n\t\t\t/** query result ordering, default to false (ascending order), oldest record first */\n\t\t\tdescendingOrder: boolean;\n\t\t} & PaginationArguments<CheckpointPage['nextCursor']>,\n\t): Promise<CheckpointPage> {\n\t\tconst resp = await this.client.requestWithType(\n\t\t\t'sui_getCheckpoints',\n\t\t\t[input.cursor, input?.limit, input.descendingOrder],\n\t\t\tCheckpointPage,\n\t\t);\n\t\treturn resp;\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCommitteeInfo(input?: {\n\t\t/** The epoch of interest. If null, default to the latest epoch */\n\t\tepoch?: string | null;\n\t}): Promise<CommitteeInfo> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getCommitteeInfo',\n\t\t\t[input?.epoch],\n\t\t\tCommitteeInfo,\n\t\t);\n\t}\n\n\tasync getNetworkMetrics() {\n\t\treturn await this.client.requestWithType('suix_getNetworkMetrics', [], NetworkMetrics);\n\t}\n\n\tasync getAddressMetrics() {\n\t\treturn await this.client.requestWithType('suix_getLatestAddressMetrics', [], AddressMetrics);\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getEpochs(\n\t\tinput?: {\n\t\t\tdescendingOrder?: boolean;\n\t\t} & PaginationArguments<EpochPage['nextCursor']>,\n\t): Promise<EpochPage> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_getEpochs',\n\t\t\t[input?.cursor, input?.limit, input?.descendingOrder],\n\t\t\tEpochPage,\n\t\t);\n\t}\n\n\t/**\n\t * Returns list of top move calls by usage\n\t */\n\tasync getMoveCallMetrics(): Promise<MoveCallMetrics> {\n\t\treturn await this.client.requestWithType('suix_getMoveCallMetrics', [], MoveCallMetrics);\n\t}\n\n\t/**\n\t * Return the committee information for the asked epoch\n\t */\n\tasync getCurrentEpoch(): Promise<EpochInfo> {\n\t\treturn await this.client.requestWithType('suix_getCurrentEpoch', [], EpochInfo);\n\t}\n\n\t/**\n\t * Return the Validators APYs\n\t */\n\tasync getValidatorsApy(): Promise<ValidatorsApy> {\n\t\treturn await this.client.requestWithType('suix_getValidatorsApy', [], ValidatorsApy);\n\t}\n\n\t// TODO: Migrate this to `sui_getChainIdentifier` once it is widely available.\n\tasync getChainIdentifier(): Promise<string> {\n\t\tconst checkpoint = await this.getCheckpoint({ id: '0' });\n\t\tconst bytes = fromB58(checkpoint.digest);\n\t\treturn toHEX(bytes.slice(0, 4));\n\t}\n\n\tasync resolveNameServiceAddress(input: { name: string }): Promise<SuiAddress | null> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_resolveNameServiceAddress',\n\t\t\t[input.name],\n\t\t\tnullable(SuiAddress),\n\t\t);\n\t}\n\n\tasync resolveNameServiceNames(\n\t\tinput: {\n\t\t\taddress: string;\n\t\t} & PaginationArguments<ResolvedNameServiceNames['nextCursor']>,\n\t): Promise<ResolvedNameServiceNames> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'suix_resolveNameServiceNames',\n\t\t\t[input.address],\n\t\t\tResolvedNameServiceNames,\n\t\t);\n\t}\n\n\tasync getProtocolConfig(input?: { version?: string }): Promise<ProtocolConfig> {\n\t\treturn await this.client.requestWithType(\n\t\t\t'sui_getProtocolConfig',\n\t\t\t[input?.version],\n\t\t\tProtocolConfig,\n\t\t);\n\t}\n\n\t/**\n\t * Wait for a transaction block result to be available over the API.\n\t * This can be used in conjunction with `executeTransactionBlock` to wait for the transaction to\n\t * be available via the API.\n\t * This currently polls the `getTransactionBlock` API to check for the transaction.\n\t */\n\tasync waitForTransactionBlock({\n\t\tsignal,\n\t\ttimeout = 60 * 1000,\n\t\tpollInterval = 2 * 1000,\n\t\t...input\n\t}: {\n\t\t/** An optional abort signal that can be used to cancel */\n\t\tsignal?: AbortSignal;\n\t\t/** The amount of time to wait for a transaction block. Defaults to one minute. */\n\t\ttimeout?: number;\n\t\t/** The amount of time to wait between checks for the transaction block. Defaults to 2 seconds. */\n\t\tpollInterval?: number;\n\t} & Parameters<JsonRpcProvider['getTransactionBlock']>[0]): Promise<SuiTransactionBlockResponse> {\n\t\tconst timeoutSignal = AbortSignal.timeout(timeout);\n\t\tconst timeoutPromise = new Promise((_, reject) => {\n\t\t\ttimeoutSignal.addEventListener('abort', () => reject(timeoutSignal.reason));\n\t\t});\n\n\t\ttimeoutPromise.catch(() => {\n\t\t\t// Swallow unhandled rejections that might be thrown after early return\n\t\t});\n\n\t\twhile (!timeoutSignal.aborted) {\n\t\t\tsignal?.throwIfAborted();\n\t\t\ttry {\n\t\t\t\treturn await this.getTransactionBlock(input);\n\t\t\t} catch (e) {\n\t\t\t\t// Wait for either the next poll interval, or the timeout.\n\t\t\t\tawait Promise.race([\n\t\t\t\t\tnew Promise((resolve) => setTimeout(resolve, pollInterval)),\n\t\t\t\t\ttimeoutPromise,\n\t\t\t\t]);\n\t\t\t}\n\t\t}\n\n\t\ttimeoutSignal.throwIfAborted();\n\n\t\t// This should never happen, because the above case should always throw, but just adding it in the event that something goes horribly wrong.\n\t\tthrow new Error('Unexpected error while waiting for transaction block.');\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\ninterface ConnectionOptions {\n\tfullnode: string;\n\twebsocket?: string;\n\tfaucet?: string;\n}\n\nexport class Connection {\n\t#options: ConnectionOptions;\n\tconstructor(options: ConnectionOptions) {\n\t\tthis.#options = options;\n\t}\n\n\tget fullnode() {\n\t\treturn this.#options.fullnode;\n\t}\n\n\t// TODO: Decide if we should default the websocket URL like this:\n\tget websocket() {\n\t\treturn this.#options.websocket || this.#options.fullnode;\n\t}\n\n\tget faucet() {\n\t\treturn this.#options.faucet;\n\t}\n}\n\n// TODO: Maybe don't have pre-built connections, and instead just have pre-built objects that folks\n// can use with the connection?\nexport const localnetConnection = new Connection({\n\tfullnode: 'http://127.0.0.1:9000',\n\tfaucet: 'http://127.0.0.1:9123/gas',\n});\n\nexport const devnetConnection = new Connection({\n\tfullnode: 'https://fullnode.devnet.sui.io:443/',\n\tfaucet: 'https://faucet.devnet.sui.io/gas',\n});\n\nexport const testnetConnection = new Connection({\n\tfullnode: 'https://fullnode.testnet.sui.io:443/',\n\tfaucet: 'https://faucet.testnet.sui.io/gas',\n});\n\nexport const mainnetConnection = new Connection({\n\tfullnode: 'https://fullnode.mainnet.sui.io:443/',\n});\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport { is, mask } from 'superstruct';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport type { ObjectId, SuiMoveNormalizedType, ProtocolConfig } from '../types/index.js';\nimport {\n\textractMutableReference,\n\textractStructTag,\n\tgetObjectReference,\n\tgetSharedObjectInitialVersion,\n\tnormalizeSuiObjectId,\n\tSuiObjectRef,\n\tSUI_TYPE_ARG,\n} from '../types/index.js';\nimport type { TransactionArgument, TransactionType, MoveCallTransaction } from './Transactions.js';\nimport { Transactions, TransactionBlockInput, getTransactionType } from './Transactions.js';\nimport type { ObjectCallArg } from './Inputs.js';\nimport {\n\tBuilderCallArg,\n\tgetIdFromCallArg,\n\tInputs,\n\tisMutableSharedObjectInput,\n\tPureCallArg,\n} from './Inputs.js';\nimport { getPureSerializationType, isTxContext } from './serializer.js';\nimport type { TransactionExpiration } from './TransactionBlockData.js';\nimport { TransactionBlockDataBuilder } from './TransactionBlockData.js';\nimport type { WellKnownEncoding } from './utils.js';\nimport { TRANSACTION_TYPE, create } from './utils.js';\n\ntype TransactionResult = TransactionArgument & TransactionArgument[];\n\nconst DefaultOfflineLimits = {\n\tmaxPureArgumentSize: 16 * 1024,\n\tmaxTxGas: 50_000_000_000,\n\tmaxGasObjects: 256,\n\tmaxTxSizeBytes: 128 * 1024,\n} satisfies Limits;\n\nfunction createTransactionResult(index: number): TransactionResult {\n\tconst baseResult: TransactionArgument = { kind: 'Result', index };\n\n\tconst nestedResults: TransactionArgument[] = [];\n\tconst nestedResultFor = (resultIndex: number): TransactionArgument =>\n\t\t(nestedResults[resultIndex] ??= {\n\t\t\tkind: 'NestedResult',\n\t\t\tindex,\n\t\t\tresultIndex,\n\t\t});\n\n\treturn new Proxy(baseResult, {\n\t\tset() {\n\t\t\tthrow new Error(\n\t\t\t\t'The transaction result is a proxy, and does not support setting properties directly',\n\t\t\t);\n\t\t},\n\t\t// TODO: Instead of making this return a concrete argument, we should ideally\n\t\t// make it reference-based (so that this gets resolved at build-time), which\n\t\t// allows re-ordering transactions.\n\t\tget(target, property) {\n\t\t\t// This allows this transaction argument to be used in the singular form:\n\t\t\tif (property in target) {\n\t\t\t\treturn Reflect.get(target, property);\n\t\t\t}\n\n\t\t\t// Support destructuring:\n\t\t\tif (property === Symbol.iterator) {\n\t\t\t\treturn function* () {\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\twhile (true) {\n\t\t\t\t\t\tyield nestedResultFor(i);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (typeof property === 'symbol') return;\n\n\t\t\tconst resultIndex = parseInt(property, 10);\n\t\t\tif (Number.isNaN(resultIndex) || resultIndex < 0) return;\n\t\t\treturn nestedResultFor(resultIndex);\n\t\t},\n\t}) as TransactionResult;\n}\n\nfunction expectProvider(options: BuildOptions): JsonRpcProvider {\n\tif (!options.provider) {\n\t\tthrow new Error(\n\t\t\t`No provider passed to Transaction#build, but transaction data was not sufficient to build offline.`,\n\t\t);\n\t}\n\n\treturn options.provider;\n}\n\nconst TRANSACTION_BRAND = Symbol.for('@mysten/transaction');\n\nconst LIMITS = {\n\t// The maximum gas that is allowed.\n\tmaxTxGas: 'max_tx_gas',\n\t// The maximum number of gas objects that can be selected for one transaction.\n\tmaxGasObjects: 'max_gas_payment_objects',\n\t// The maximum size (in bytes) that the transaction can be:\n\tmaxTxSizeBytes: 'max_tx_size_bytes',\n\t// The maximum size (in bytes) that pure arguments can be:\n\tmaxPureArgumentSize: 'max_pure_argument_size',\n} as const;\n\ntype Limits = Partial<Record<keyof typeof LIMITS, number>>;\n\n// An amount of gas (in gas units) that is added to transactions as an overhead to ensure transactions do not fail.\nconst GAS_SAFE_OVERHEAD = 1000n;\n\n// The maximum objects that can be fetched at once using multiGetObjects.\nconst MAX_OBJECTS_PER_FETCH = 50;\n\nconst chunk = <T>(arr: T[], size: number): T[][] =>\n\tArray.from({ length: Math.ceil(arr.length / size) }, (_, i) =>\n\t\tarr.slice(i * size, i * size + size),\n\t);\n\ninterface BuildOptions {\n\tprovider?: JsonRpcProvider;\n\tonlyTransactionKind?: boolean;\n\t/** Define a protocol config to build against, instead of having it fetched from the provider at build time. */\n\tprotocolConfig?: ProtocolConfig;\n\t/** Define limits that are used when building the transaction. In general, we recommend using the protocol configuration instead of defining limits. */\n\tlimits?: Limits;\n}\n\n/**\n * Transaction Builder\n */\nexport class TransactionBlock {\n\t/** Returns `true` if the object is an instance of the Transaction builder class. */\n\tstatic is(obj: unknown): obj is TransactionBlock {\n\t\treturn !!obj && typeof obj === 'object' && (obj as any)[TRANSACTION_BRAND] === true;\n\t}\n\n\t/**\n\t * Converts from a serialize transaction kind (built with `build({ onlyTransactionKind: true })`) to a `Transaction` class.\n\t * Supports either a byte array, or base64-encoded bytes.\n\t */\n\tstatic fromKind(serialized: string | Uint8Array) {\n\t\tconst tx = new TransactionBlock();\n\n\t\ttx.#blockData = TransactionBlockDataBuilder.fromKindBytes(\n\t\t\ttypeof serialized === 'string' ? fromB64(serialized) : serialized,\n\t\t);\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Converts from a serialized transaction format to a `Transaction` class.\n\t * There are two supported serialized formats:\n\t * - A string returned from `Transaction#serialize`. The serialized format must be compatible, or it will throw an error.\n\t * - A byte array (or base64-encoded bytes) containing BCS transaction data.\n\t */\n\tstatic from(serialized: string | Uint8Array) {\n\t\tconst tx = new TransactionBlock();\n\n\t\t// Check for bytes:\n\t\tif (typeof serialized !== 'string' || !serialized.startsWith('{')) {\n\t\t\ttx.#blockData = TransactionBlockDataBuilder.fromBytes(\n\t\t\t\ttypeof serialized === 'string' ? fromB64(serialized) : serialized,\n\t\t\t);\n\t\t} else {\n\t\t\ttx.#blockData = TransactionBlockDataBuilder.restore(JSON.parse(serialized));\n\t\t}\n\n\t\treturn tx;\n\t}\n\n\t/** A helper to retrieve the Transaction builder `Transactions` */\n\tstatic get Transactions() {\n\t\treturn Transactions;\n\t}\n\n\t/** A helper to retrieve the Transaction builder `Inputs` */\n\tstatic get Inputs() {\n\t\treturn Inputs;\n\t}\n\n\tsetSender(sender: string) {\n\t\tthis.#blockData.sender = sender;\n\t}\n\t/**\n\t * Sets the sender only if it has not already been set.\n\t * This is useful for sponsored transaction flows where the sender may not be the same as the signer address.\n\t */\n\tsetSenderIfNotSet(sender: string) {\n\t\tif (!this.#blockData.sender) {\n\t\t\tthis.#blockData.sender = sender;\n\t\t}\n\t}\n\tsetExpiration(expiration?: TransactionExpiration) {\n\t\tthis.#blockData.expiration = expiration;\n\t}\n\tsetGasPrice(price: number | bigint) {\n\t\tthis.#blockData.gasConfig.price = String(price);\n\t}\n\tsetGasBudget(budget: number | bigint) {\n\t\tthis.#blockData.gasConfig.budget = String(budget);\n\t}\n\tsetGasOwner(owner: string) {\n\t\tthis.#blockData.gasConfig.owner = owner;\n\t}\n\tsetGasPayment(payments: SuiObjectRef[]) {\n\t\tthis.#blockData.gasConfig.payment = payments.map((payment) => mask(payment, SuiObjectRef));\n\t}\n\n\t#blockData: TransactionBlockDataBuilder;\n\t/** Get a snapshot of the transaction data, in JSON form: */\n\tget blockData() {\n\t\treturn this.#blockData.snapshot();\n\t}\n\n\t// Used to brand transaction classes so that they can be identified, even between multiple copies\n\t// of the builder.\n\tget [TRANSACTION_BRAND]() {\n\t\treturn true;\n\t}\n\n\tconstructor(transaction?: TransactionBlock) {\n\t\tthis.#blockData = new TransactionBlockDataBuilder(\n\t\t\ttransaction ? transaction.blockData : undefined,\n\t\t);\n\t}\n\n\t/** Returns an argument for the gas coin, to be used in a transaction. */\n\tget gas(): TransactionArgument {\n\t\treturn { kind: 'GasCoin' };\n\t}\n\n\t/**\n\t * Dynamically create a new input, which is separate from the `input`. This is important\n\t * for generated clients to be able to define unique inputs that are non-overlapping with the\n\t * defined inputs.\n\t *\n\t * For `Uint8Array` type automatically convert the input into a `Pure` CallArg, since this\n\t * is the format required for custom serialization.\n\t *\n\t */\n\t#input(type: 'object' | 'pure', value?: unknown) {\n\t\tconst index = this.#blockData.inputs.length;\n\t\tconst input = create(\n\t\t\t{\n\t\t\t\tkind: 'Input',\n\t\t\t\t// bigints can't be serialized to JSON, so just string-convert them here:\n\t\t\t\tvalue: typeof value === 'bigint' ? String(value) : value,\n\t\t\t\tindex,\n\t\t\t\ttype,\n\t\t\t},\n\t\t\tTransactionBlockInput,\n\t\t);\n\t\tthis.#blockData.inputs.push(input);\n\t\treturn input;\n\t}\n\n\t/**\n\t * Add a new object input to the transaction.\n\t */\n\tobject(value: ObjectId | ObjectCallArg) {\n\t\tconst id = getIdFromCallArg(value);\n\t\t// deduplicate\n\t\tconst inserted = this.#blockData.inputs.find(\n\t\t\t(i) => i.type === 'object' && id === getIdFromCallArg(i.value),\n\t\t);\n\t\treturn inserted ?? this.#input('object', value);\n\t}\n\n\t/**\n\t * Add a new object input to the transaction using the fully-resolved object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tobjectRef(...args: Parameters<(typeof Inputs)['ObjectRef']>) {\n\t\treturn this.object(Inputs.ObjectRef(...args));\n\t}\n\n\t/**\n\t * Add a new shared object input to the transaction using the fully-resolved shared object reference.\n\t * If you only have an object ID, use `builder.object(id)` instead.\n\t */\n\tsharedObjectRef(...args: Parameters<(typeof Inputs)['SharedObjectRef']>) {\n\t\treturn this.object(Inputs.SharedObjectRef(...args));\n\t}\n\n\t/**\n\t * Add a new non-object input to the transaction.\n\t */\n\tpure(\n\t\t/**\n\t\t * The pure value that will be used as the input value. If this is a Uint8Array, then the value\n\t\t * is assumed to be raw bytes, and will be used directly.\n\t\t */\n\t\tvalue: unknown,\n\t\t/**\n\t\t * The BCS type to serialize the value into. If not provided, the type will automatically be determined\n\t\t * based on how the input is used.\n\t\t */\n\t\ttype?: string,\n\t) {\n\t\t// TODO: we can also do some deduplication here\n\t\treturn this.#input(\n\t\t\t'pure',\n\t\t\tvalue instanceof Uint8Array ? Inputs.Pure(value) : type ? Inputs.Pure(value, type) : value,\n\t\t);\n\t}\n\n\t/** Add a transaction to the transaction block. */\n\tadd(transaction: TransactionType) {\n\t\tconst index = this.#blockData.transactions.push(transaction);\n\t\treturn createTransactionResult(index - 1);\n\t}\n\n\t// Method shorthands:\n\n\tsplitCoins(...args: Parameters<(typeof Transactions)['SplitCoins']>) {\n\t\treturn this.add(Transactions.SplitCoins(...args));\n\t}\n\tmergeCoins(...args: Parameters<(typeof Transactions)['MergeCoins']>) {\n\t\treturn this.add(Transactions.MergeCoins(...args));\n\t}\n\tpublish(...args: Parameters<(typeof Transactions)['Publish']>) {\n\t\treturn this.add(Transactions.Publish(...args));\n\t}\n\tupgrade(...args: Parameters<(typeof Transactions)['Upgrade']>) {\n\t\treturn this.add(Transactions.Upgrade(...args));\n\t}\n\tmoveCall(...args: Parameters<(typeof Transactions)['MoveCall']>) {\n\t\treturn this.add(Transactions.MoveCall(...args));\n\t}\n\ttransferObjects(...args: Parameters<(typeof Transactions)['TransferObjects']>) {\n\t\treturn this.add(Transactions.TransferObjects(...args));\n\t}\n\tmakeMoveVec(...args: Parameters<(typeof Transactions)['MakeMoveVec']>) {\n\t\treturn this.add(Transactions.MakeMoveVec(...args));\n\t}\n\n\t/**\n\t * Serialize the transaction to a string so that it can be sent to a separate context.\n\t * This is different from `build` in that it does not serialize to BCS bytes, and instead\n\t * uses a separate format that is unique to the transaction builder. This allows\n\t * us to serialize partially-complete transactions, that can then be completed and\n\t * built in a separate context.\n\t *\n\t * For example, a dapp can construct a transaction, but not provide gas objects\n\t * or a gas budget. The transaction then can be sent to the wallet, where this\n\t * information is automatically filled in (e.g. by querying for coin objects\n\t * and performing a dry run).\n\t */\n\tserialize() {\n\t\treturn JSON.stringify(this.#blockData.snapshot());\n\t}\n\n\t#getConfig(key: keyof typeof LIMITS, { protocolConfig, limits }: BuildOptions) {\n\t\t// Use the limits definition if that exists:\n\t\tif (limits && typeof limits[key] === 'number') {\n\t\t\treturn limits[key]!;\n\t\t}\n\n\t\tif (!protocolConfig) {\n\t\t\treturn DefaultOfflineLimits[key];\n\t\t}\n\n\t\t// Fallback to protocol config:\n\t\tconst attribute = protocolConfig?.attributes[LIMITS[key]];\n\t\tif (!attribute) {\n\t\t\tthrow new Error(`Missing expected protocol config: \"${LIMITS[key]}\"`);\n\t\t}\n\n\t\tconst value =\n\t\t\t'u64' in attribute ? attribute.u64 : 'u32' in attribute ? attribute.u32 : attribute.f64;\n\n\t\tif (!value) {\n\t\t\tthrow new Error(`Unexpected protocol config value found for: \"${LIMITS[key]}\"`);\n\t\t}\n\n\t\t// NOTE: Technically this is not a safe conversion, but we know all of the values in protocol config are safe\n\t\treturn Number(value);\n\t}\n\n\t/** Build the transaction to BCS bytes. */\n\tasync build(options: BuildOptions = {}): Promise<Uint8Array> {\n\t\tawait this.#prepare(options);\n\t\treturn this.#blockData.build({\n\t\t\tmaxSizeBytes: this.#getConfig('maxTxSizeBytes', options),\n\t\t\tonlyTransactionKind: options.onlyTransactionKind,\n\t\t});\n\t}\n\n\t/** Derive transaction digest */\n\tasync getDigest({\n\t\tprovider,\n\t}: {\n\t\tprovider?: JsonRpcProvider;\n\t} = {}): Promise<string> {\n\t\tawait this.#prepare({ provider });\n\t\treturn this.#blockData.getDigest();\n\t}\n\n\t#validate(options: BuildOptions) {\n\t\tconst maxPureArgumentSize = this.#getConfig('maxPureArgumentSize', options);\n\t\t// Validate all inputs are the correct size:\n\t\tthis.#blockData.inputs.forEach((input, index) => {\n\t\t\tif (is(input.value, PureCallArg)) {\n\t\t\t\tif (input.value.Pure.length > maxPureArgumentSize) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Input at index ${index} is too large, max pure input size is ${maxPureArgumentSize} bytes, got ${input.value.Pure.length} bytes`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// The current default is just picking _all_ coins we can which may not be ideal.\n\tasync #prepareGasPayment(options: BuildOptions) {\n\t\tif (this.#blockData.gasConfig.payment) {\n\t\t\tconst maxGasObjects = this.#getConfig('maxGasObjects', options);\n\t\t\tif (this.#blockData.gasConfig.payment.length > maxGasObjects) {\n\t\t\t\tthrow new Error(`Payment objects exceed maximum amount: ${maxGasObjects}`);\n\t\t\t}\n\t\t}\n\n\t\t// Early return if the payment is already set:\n\t\tif (options.onlyTransactionKind || this.#blockData.gasConfig.payment) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst gasOwner = this.#blockData.gasConfig.owner ?? this.#blockData.sender;\n\n\t\tconst coins = await expectProvider(options).getCoins({\n\t\t\towner: gasOwner!,\n\t\t\tcoinType: SUI_TYPE_ARG,\n\t\t});\n\n\t\tconst paymentCoins = coins.data\n\t\t\t// Filter out coins that are also used as input:\n\t\t\t.filter((coin) => {\n\t\t\t\tconst matchingInput = this.#blockData.inputs.find((input) => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tis(input.value, BuilderCallArg) &&\n\t\t\t\t\t\t'Object' in input.value &&\n\t\t\t\t\t\t'ImmOrOwned' in input.value.Object\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn coin.coinObjectId === input.value.Object.ImmOrOwned.objectId;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\n\t\t\t\treturn !matchingInput;\n\t\t\t})\n\t\t\t.slice(0, this.#getConfig('maxGasObjects', options) - 1)\n\t\t\t.map((coin) => ({\n\t\t\t\tobjectId: coin.coinObjectId,\n\t\t\t\tdigest: coin.digest,\n\t\t\t\tversion: coin.version,\n\t\t\t}));\n\n\t\tif (!paymentCoins.length) {\n\t\t\tthrow new Error('No valid gas coins found for the transaction.');\n\t\t}\n\n\t\tthis.setGasPayment(paymentCoins);\n\t}\n\n\tasync #prepareGasPrice(options: BuildOptions) {\n\t\tif (options.onlyTransactionKind || this.#blockData.gasConfig.price) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setGasPrice(await expectProvider(options).getReferenceGasPrice());\n\t}\n\n\tasync #prepareTransactions(options: BuildOptions) {\n\t\tconst { inputs, transactions } = this.#blockData;\n\n\t\tconst moveModulesToResolve: MoveCallTransaction[] = [];\n\n\t\t// Keep track of the object references that will need to be resolved at the end of the transaction.\n\t\t// We keep the input by-reference to avoid needing to re-resolve it:\n\t\tconst objectsToResolve: {\n\t\t\tid: string;\n\t\t\tinput: TransactionBlockInput;\n\t\t\tnormalizedType?: SuiMoveNormalizedType;\n\t\t}[] = [];\n\n\t\ttransactions.forEach((transaction) => {\n\t\t\t// Special case move call:\n\t\t\tif (transaction.kind === 'MoveCall') {\n\t\t\t\t// Determine if any of the arguments require encoding.\n\t\t\t\t// - If they don't, then this is good to go.\n\t\t\t\t// - If they do, then we need to fetch the normalized move module.\n\t\t\t\tconst needsResolution = transaction.arguments.some(\n\t\t\t\t\t(arg) => arg.kind === 'Input' && !is(inputs[arg.index].value, BuilderCallArg),\n\t\t\t\t);\n\n\t\t\t\tif (needsResolution) {\n\t\t\t\t\tmoveModulesToResolve.push(transaction);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get the matching struct definition for the transaction, and use it to attempt to automatically\n\t\t\t// encode the matching inputs.\n\t\t\tconst transactionType = getTransactionType(transaction);\n\t\t\tif (!transactionType.schema) return;\n\n\t\t\tObject.entries(transaction).forEach(([key, value]) => {\n\t\t\t\tif (key === 'kind') return;\n\t\t\t\tconst keySchema = (transactionType.schema as any)[key];\n\t\t\t\tconst isArray = keySchema.type === 'array';\n\t\t\t\tconst wellKnownEncoding: WellKnownEncoding = isArray\n\t\t\t\t\t? keySchema.schema[TRANSACTION_TYPE]\n\t\t\t\t\t: keySchema[TRANSACTION_TYPE];\n\n\t\t\t\t// This argument has unknown encoding, assume it must be fully-encoded:\n\t\t\t\tif (!wellKnownEncoding) return;\n\n\t\t\t\tconst encodeInput = (index: number) => {\n\t\t\t\t\tconst input = inputs[index];\n\t\t\t\t\tif (!input) {\n\t\t\t\t\t\tthrow new Error(`Missing input ${value.index}`);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Input is fully resolved:\n\t\t\t\t\tif (is(input.value, BuilderCallArg)) return;\n\t\t\t\t\tif (wellKnownEncoding.kind === 'object' && typeof input.value === 'string') {\n\t\t\t\t\t\t// The input is a string that we need to resolve to an object reference:\n\t\t\t\t\t\tobjectsToResolve.push({ id: input.value, input });\n\t\t\t\t\t} else if (wellKnownEncoding.kind === 'pure') {\n\t\t\t\t\t\t// Pure encoding, so construct BCS bytes:\n\t\t\t\t\t\tinput.value = Inputs.Pure(input.value, wellKnownEncoding.type);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Unexpected input format.');\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tif (isArray) {\n\t\t\t\t\tvalue.forEach((arrayItem: TransactionArgument) => {\n\t\t\t\t\t\tif (arrayItem.kind !== 'Input') return;\n\t\t\t\t\t\tencodeInput(arrayItem.index);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tif (value.kind !== 'Input') return;\n\t\t\t\t\tencodeInput(value.index);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tif (moveModulesToResolve.length) {\n\t\t\tawait Promise.all(\n\t\t\t\tmoveModulesToResolve.map(async (moveCall) => {\n\t\t\t\t\tconst [packageId, moduleName, functionName] = moveCall.target.split('::');\n\n\t\t\t\t\tconst normalized = await expectProvider(options).getNormalizedMoveFunction({\n\t\t\t\t\t\tpackage: normalizeSuiObjectId(packageId),\n\t\t\t\t\t\tmodule: moduleName,\n\t\t\t\t\t\tfunction: functionName,\n\t\t\t\t\t});\n\n\t\t\t\t\t// Entry functions can have a mutable reference to an instance of the TxContext\n\t\t\t\t\t// struct defined in the TxContext module as the last parameter. The caller of\n\t\t\t\t\t// the function does not need to pass it in as an argument.\n\t\t\t\t\tconst hasTxContext =\n\t\t\t\t\t\tnormalized.parameters.length > 0 && isTxContext(normalized.parameters.at(-1)!);\n\n\t\t\t\t\tconst params = hasTxContext\n\t\t\t\t\t\t? normalized.parameters.slice(0, normalized.parameters.length - 1)\n\t\t\t\t\t\t: normalized.parameters;\n\n\t\t\t\t\tif (params.length !== moveCall.arguments.length) {\n\t\t\t\t\t\tthrow new Error('Incorrect number of arguments.');\n\t\t\t\t\t}\n\n\t\t\t\t\tparams.forEach((param, i) => {\n\t\t\t\t\t\tconst arg = moveCall.arguments[i];\n\t\t\t\t\t\tif (arg.kind !== 'Input') return;\n\t\t\t\t\t\tconst input = inputs[arg.index];\n\t\t\t\t\t\t// Skip if the input is already resolved\n\t\t\t\t\t\tif (is(input.value, BuilderCallArg)) return;\n\n\t\t\t\t\t\tconst inputValue = input.value;\n\n\t\t\t\t\t\tconst serType = getPureSerializationType(param, inputValue);\n\n\t\t\t\t\t\tif (serType) {\n\t\t\t\t\t\t\tinput.value = Inputs.Pure(inputValue, serType);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst structVal = extractStructTag(param);\n\t\t\t\t\t\tif (structVal != null || (typeof param === 'object' && 'TypeParameter' in param)) {\n\t\t\t\t\t\t\tif (typeof inputValue !== 'string') {\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`Expect the argument to be an object id string, got ${JSON.stringify(\n\t\t\t\t\t\t\t\t\t\tinputValue,\n\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tobjectsToResolve.push({\n\t\t\t\t\t\t\t\tid: inputValue,\n\t\t\t\t\t\t\t\tinput,\n\t\t\t\t\t\t\t\tnormalizedType: param,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t`Unknown call arg type ${JSON.stringify(param, null, 2)} for value ${JSON.stringify(\n\t\t\t\t\t\t\t\tinputValue,\n\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t2,\n\t\t\t\t\t\t\t)}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tif (objectsToResolve.length) {\n\t\t\tconst dedupedIds = [...new Set(objectsToResolve.map(({ id }) => id))];\n\t\t\tconst objectChunks = chunk(dedupedIds, MAX_OBJECTS_PER_FETCH);\n\t\t\tconst objects = (\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tobjectChunks.map((chunk) =>\n\t\t\t\t\t\texpectProvider(options).multiGetObjects({\n\t\t\t\t\t\t\tids: chunk,\n\t\t\t\t\t\t\toptions: { showOwner: true },\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t).flat();\n\n\t\t\tlet objectsById = new Map(\n\t\t\t\tdedupedIds.map((id, index) => {\n\t\t\t\t\treturn [id, objects[index]];\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst invalidObjects = Array.from(objectsById)\n\t\t\t\t.filter(([_, obj]) => obj.error)\n\t\t\t\t.map(([id, _]) => id);\n\t\t\tif (invalidObjects.length) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`The following input objects are not invalid: ${invalidObjects.join(', ')}`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tobjectsToResolve.forEach(({ id, input, normalizedType }) => {\n\t\t\t\tconst object = objectsById.get(id)!;\n\t\t\t\tconst initialSharedVersion = getSharedObjectInitialVersion(object);\n\n\t\t\t\tif (initialSharedVersion) {\n\t\t\t\t\t// There could be multiple transactions that reference the same shared object.\n\t\t\t\t\t// If one of them is a mutable reference, then we should mark the input\n\t\t\t\t\t// as mutable.\n\t\t\t\t\tconst mutable =\n\t\t\t\t\t\tisMutableSharedObjectInput(input.value) ||\n\t\t\t\t\t\t(normalizedType != null && extractMutableReference(normalizedType) != null);\n\n\t\t\t\t\tinput.value = Inputs.SharedObjectRef({\n\t\t\t\t\t\tobjectId: id,\n\t\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\t\tmutable,\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tinput.value = Inputs.ObjectRef(getObjectReference(object)!);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Prepare the transaction by valdiating the transaction data and resolving all inputs\n\t * so that it can be built into bytes.\n\t */\n\tasync #prepare(options: BuildOptions) {\n\t\tif (!options.onlyTransactionKind && !this.#blockData.sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tif (!options.protocolConfig && !options.limits && options.provider) {\n\t\t\toptions.protocolConfig = await options.provider.getProtocolConfig();\n\t\t}\n\n\t\tawait Promise.all([this.#prepareGasPrice(options), this.#prepareTransactions(options)]);\n\n\t\tif (!options.onlyTransactionKind) {\n\t\t\tawait this.#prepareGasPayment(options);\n\n\t\t\tif (!this.#blockData.gasConfig.budget) {\n\t\t\t\tconst dryRunResult = await expectProvider(options).dryRunTransactionBlock({\n\t\t\t\t\ttransactionBlock: this.#blockData.build({\n\t\t\t\t\t\tmaxSizeBytes: this.#getConfig('maxTxSizeBytes', options),\n\t\t\t\t\t\toverrides: {\n\t\t\t\t\t\t\tgasConfig: {\n\t\t\t\t\t\t\t\tbudget: String(this.#getConfig('maxTxGas', options)),\n\t\t\t\t\t\t\t\tpayment: [],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t});\n\t\t\t\tif (dryRunResult.effects.status.status !== 'success') {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Dry run failed, could not automatically determine a budget: ${dryRunResult.effects.status.error}`,\n\t\t\t\t\t\t{ cause: dryRunResult },\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst safeOverhead = GAS_SAFE_OVERHEAD * BigInt(this.blockData.gasConfig.price || 1n);\n\n\t\t\t\tconst baseComputationCostWithOverhead =\n\t\t\t\t\tBigInt(dryRunResult.effects.gasUsed.computationCost) + safeOverhead;\n\n\t\t\t\tconst gasBudget =\n\t\t\t\t\tbaseComputationCostWithOverhead +\n\t\t\t\t\tBigInt(dryRunResult.effects.gasUsed.storageCost) -\n\t\t\t\t\tBigInt(dryRunResult.effects.gasUsed.storageRebate);\n\n\t\t\t\t// Set the budget to max(computation, computation + storage - rebate)\n\t\t\t\tthis.setGasBudget(\n\t\t\t\t\tgasBudget > baseComputationCostWithOverhead ? gasBudget : baseComputationCostWithOverhead,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// Perform final validation on the transaction:\n\t\tthis.#validate(options);\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { BCS, fromB64 } from '@mysten/bcs';\nimport type { Infer, Struct } from 'superstruct';\nimport {\n\tis,\n\tany,\n\tarray,\n\tinteger,\n\tliteral,\n\tobject,\n\toptional,\n\tstring,\n\tunion,\n\tassert,\n\tdefine,\n\tunknown,\n\trecord,\n} from 'superstruct';\nimport { ObjectId, normalizeSuiObjectId } from '../types/common.js';\nimport type { WellKnownEncoding } from './utils.js';\nimport { TRANSACTION_TYPE, create } from './utils.js';\nimport { TypeTagSerializer } from '../signers/txn-data-serializers/type-tag-serializer.js';\n\nconst option = <T extends Struct<any, any>>(some: T) =>\n\tunion([object({ None: union([literal(true), literal(null)]) }), object({ Some: some })]);\n\nexport const TransactionBlockInput = object({\n\tkind: literal('Input'),\n\tindex: integer(),\n\tvalue: optional(any()),\n\ttype: optional(union([literal('pure'), literal('object')])),\n});\nexport type TransactionBlockInput = Infer<typeof TransactionBlockInput>;\n\nconst TransactionArgumentTypes = [\n\tTransactionBlockInput,\n\tobject({ kind: literal('GasCoin') }),\n\tobject({ kind: literal('Result'), index: integer() }),\n\tobject({\n\t\tkind: literal('NestedResult'),\n\t\tindex: integer(),\n\t\tresultIndex: integer(),\n\t}),\n] as const;\n\n// Generic transaction argument\nexport const TransactionArgument = union([...TransactionArgumentTypes]);\nexport type TransactionArgument = Infer<typeof TransactionArgument>;\n\n// Transaction argument referring to an object:\nexport const ObjectTransactionArgument = union([...TransactionArgumentTypes]);\n(ObjectTransactionArgument as any)[TRANSACTION_TYPE] = {\n\tkind: 'object',\n} as WellKnownEncoding;\n\nexport const PureTransactionArgument = (type: string) => {\n\tconst struct = union([...TransactionArgumentTypes]);\n\t(struct as any)[TRANSACTION_TYPE] = {\n\t\tkind: 'pure',\n\t\ttype,\n\t} as WellKnownEncoding;\n\treturn struct;\n};\n\nexport const MoveCallTransaction = object({\n\tkind: literal('MoveCall'),\n\ttarget: define<`${string}::${string}::${string}`>('target', string().validator),\n\ttypeArguments: array(string()),\n\targuments: array(TransactionArgument),\n});\nexport type MoveCallTransaction = Infer<typeof MoveCallTransaction>;\n\nexport const TransferObjectsTransaction = object({\n\tkind: literal('TransferObjects'),\n\tobjects: array(ObjectTransactionArgument),\n\taddress: PureTransactionArgument(BCS.ADDRESS),\n});\nexport type TransferObjectsTransaction = Infer<typeof TransferObjectsTransaction>;\n\nexport const SplitCoinsTransaction = object({\n\tkind: literal('SplitCoins'),\n\tcoin: ObjectTransactionArgument,\n\tamounts: array(PureTransactionArgument('u64')),\n});\nexport type SplitCoinsTransaction = Infer<typeof SplitCoinsTransaction>;\n\nexport const MergeCoinsTransaction = object({\n\tkind: literal('MergeCoins'),\n\tdestination: ObjectTransactionArgument,\n\tsources: array(ObjectTransactionArgument),\n});\nexport type MergeCoinsTransaction = Infer<typeof MergeCoinsTransaction>;\n\nexport const MakeMoveVecTransaction = object({\n\tkind: literal('MakeMoveVec'),\n\t// TODO: ideally we should use `TypeTag` instead of `record()` here,\n\t// but TypeTag is recursively defined and it's tricky to define a\n\t// recursive struct in superstruct\n\ttype: optional(option(record(string(), unknown()))),\n\tobjects: array(ObjectTransactionArgument),\n});\nexport type MakeMoveVecTransaction = Infer<typeof MakeMoveVecTransaction>;\n\nexport const PublishTransaction = object({\n\tkind: literal('Publish'),\n\tmodules: array(array(integer())),\n\tdependencies: array(ObjectId),\n});\nexport type PublishTransaction = Infer<typeof PublishTransaction>;\n\n// Keep in sync with constants in\n// crates/sui-framework/packages/sui-framework/sources/package.move\nexport enum UpgradePolicy {\n\tCOMPATIBLE = 0,\n\tADDITIVE = 128,\n\tDEP_ONLY = 192,\n}\n\nexport const UpgradeTransaction = object({\n\tkind: literal('Upgrade'),\n\tmodules: array(array(integer())),\n\tdependencies: array(ObjectId),\n\tpackageId: ObjectId,\n\tticket: ObjectTransactionArgument,\n});\nexport type UpgradeTransaction = Infer<typeof UpgradeTransaction>;\n\nconst TransactionTypes = [\n\tMoveCallTransaction,\n\tTransferObjectsTransaction,\n\tSplitCoinsTransaction,\n\tMergeCoinsTransaction,\n\tPublishTransaction,\n\tUpgradeTransaction,\n\tMakeMoveVecTransaction,\n] as const;\n\nexport const TransactionType = union([...TransactionTypes]);\nexport type TransactionType = Infer<typeof TransactionType>;\n\nexport function getTransactionType(data: unknown) {\n\tassert(data, TransactionType);\n\treturn TransactionTypes.find((schema) => is(data, schema as Struct))!;\n}\n\n/**\n * Simple helpers used to construct transactions:\n */\nexport const Transactions = {\n\tMoveCall(\n\t\tinput: Omit<MoveCallTransaction, 'kind' | 'arguments' | 'typeArguments'> & {\n\t\t\targuments?: TransactionArgument[];\n\t\t\ttypeArguments?: string[];\n\t\t},\n\t): MoveCallTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'MoveCall',\n\t\t\t\ttarget: input.target,\n\t\t\t\targuments: input.arguments ?? [],\n\t\t\t\ttypeArguments: input.typeArguments ?? [],\n\t\t\t},\n\t\t\tMoveCallTransaction,\n\t\t);\n\t},\n\tTransferObjects(\n\t\tobjects: TransactionArgument[],\n\t\taddress: TransactionArgument,\n\t): TransferObjectsTransaction {\n\t\treturn create({ kind: 'TransferObjects', objects, address }, TransferObjectsTransaction);\n\t},\n\tSplitCoins(coin: TransactionArgument, amounts: TransactionArgument[]): SplitCoinsTransaction {\n\t\treturn create({ kind: 'SplitCoins', coin, amounts }, SplitCoinsTransaction);\n\t},\n\tMergeCoins(\n\t\tdestination: TransactionArgument,\n\t\tsources: TransactionArgument[],\n\t): MergeCoinsTransaction {\n\t\treturn create({ kind: 'MergeCoins', destination, sources }, MergeCoinsTransaction);\n\t},\n\tPublish({\n\t\tmodules,\n\t\tdependencies,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: ObjectId[];\n\t}): PublishTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'Publish',\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? Array.from(fromB64(module)) : module,\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t},\n\t\t\tPublishTransaction,\n\t\t);\n\t},\n\tUpgrade({\n\t\tmodules,\n\t\tdependencies,\n\t\tpackageId,\n\t\tticket,\n\t}: {\n\t\tmodules: number[][] | string[];\n\t\tdependencies: ObjectId[];\n\t\tpackageId: ObjectId;\n\t\tticket: TransactionArgument;\n\t}): UpgradeTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'Upgrade',\n\t\t\t\tmodules: modules.map((module) =>\n\t\t\t\t\ttypeof module === 'string' ? Array.from(fromB64(module)) : module,\n\t\t\t\t),\n\t\t\t\tdependencies: dependencies.map((dep) => normalizeSuiObjectId(dep)),\n\t\t\t\tpackageId,\n\t\t\t\tticket,\n\t\t\t},\n\t\t\tUpgradeTransaction,\n\t\t);\n\t},\n\tMakeMoveVec({\n\t\ttype,\n\t\tobjects,\n\t}: Omit<MakeMoveVecTransaction, 'kind' | 'type'> & {\n\t\ttype?: string;\n\t}): MakeMoveVecTransaction {\n\t\treturn create(\n\t\t\t{\n\t\t\t\tkind: 'MakeMoveVec',\n\t\t\t\ttype: type ? { Some: TypeTagSerializer.parseFromStr(type) } : { None: null },\n\t\t\t\tobjects,\n\t\t\t},\n\t\t\tMakeMoveVecTransaction,\n\t\t);\n\t},\n};\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Struct } from 'superstruct';\nimport { create as superstructCreate } from 'superstruct';\n\nexport function create<T, S>(value: T, struct: Struct<T, S>): T {\n\treturn superstructCreate(value, struct);\n}\n\nexport type WellKnownEncoding =\n\t| {\n\t\t\tkind: 'object';\n\t  }\n\t| {\n\t\t\tkind: 'pure';\n\t\t\ttype: string;\n\t  };\n\nexport const TRANSACTION_TYPE = Symbol('transaction-argument-type');\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { Infer } from 'superstruct';\nimport { array, boolean, integer, object, string, union } from 'superstruct';\nimport type { ObjectId, SharedObjectRef } from '../types/index.js';\nimport { normalizeSuiAddress, SuiObjectRef } from '../types/index.js';\nimport { builder } from './bcs.js';\n\nconst ObjectArg = union([\n\tobject({ ImmOrOwned: SuiObjectRef }),\n\tobject({\n\t\tShared: object({\n\t\t\tobjectId: string(),\n\t\t\tinitialSharedVersion: union([integer(), string()]),\n\t\t\tmutable: boolean(),\n\t\t}),\n\t}),\n]);\n\nexport const PureCallArg = object({ Pure: array(integer()) });\nexport const ObjectCallArg = object({ Object: ObjectArg });\nexport type PureCallArg = Infer<typeof PureCallArg>;\nexport type ObjectCallArg = Infer<typeof ObjectCallArg>;\n\nexport const BuilderCallArg = union([PureCallArg, ObjectCallArg]);\nexport type BuilderCallArg = Infer<typeof BuilderCallArg>;\n\nexport const Inputs = {\n\tPure(data: unknown, type?: string): PureCallArg {\n\t\treturn {\n\t\t\tPure: Array.from(\n\t\t\t\tdata instanceof Uint8Array\n\t\t\t\t\t? data\n\t\t\t\t\t: // NOTE: We explicitly set this to be growable to infinity, because we have maxSize validation at the builder-level:\n\t\t\t\t\t  builder.ser(type!, data, { maxSize: Infinity }).toBytes(),\n\t\t\t),\n\t\t};\n\t},\n\tObjectRef({ objectId, digest, version }: SuiObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tImmOrOwned: {\n\t\t\t\t\tdigest,\n\t\t\t\t\tversion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n\tSharedObjectRef({ objectId, mutable, initialSharedVersion }: SharedObjectRef): ObjectCallArg {\n\t\treturn {\n\t\t\tObject: {\n\t\t\t\tShared: {\n\t\t\t\t\tmutable,\n\t\t\t\t\tinitialSharedVersion,\n\t\t\t\t\tobjectId: normalizeSuiAddress(objectId),\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t},\n};\n\nexport function getIdFromCallArg(arg: ObjectId | ObjectCallArg) {\n\tif (typeof arg === 'string') {\n\t\treturn normalizeSuiAddress(arg);\n\t}\n\tif ('ImmOrOwned' in arg.Object) {\n\t\treturn normalizeSuiAddress(arg.Object.ImmOrOwned.objectId);\n\t}\n\treturn normalizeSuiAddress(arg.Object.Shared.objectId);\n}\n\nexport function getSharedObjectInput(arg: BuilderCallArg): SharedObjectRef | undefined {\n\treturn typeof arg === 'object' && 'Object' in arg && 'Shared' in arg.Object\n\t\t? arg.Object.Shared\n\t\t: undefined;\n}\n\nexport function isSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn !!getSharedObjectInput(arg);\n}\n\nexport function isMutableSharedObjectInput(arg: BuilderCallArg): boolean {\n\treturn getSharedObjectInput(arg)?.mutable ?? false;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { SuiJsonValue, SuiMoveNormalizedType } from '../types/index.js';\nimport {\n\textractStructTag,\n\tID_STRUCT_NAME,\n\tisValidSuiAddress,\n\tMOVE_STDLIB_ADDRESS,\n\tOBJECT_MODULE_NAME,\n\tSUI_FRAMEWORK_ADDRESS,\n} from '../types/index.js';\n\nconst STD_ASCII_MODULE_NAME = 'ascii';\nconst STD_ASCII_STRUCT_NAME = 'String';\n\nconst STD_UTF8_MODULE_NAME = 'string';\nconst STD_UTF8_STRUCT_NAME = 'String';\n\nconst STD_OPTION_MODULE_NAME = 'option';\nconst STD_OPTION_STRUCT_NAME = 'Option';\n\nconst RESOLVED_SUI_ID = {\n\taddress: SUI_FRAMEWORK_ADDRESS,\n\tmodule: OBJECT_MODULE_NAME,\n\tname: ID_STRUCT_NAME,\n};\nconst RESOLVED_ASCII_STR = {\n\taddress: MOVE_STDLIB_ADDRESS,\n\tmodule: STD_ASCII_MODULE_NAME,\n\tname: STD_ASCII_STRUCT_NAME,\n};\nconst RESOLVED_UTF8_STR = {\n\taddress: MOVE_STDLIB_ADDRESS,\n\tmodule: STD_UTF8_MODULE_NAME,\n\tname: STD_UTF8_STRUCT_NAME,\n};\n\nconst RESOLVED_STD_OPTION = {\n\taddress: MOVE_STDLIB_ADDRESS,\n\tmodule: STD_OPTION_MODULE_NAME,\n\tname: STD_OPTION_STRUCT_NAME,\n};\n\nconst isSameStruct = (a: any, b: any) =>\n\ta.address === b.address && a.module === b.module && a.name === b.name;\n\nexport function isTxContext(param: SuiMoveNormalizedType): boolean {\n\tconst struct = extractStructTag(param)?.Struct;\n\treturn (\n\t\tstruct?.address === '0x2' && struct?.module === 'tx_context' && struct?.name === 'TxContext'\n\t);\n}\n\nfunction expectType(typeName: string, argVal?: SuiJsonValue) {\n\tif (typeof argVal === 'undefined') {\n\t\treturn;\n\t}\n\tif (typeof argVal !== typeName) {\n\t\tthrow new Error(`Expect ${argVal} to be ${typeName}, received ${typeof argVal}`);\n\t}\n}\n\nconst allowedTypes = ['Address', 'Bool', 'U8', 'U16', 'U32', 'U64', 'U128', 'U256'];\n\nexport function getPureSerializationType(\n\tnormalizedType: SuiMoveNormalizedType,\n\targVal: SuiJsonValue | undefined,\n): string | undefined {\n\tif (typeof normalizedType === 'string' && allowedTypes.includes(normalizedType)) {\n\t\tif (normalizedType in ['U8', 'U16', 'U32', 'U64', 'U128', 'U256']) {\n\t\t\texpectType('number', argVal);\n\t\t} else if (normalizedType === 'Bool') {\n\t\t\texpectType('boolean', argVal);\n\t\t} else if (normalizedType === 'Address') {\n\t\t\texpectType('string', argVal);\n\t\t\tif (argVal && !isValidSuiAddress(argVal as string)) {\n\t\t\t\tthrow new Error('Invalid Sui Address');\n\t\t\t}\n\t\t}\n\t\treturn normalizedType.toLowerCase();\n\t} else if (typeof normalizedType === 'string') {\n\t\tthrow new Error(`Unknown pure normalized type ${JSON.stringify(normalizedType, null, 2)}`);\n\t}\n\n\tif ('Vector' in normalizedType) {\n\t\tif ((argVal === undefined || typeof argVal === 'string') && normalizedType.Vector === 'U8') {\n\t\t\treturn 'string';\n\t\t}\n\n\t\tif (argVal !== undefined && !Array.isArray(argVal)) {\n\t\t\tthrow new Error(`Expect ${argVal} to be a array, received ${typeof argVal}`);\n\t\t}\n\n\t\tconst innerType = getPureSerializationType(\n\t\t\tnormalizedType.Vector,\n\t\t\t// undefined when argVal is empty\n\t\t\targVal ? argVal[0] : undefined,\n\t\t);\n\n\t\tif (innerType === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn `vector<${innerType}>`;\n\t}\n\n\tif ('Struct' in normalizedType) {\n\t\tif (isSameStruct(normalizedType.Struct, RESOLVED_ASCII_STR)) {\n\t\t\treturn 'string';\n\t\t} else if (isSameStruct(normalizedType.Struct, RESOLVED_UTF8_STR)) {\n\t\t\treturn 'utf8string';\n\t\t} else if (isSameStruct(normalizedType.Struct, RESOLVED_SUI_ID)) {\n\t\t\treturn 'address';\n\t\t} else if (isSameStruct(normalizedType.Struct, RESOLVED_STD_OPTION)) {\n\t\t\tconst optionToVec: SuiMoveNormalizedType = {\n\t\t\t\tVector: normalizedType.Struct.typeArguments[0],\n\t\t\t};\n\t\t\treturn getPureSerializationType(optionToVec, argVal);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { toB58 } from '@mysten/bcs';\nimport type { Infer } from 'superstruct';\nimport {\n\tarray,\n\tassert,\n\tdefine,\n\tinteger,\n\tis,\n\tliteral,\n\tnullable,\n\tobject,\n\toptional,\n\tstring,\n\tunion,\n} from 'superstruct';\nimport { hashTypedData } from '../cryptography/hash.js';\nimport { normalizeSuiAddress, SuiObjectRef } from '../types/index.js';\nimport { builder } from './bcs.js';\nimport { TransactionType, TransactionBlockInput } from './Transactions.js';\nimport { BuilderCallArg, PureCallArg } from './Inputs.js';\nimport { create } from './utils.js';\n\nexport const TransactionExpiration = optional(\n\tnullable(\n\t\tunion([object({ Epoch: integer() }), object({ None: union([literal(true), literal(null)]) })]),\n\t),\n);\nexport type TransactionExpiration = Infer<typeof TransactionExpiration>;\n\nconst SuiAddress = string();\n\nconst StringEncodedBigint = define<string>('StringEncodedBigint', (val) => {\n\tif (!['string', 'number', 'bigint'].includes(typeof val)) return false;\n\n\ttry {\n\t\tBigInt(val as string);\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n});\n\nconst GasConfig = object({\n\tbudget: optional(StringEncodedBigint),\n\tprice: optional(StringEncodedBigint),\n\tpayment: optional(array(SuiObjectRef)),\n\towner: optional(SuiAddress),\n});\ntype GasConfig = Infer<typeof GasConfig>;\n\nexport const SerializedTransactionDataBuilder = object({\n\tversion: literal(1),\n\tsender: optional(SuiAddress),\n\texpiration: TransactionExpiration,\n\tgasConfig: GasConfig,\n\tinputs: array(TransactionBlockInput),\n\ttransactions: array(TransactionType),\n});\nexport type SerializedTransactionDataBuilder = Infer<typeof SerializedTransactionDataBuilder>;\n\nfunction prepareSuiAddress(address: string) {\n\treturn normalizeSuiAddress(address).replace('0x', '');\n}\n\nexport class TransactionBlockDataBuilder {\n\tstatic fromKindBytes(bytes: Uint8Array) {\n\t\tconst kind = builder.de('TransactionKind', bytes);\n\t\tconst programmableTx = kind?.ProgrammableTransaction;\n\t\tif (!programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\tconst serialized = create(\n\t\t\t{\n\t\t\t\tversion: 1,\n\t\t\t\tgasConfig: {},\n\t\t\t\tinputs: programmableTx.inputs.map((value: unknown, index: number) =>\n\t\t\t\t\tcreate(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: 'Input',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\ttype: is(value, PureCallArg) ? 'pure' : 'object',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTransactionBlockInput,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\ttransactions: programmableTx.transactions,\n\t\t\t},\n\t\t\tSerializedTransactionDataBuilder,\n\t\t);\n\n\t\treturn TransactionBlockDataBuilder.restore(serialized);\n\t}\n\n\tstatic fromBytes(bytes: Uint8Array) {\n\t\tconst rawData = builder.de('TransactionData', bytes);\n\t\tconst data = rawData?.V1;\n\t\tconst programmableTx = data?.kind?.ProgrammableTransaction;\n\t\tif (!data || !programmableTx) {\n\t\t\tthrow new Error('Unable to deserialize from bytes.');\n\t\t}\n\n\t\tconst serialized = create(\n\t\t\t{\n\t\t\t\tversion: 1,\n\t\t\t\tsender: data.sender,\n\t\t\t\texpiration: data.expiration,\n\t\t\t\tgasConfig: data.gasData,\n\t\t\t\tinputs: programmableTx.inputs.map((value: unknown, index: number) =>\n\t\t\t\t\tcreate(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkind: 'Input',\n\t\t\t\t\t\t\tvalue,\n\t\t\t\t\t\t\tindex,\n\t\t\t\t\t\t\ttype: is(value, PureCallArg) ? 'pure' : 'object',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tTransactionBlockInput,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\ttransactions: programmableTx.transactions,\n\t\t\t},\n\t\t\tSerializedTransactionDataBuilder,\n\t\t);\n\n\t\treturn TransactionBlockDataBuilder.restore(serialized);\n\t}\n\n\tstatic restore(data: SerializedTransactionDataBuilder) {\n\t\tassert(data, SerializedTransactionDataBuilder);\n\t\tconst transactionData = new TransactionBlockDataBuilder();\n\t\tObject.assign(transactionData, data);\n\t\treturn transactionData;\n\t}\n\n\t/**\n\t * Generate transaction digest.\n\t *\n\t * @param bytes BCS serialized transaction data\n\t * @returns transaction digest.\n\t */\n\tstatic getDigestFromBytes(bytes: Uint8Array) {\n\t\tconst hash = hashTypedData('TransactionData', bytes);\n\t\treturn toB58(hash);\n\t}\n\n\tversion = 1 as const;\n\tsender?: string;\n\texpiration?: TransactionExpiration;\n\tgasConfig: GasConfig;\n\tinputs: TransactionBlockInput[];\n\ttransactions: TransactionType[];\n\n\tconstructor(clone?: SerializedTransactionDataBuilder) {\n\t\tthis.sender = clone?.sender;\n\t\tthis.expiration = clone?.expiration;\n\t\tthis.gasConfig = clone?.gasConfig ?? {};\n\t\tthis.inputs = clone?.inputs ?? [];\n\t\tthis.transactions = clone?.transactions ?? [];\n\t}\n\n\tbuild({\n\t\tmaxSizeBytes = Infinity,\n\t\toverrides,\n\t\tonlyTransactionKind,\n\t}: {\n\t\tmaxSizeBytes?: number;\n\t\toverrides?: Pick<Partial<TransactionBlockDataBuilder>, 'sender' | 'gasConfig' | 'expiration'>;\n\t\tonlyTransactionKind?: boolean;\n\t} = {}) {\n\t\t// Resolve inputs down to values:\n\t\tconst inputs = this.inputs.map((input) => {\n\t\t\tassert(input.value, BuilderCallArg);\n\t\t\treturn input.value;\n\t\t});\n\n\t\tconst kind = {\n\t\t\tProgrammableTransaction: {\n\t\t\t\tinputs,\n\t\t\t\ttransactions: this.transactions,\n\t\t\t},\n\t\t};\n\n\t\tif (onlyTransactionKind) {\n\t\t\treturn builder.ser('TransactionKind', kind, { maxSize: maxSizeBytes }).toBytes();\n\t\t}\n\n\t\tconst expiration = overrides?.expiration ?? this.expiration;\n\t\tconst sender = overrides?.sender ?? this.sender;\n\t\tconst gasConfig = { ...this.gasConfig, ...overrides?.gasConfig };\n\n\t\tif (!sender) {\n\t\t\tthrow new Error('Missing transaction sender');\n\t\t}\n\n\t\tif (!gasConfig.budget) {\n\t\t\tthrow new Error('Missing gas budget');\n\t\t}\n\n\t\tif (!gasConfig.payment) {\n\t\t\tthrow new Error('Missing gas payment');\n\t\t}\n\n\t\tif (!gasConfig.price) {\n\t\t\tthrow new Error('Missing gas price');\n\t\t}\n\n\t\tconst transactionData = {\n\t\t\tsender: prepareSuiAddress(sender),\n\t\t\texpiration: expiration ? expiration : { None: true },\n\t\t\tgasData: {\n\t\t\t\tpayment: gasConfig.payment,\n\t\t\t\towner: prepareSuiAddress(this.gasConfig.owner ?? sender),\n\t\t\t\tprice: BigInt(gasConfig.price),\n\t\t\t\tbudget: BigInt(gasConfig.budget),\n\t\t\t},\n\t\t\tkind: {\n\t\t\t\tProgrammableTransaction: {\n\t\t\t\t\tinputs,\n\t\t\t\t\ttransactions: this.transactions,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn builder\n\t\t\t.ser('TransactionData', { V1: transactionData }, { maxSize: maxSizeBytes })\n\t\t\t.toBytes();\n\t}\n\n\tgetDigest() {\n\t\tconst bytes = this.build({ onlyTransactionKind: false });\n\t\treturn TransactionBlockDataBuilder.getDigestFromBytes(bytes);\n\t}\n\n\tsnapshot(): SerializedTransactionDataBuilder {\n\t\treturn create(this, SerializedTransactionDataBuilder);\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\n\n/**\n * Generates a Blake2b hash of typed data as a base64 string.\n *\n * @param typeTag type tag (e.g. TransactionData, SenderSignedData)\n * @param data data to hash\n */\nexport function hashTypedData(typeTag: string, data: Uint8Array): Uint8Array {\n\tconst typeTagBytes = Array.from(`${typeTag}::`).map((e) => e.charCodeAt(0));\n\n\tconst dataWithTag = new Uint8Array(typeTagBytes.length + data.length);\n\tdataWithTag.set(typeTagBytes);\n\tdataWithTag.set(data, typeTagBytes.length);\n\n\treturn blake2b(dataWithTag, { dkLen: 32 });\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { number, object, string } from 'superstruct';\n\nexport const NetworkMetrics = object({\n\tcurrentTps: number(),\n\ttps30Days: number(),\n\tcurrentCheckpoint: string(),\n\tcurrentEpoch: string(),\n\ttotalAddresses: string(),\n\ttotalObjects: string(),\n\ttotalPackages: string(),\n});\n\nexport const AddressMetrics = object({\n\tcheckpoint: number(),\n\tepoch: number(),\n\ttimestampMs: number(),\n\tcumulativeAddresses: number(),\n\tcumulativeActiveAddresses: number(),\n\tdailyActiveAddresses: number(),\n});\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { blake2b } from '@noble/hashes/blake2b';\nimport type { Keypair } from '../cryptography/keypair.js';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport type { SuiAddress } from '../types/index.js';\nimport { SignerWithProvider } from './signer-with-provider.js';\nimport { toSerializedSignature } from '../cryptography/utils.js';\n\nexport class RawSigner extends SignerWithProvider {\n\tprivate readonly keypair: Keypair;\n\n\tconstructor(keypair: Keypair, provider: JsonRpcProvider) {\n\t\tsuper(provider);\n\t\tthis.keypair = keypair;\n\t}\n\n\tasync getAddress(): Promise<SuiAddress> {\n\t\treturn this.keypair.getPublicKey().toSuiAddress();\n\t}\n\n\tasync signData(data: Uint8Array): Promise<SerializedSignature> {\n\t\tconst pubkey = this.keypair.getPublicKey();\n\t\tconst digest = blake2b(data, { dkLen: 32 });\n\t\tconst signature = this.keypair.signData(digest);\n\t\tconst signatureScheme = this.keypair.getKeyScheme();\n\n\t\treturn toSerializedSignature({\n\t\t\tsignatureScheme,\n\t\t\tsignature,\n\t\t\tpubKey: pubkey,\n\t\t});\n\t}\n\n\tconnect(provider: JsonRpcProvider): SignerWithProvider {\n\t\treturn new RawSigner(this.keypair, provider);\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64, toB64 } from '@mysten/bcs';\nimport { TransactionBlock } from '../builder/index.js';\nimport { TransactionBlockDataBuilder } from '../builder/TransactionBlockData.js';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport type { HttpHeaders } from '../rpc/client.js';\nimport type {\n\tExecuteTransactionRequestType,\n\tFaucetResponse,\n\tSuiAddress,\n\tDevInspectResults,\n\tDryRunTransactionBlockResponse,\n\tSuiTransactionBlockResponse,\n\tSuiTransactionBlockResponseOptions,\n} from '../types/index.js';\nimport { getTotalGasUsedUpperBound } from '../types/index.js';\nimport { IntentScope, messageWithIntent } from '../utils/intent.js';\nimport type { Signer } from './signer.js';\nimport type { SignedTransaction, SignedMessage } from './types.js';\n\n///////////////////////////////\n// Exported Abstracts\nexport abstract class SignerWithProvider implements Signer {\n\treadonly provider: JsonRpcProvider;\n\n\t///////////////////\n\t// Sub-classes MUST implement these\n\n\t// Returns the checksum address\n\tabstract getAddress(): Promise<SuiAddress>;\n\n\t/**\n\t * Returns the signature for the data and the public key of the signer\n\t */\n\tabstract signData(data: Uint8Array): Promise<SerializedSignature>;\n\n\t// Returns a new instance of the Signer, connected to provider.\n\t// This MAY throw if changing providers is not supported.\n\tabstract connect(provider: JsonRpcProvider): SignerWithProvider;\n\n\t///////////////////\n\t// Sub-classes MAY override these\n\n\t/**\n\t * Request gas tokens from a faucet server and send to the signer\n\t * address\n\t * @param httpHeaders optional request headers\n\t */\n\tasync requestSuiFromFaucet(httpHeaders?: HttpHeaders): Promise<FaucetResponse> {\n\t\treturn this.provider.requestSuiFromFaucet(await this.getAddress(), httpHeaders);\n\t}\n\n\tconstructor(provider: JsonRpcProvider) {\n\t\tthis.provider = provider;\n\t}\n\n\t/**\n\t * Sign a message using the keypair, with the `PersonalMessage` intent.\n\t */\n\tasync signMessage(input: { message: Uint8Array }): Promise<SignedMessage> {\n\t\tconst signature = await this.signData(\n\t\t\tmessageWithIntent(IntentScope.PersonalMessage, input.message),\n\t\t);\n\n\t\treturn {\n\t\t\tmessageBytes: toB64(input.message),\n\t\t\tsignature,\n\t\t};\n\t}\n\n\tprotected async prepareTransactionBlock(transactionBlock: Uint8Array | TransactionBlock) {\n\t\tif (TransactionBlock.is(transactionBlock)) {\n\t\t\t// If the sender has not yet been set on the transaction, then set it.\n\t\t\t// NOTE: This allows for signing transactions with mis-matched senders, which is important for sponsored transactions.\n\t\t\ttransactionBlock.setSenderIfNotSet(await this.getAddress());\n\t\t\treturn await transactionBlock.build({\n\t\t\t\tprovider: this.provider,\n\t\t\t});\n\t\t}\n\t\tif (transactionBlock instanceof Uint8Array) {\n\t\t\treturn transactionBlock;\n\t\t}\n\t\tthrow new Error('Unknown transaction format');\n\t}\n\n\t/**\n\t * Sign a transaction.\n\t */\n\tasync signTransactionBlock(input: {\n\t\ttransactionBlock: Uint8Array | TransactionBlock;\n\t}): Promise<SignedTransaction> {\n\t\tconst transactionBlockBytes = await this.prepareTransactionBlock(input.transactionBlock);\n\n\t\tconst intentMessage = messageWithIntent(IntentScope.TransactionData, transactionBlockBytes);\n\t\tconst signature = await this.signData(intentMessage);\n\n\t\treturn {\n\t\t\ttransactionBlockBytes: toB64(transactionBlockBytes),\n\t\t\tsignature,\n\t\t};\n\t}\n\n\t/**\n\t * Sign a transaction block and submit to the Fullnode for execution.\n\t *\n\t * @param options specify which fields to return (e.g., transaction, effects, events, etc).\n\t * By default, only the transaction digest will be returned.\n\t * @param requestType WaitForEffectsCert or WaitForLocalExecution, see details in `ExecuteTransactionRequestType`.\n\t * Defaults to `WaitForLocalExecution` if options.show_effects or options.show_events is true\n\t */\n\tasync signAndExecuteTransactionBlock(input: {\n\t\ttransactionBlock: Uint8Array | TransactionBlock;\n\t\t/** specify which fields to return (e.g., transaction, effects, events, etc). By default, only the transaction digest will be returned. */\n\t\toptions?: SuiTransactionBlockResponseOptions;\n\t\t/** `WaitForEffectsCert` or `WaitForLocalExecution`, see details in `ExecuteTransactionRequestType`.\n\t\t * Defaults to `WaitForLocalExecution` if options.show_effects or options.show_events is true\n\t\t */\n\t\trequestType?: ExecuteTransactionRequestType;\n\t}): Promise<SuiTransactionBlockResponse> {\n\t\tconst { transactionBlockBytes, signature } = await this.signTransactionBlock({\n\t\t\ttransactionBlock: input.transactionBlock,\n\t\t});\n\n\t\treturn await this.provider.executeTransactionBlock({\n\t\t\ttransactionBlock: transactionBlockBytes,\n\t\t\tsignature,\n\t\t\toptions: input.options,\n\t\t\trequestType: input.requestType,\n\t\t});\n\t}\n\n\t/**\n\t * Derive transaction digest from\n\t * @param tx BCS serialized transaction data or a `Transaction` object\n\t * @returns transaction digest\n\t */\n\tasync getTransactionBlockDigest(tx: Uint8Array | TransactionBlock): Promise<string> {\n\t\tif (TransactionBlock.is(tx)) {\n\t\t\ttx.setSenderIfNotSet(await this.getAddress());\n\t\t\treturn tx.getDigest({ provider: this.provider });\n\t\t} else if (tx instanceof Uint8Array) {\n\t\t\treturn TransactionBlockDataBuilder.getDigestFromBytes(tx);\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction format.');\n\t\t}\n\t}\n\n\t/**\n\t * Runs the transaction in dev-inpsect mode. Which allows for nearly any\n\t * transaction (or Move call) with any arguments. Detailed results are\n\t * provided, including both the transaction effects and any return values.\n\t */\n\tasync devInspectTransactionBlock(\n\t\tinput: Omit<Parameters<JsonRpcProvider['devInspectTransactionBlock']>[0], 'sender'>,\n\t): Promise<DevInspectResults> {\n\t\tconst address = await this.getAddress();\n\t\treturn this.provider.devInspectTransactionBlock({\n\t\t\tsender: address,\n\t\t\t...input,\n\t\t});\n\t}\n\n\t/**\n\t * Dry run a transaction and return the result.\n\t */\n\tasync dryRunTransactionBlock(input: {\n\t\ttransactionBlock: TransactionBlock | string | Uint8Array;\n\t}): Promise<DryRunTransactionBlockResponse> {\n\t\tlet dryRunTxBytes: Uint8Array;\n\t\tif (TransactionBlock.is(input.transactionBlock)) {\n\t\t\tinput.transactionBlock.setSenderIfNotSet(await this.getAddress());\n\t\t\tdryRunTxBytes = await input.transactionBlock.build({\n\t\t\t\tprovider: this.provider,\n\t\t\t});\n\t\t} else if (typeof input.transactionBlock === 'string') {\n\t\t\tdryRunTxBytes = fromB64(input.transactionBlock);\n\t\t} else if (input.transactionBlock instanceof Uint8Array) {\n\t\t\tdryRunTxBytes = input.transactionBlock;\n\t\t} else {\n\t\t\tthrow new Error('Unknown transaction format');\n\t\t}\n\n\t\treturn this.provider.dryRunTransactionBlock({\n\t\t\ttransactionBlock: dryRunTxBytes,\n\t\t});\n\t}\n\n\t/**\n\t * Returns the estimated gas cost for the transaction\n\t * @param tx The transaction to estimate the gas cost. When string it is assumed it's a serialized tx in base64\n\t * @returns total gas cost estimation\n\t * @throws whens fails to estimate the gas cost\n\t */\n\tasync getGasCostEstimation(...args: Parameters<SignerWithProvider['dryRunTransactionBlock']>) {\n\t\tconst txEffects = await this.dryRunTransactionBlock(...args);\n\t\tconst gasEstimation = getTotalGasUsedUpperBound(txEffects.effects);\n\t\tif (typeof gasEstimation === 'undefined') {\n\t\t\tthrow new Error('Failed to estimate the gas cost from transaction');\n\t\t}\n\t\treturn gasEstimation;\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\n// See: sui/crates/sui-types/src/intent.rs\nexport enum AppId {\n\tSui = 0,\n}\n\nexport enum IntentVersion {\n\tV0 = 0,\n}\n\nexport enum IntentScope {\n\tTransactionData = 0,\n\tTransactionEffects = 1,\n\tCheckpointSummary = 2,\n\tPersonalMessage = 3,\n}\n\nexport type Intent = [IntentScope, IntentVersion, AppId];\n\nfunction intentWithScope(scope: IntentScope): Intent {\n\treturn [scope, IntentVersion.V0, AppId.Sui];\n}\n\nexport function messageWithIntent(scope: IntentScope, message: Uint8Array) {\n\tconst intent = intentWithScope(scope);\n\tconst intentMessage = new Uint8Array(intent.length + message.length);\n\tintentMessage.set(intent);\n\tintentMessage.set(message, intent.length);\n\treturn intentMessage;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nconst ELLIPSIS = '\\u{2026}';\n\nexport function formatAddress(address: string) {\n\tif (address.length <= 6) {\n\t\treturn address;\n\t}\n\n\tconst offset = address.startsWith('0x') ? 2 : 0;\n\n\treturn `0x${address.slice(offset, offset + 4)}${ELLIPSIS}${address.slice(-4)}`;\n}\n\nexport function formatDigest(digest: string) {\n\t// Use 10 first characters\n\treturn `${digest.slice(0, 10)}${ELLIPSIS}`;\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { fromB64 } from '@mysten/bcs';\nimport nacl from 'tweetnacl';\nimport type { IntentScope } from './intent.js';\nimport { messageWithIntent } from './intent.js';\nimport { secp256k1 } from '@noble/curves/secp256k1';\nimport { sha256 } from '@noble/hashes/sha256';\nimport type { SerializedSignature } from '../cryptography/signature.js';\nimport { blake2b } from '@noble/hashes/blake2b';\nimport { toSingleSignaturePubkeyPair } from '../cryptography/utils.js';\n\n// TODO: This might actually make sense to eventually move to the `Keypair` instances themselves, as\n// it could allow the Sui.js to be tree-shaken a little better, possibly allowing keypairs that are\n// not used (and their deps) to be entirely removed from the bundle.\n\n/** Verify data that is signed with the expected scope. */\nexport async function verifyMessage(\n\tmessage: Uint8Array | string,\n\tserializedSignature: SerializedSignature,\n\tscope: IntentScope,\n) {\n\tconst signature = toSingleSignaturePubkeyPair(serializedSignature);\n\tconst messageBytes = messageWithIntent(\n\t\tscope,\n\t\ttypeof message === 'string' ? fromB64(message) : message,\n\t);\n\tconst digest = blake2b(messageBytes, { dkLen: 32 });\n\tswitch (signature.signatureScheme) {\n\t\tcase 'ED25519':\n\t\t\treturn nacl.sign.detached.verify(digest, signature.signature, signature.pubKey.toBytes());\n\t\tcase 'Secp256k1':\n\t\t\treturn secp256k1.verify(\n\t\t\t\tsecp256k1.Signature.fromCompact(signature.signature),\n\t\t\t\tsha256(digest),\n\t\t\t\tsignature.pubKey.toBytes(),\n\t\t\t);\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown signature scheme: \"${signature.signatureScheme}\"`);\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TransactionBlock } from '../builder/index.js';\nimport type { JsonRpcProvider } from '../providers/json-rpc-provider.js';\nimport type { ObjectId, SuiAddress } from '../types/index.js';\nimport { getObjectReference, normalizeSuiObjectId, SUI_SYSTEM_ADDRESS } from '../types/index.js';\n\n/**\n * Address of the Sui System object.\n * Always the same in every Sui network (local, devnet, testnet).\n */\nexport const SUI_SYSTEM_STATE_OBJECT_ID: string = normalizeSuiObjectId('0x5');\n\nexport const SUI_SYSTEM_MODULE_NAME = 'sui_system';\nexport const ADD_STAKE_FUN_NAME = 'request_add_stake';\nexport const ADD_STAKE_LOCKED_COIN_FUN_NAME = 'request_add_stake_with_locked_coin';\nexport const WITHDRAW_STAKE_FUN_NAME = 'request_withdraw_stake';\n\n/**\n * Utility class for `0x5` object\n */\nexport class SuiSystemStateUtil {\n\t/**\n\t * Create a new transaction for staking coins ready to be signed and executed with `signer-and-provider`.\n\t *\n\t * @param coins the coins to be staked\n\t * @param amount the amount to stake\n\t * @param gasBudget omittable only for DevInspect mode\n\t */\n\tpublic static async newRequestAddStakeTxn(\n\t\tprovider: JsonRpcProvider,\n\t\tcoins: ObjectId[],\n\t\tamount: bigint,\n\t\tvalidatorAddress: SuiAddress,\n\t): Promise<TransactionBlock> {\n\t\t// TODO: validate coin types and handle locked coins\n\t\tconst tx = new TransactionBlock();\n\n\t\tconst coin = tx.splitCoins(tx.gas, [tx.pure(amount)]);\n\t\ttx.moveCall({\n\t\t\ttarget: `${SUI_SYSTEM_ADDRESS}::${SUI_SYSTEM_MODULE_NAME}::${ADD_STAKE_FUN_NAME}`,\n\t\t\targuments: [tx.object(SUI_SYSTEM_STATE_OBJECT_ID), coin, tx.pure(validatorAddress)],\n\t\t});\n\t\tconst coinObjects = await provider.multiGetObjects({\n\t\t\tids: coins,\n\t\t\toptions: {\n\t\t\t\tshowOwner: true,\n\t\t\t},\n\t\t});\n\t\ttx.setGasPayment(coinObjects.map((obj) => getObjectReference(obj)!));\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Create a new transaction for withdrawing coins ready to be signed and\n\t * executed with `signer-and-provider`.\n\t *\n\t * @param stake the stake object created in the requestAddStake txn\n\t * @param stakedCoinId the coins to withdraw\n\t * @param gasBudget omittable only for DevInspect mode\n\t */\n\tpublic static async newRequestWithdrawlStakeTxn(\n\t\tstake: ObjectId,\n\t\tstakedCoinId: ObjectId,\n\t): Promise<TransactionBlock> {\n\t\tconst tx = new TransactionBlock();\n\t\ttx.moveCall({\n\t\t\ttarget: `${SUI_SYSTEM_ADDRESS}::${SUI_SYSTEM_MODULE_NAME}::${WITHDRAW_STAKE_FUN_NAME}`,\n\t\t\targuments: [tx.object(SUI_SYSTEM_STATE_OBJECT_ID), tx.object(stake), tx.object(stakedCoinId)],\n\t\t});\n\n\t\treturn tx;\n\t}\n}\n","// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\nexport * from './keypairs/ed25519/index.js';\nexport * from './keypairs/secp256k1/index.js';\nexport * from './keypairs/secp256r1/index.js';\nexport * from './cryptography/keypair.js';\nexport * from './cryptography/multisig.js';\nexport * from './cryptography/publickey.js';\nexport * from './cryptography/mnemonics.js';\nexport * from './cryptography/signature.js';\nexport * from './cryptography/utils.js';\n\nexport * from './providers/json-rpc-provider.js';\n\nexport * from './rpc/client.js';\nexport * from './rpc/faucet-client.js';\nexport * from './rpc/websocket-client.js';\nexport * from './rpc/connection.js';\n\nexport * from './signers/txn-data-serializers/type-tag-serializer.js';\n\nexport * from './signers/signer.js';\nexport * from './signers/raw-signer.js';\nexport * from './signers/signer-with-provider.js';\nexport * from './signers/types.js';\n\nexport * from './types/index.js';\nexport * from './utils/format.js';\nexport * from './utils/intent.js';\nexport * from './utils/verify.js';\nexport * from './utils/errors.js';\n\nexport * from './framework/index.js';\n\nexport * from './builder/index.js';\n\nexport { fromB64, toB64 } from '@mysten/bcs';\n\nexport { is, assert } from 'superstruct';\n"],"mappings":"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","names":["nacl","boolean","literal","number","object","record","string","union","nullable","union","string","literal","object","number","record","boolean","nullable","object","string","array","record","any","optional","boolean","nullable","object","string","optional","record","any","array","nullable","boolean","is","array","literal","number","object","optional","string","union","boolean","tuple","assign","nullable","string","object","optional","array","union","literal","number","tuple","nullable","boolean","assign","is","option","nullable","number","object","string","writer","reader","array","nullable","number","object","string","object","number","array","nullable","string","array","object","string","union","boolean","define","number","literal","record","is","tuple","value","array","boolean","literal","number","object","string","union","nullable","tuple","optional","object","number","string","array","union","literal","optional","tuple","nullable","boolean","array","boolean","nullable","number","object","optional","string","object","string","optional","nullable","number","array","boolean","array","boolean","nullable","number","object","string","object","string","array","nullable","number","boolean","number","array","boolean","nullable","object","string","object","array","string","boolean","nullable","any","array","boolean","literal","nullable","number","object","string","union","union","literal","object","string","any","number","array","nullable","boolean","array","number","object","string","tuple","boolean","optional","any","nullable","GasCostSummary","object","string","array","number","any","tuple","optional","nullable","boolean","toB64","nacl","toB64","fromB64","toB64","blake2b","bytesToHex","fromB64","toB64","bytesToHex","blake2b","toB64","bytesToHex","blake2b","sha256","fromB64","toB64","blake2b","bytesToHex","fromB64","toB64","bytesToHex","blake2b","HDKey","toB64","bytesToHex","blake2b","sha256","fromB64","toB64","fromB64","toB64","toB64","fromB64","blake2b","bytesToHex","BCS","splitGenericParameters","splitGenericParameters","VECTOR","BCS","bcs","encode","decode","bytesToHex","blake2b","bytes","toB64","fromB64","RPCValidationError","RequestManager","Client","client","RequestManager","Client","any","array","string","nullable","fromB58","toB64","toHEX","fromB64","is","BCS","fromB64","is","any","array","literal","object","optional","string","union","define","record","union","object","literal","optional","any","define","string","array","BCS","record","UpgradePolicy","is","fromB64","array","boolean","integer","object","string","union","union","object","string","integer","boolean","array","array","assert","define","integer","is","literal","nullable","object","optional","string","union","blake2b","optional","nullable","union","object","integer","literal","SuiAddress","string","define","array","is","assert","fromB64","is","chunk","object","number","object","string","any","array","toB64","string","fromB58","toHEX","nullable","blake2b","fromB64","toB64","AppId","IntentVersion","IntentScope","toB64","fromB64","blake2b","fromB64","nacl","secp256k1","sha256","blake2b","fromB64","blake2b","nacl","secp256k1","sha256","fromB64","toB64","is","assert"]}