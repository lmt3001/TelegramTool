import { SuiClient } from '@mysten/sui.js/client';
import { SuiOwnedObject, SuiSharedObject } from '../suiModel';
import type { SuiTransactionBlockResponse, SuiObjectDataOptions, SuiObjectData, DryRunTransactionBlockResponse } from '@mysten/sui.js/client';
/**
 * Encapsulates all functions that interact with the sui sdk
 */
export declare class SuiInteractor {
    readonly clients: SuiClient[];
    currentClient: SuiClient;
    readonly fullNodes: string[];
    currentFullNode: string;
    constructor(fullNodeUrls: string[]);
    switchToNextClient(): void;
    sendTx(transactionBlock: Uint8Array | string, signature: string | string[]): Promise<SuiTransactionBlockResponse>;
    dryRunTx(transactionBlock: Uint8Array): Promise<DryRunTransactionBlockResponse>;
    getObjects(ids: string[], options?: SuiObjectDataOptions): Promise<SuiObjectData[]>;
    getObject(id: string, options?: SuiObjectDataOptions): Promise<SuiObjectData>;
    /**
     * @description Update objects in a batch
     * @param suiObjects
     */
    updateObjects(suiObjects: (SuiOwnedObject | SuiSharedObject)[]): Promise<void>;
    /**
     * @description Select coins that add up to the given amount.
     * @param addr the address of the owner
     * @param amount the amount that is needed for the coin
     * @param coinType the coin type, default is '0x2::SUI::SUI'
     */
    selectCoins(addr: string, amount: number, coinType?: string): Promise<{
        objectId: string;
        digest: string;
        version: string;
    }[]>;
}
