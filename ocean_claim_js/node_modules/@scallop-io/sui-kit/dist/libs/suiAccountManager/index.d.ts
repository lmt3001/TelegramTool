import { Ed25519Keypair } from '@mysten/sui.js/keypairs/ed25519';
import type { AccountMangerParams, DerivePathParams } from 'src/types';
export declare class SuiAccountManager {
    private mnemonics;
    private secretKey;
    currentKeyPair: Ed25519Keypair;
    currentAddress: string;
    /**
     * Support the following ways to init the SuiToolkit:
     * 1. mnemonics
     * 2. secretKey (base64 or hex)
     * If none of them is provided, will generate a random mnemonics with 24 words.
     *
     * @param mnemonics, 12 or 24 mnemonics words, separated by space
     * @param secretKey, base64 or hex string or Bech32 string, when mnemonics is provided, secretKey will be ignored
     */
    constructor({ mnemonics, secretKey }?: AccountMangerParams);
    /**
     * Check if the secretKey starts with bench32 format
     */
    parseSecretKey(secretKey: string): Ed25519Keypair;
    /**
     * if derivePathParams is not provided or mnemonics is empty, it will return the currentKeyPair.
     * else:
     * it will generate keyPair from the mnemonic with the given derivePathParams.
     */
    getKeyPair(derivePathParams?: DerivePathParams): Ed25519Keypair;
    /**
     * if derivePathParams is not provided or mnemonics is empty, it will return the currentAddress.
     * else:
     * it will generate address from the mnemonic with the given derivePathParams.
     */
    getAddress(derivePathParams?: DerivePathParams): string;
    /**
     * Switch the current account with the given derivePathParams.
     * This is only useful when the mnemonics is provided. For secretKey mode, it will always use the same account.
     */
    switchAccount(derivePathParams: DerivePathParams): void;
}
