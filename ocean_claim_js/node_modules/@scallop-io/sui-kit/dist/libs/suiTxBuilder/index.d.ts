import { TransactionBlock } from '@mysten/sui.js/transactions';
import type { SuiClient, SuiObjectRef } from '@mysten/sui.js/client';
import type { TransactionObjectArgument } from '@mysten/sui.js/transactions';
import type { TransactionExpiration, SharedObjectRef } from '@mysten/sui.js/bcs';
import type { Keypair } from '@mysten/sui.js/cryptography';
import type { ObjectCallArg, TransactionType, SuiTxArg, SuiAddressArg, SuiObjectArg, SuiVecTxArg } from 'src/types';
export declare class SuiTxBlock {
    txBlock: TransactionBlock;
    constructor(transaction?: TransactionBlock);
    get gas(): TransactionObjectArgument;
    get blockData(): {
        version: 1;
        inputs: ({
            index: number;
            kind: "Input";
            value?: any;
            type?: "object" | undefined;
        } | {
            index: number;
            kind: "Input";
            type: "pure";
            value?: any;
        })[];
        transactions: ({
            kind: "MoveCall";
            arguments: ({
                index: number;
                kind: "Input";
                value?: any;
                type?: "object" | undefined;
            } | {
                index: number;
                kind: "Input";
                type: "pure";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
            target: `${string}::${string}::${string}`;
            typeArguments: string[];
        } | {
            address: {
                index: number;
                kind: "Input";
                value?: any;
                type?: "object" | undefined;
            } | {
                index: number;
                kind: "Input";
                type: "pure";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            kind: "TransferObjects";
            objects: ({
                index: number;
                kind: "Input";
                value?: any;
                type?: "object" | undefined;
            } | {
                index: number;
                kind: "Input";
                type: "pure";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
        } | {
            kind: "SplitCoins";
            coin: {
                index: number;
                kind: "Input";
                value?: any;
                type?: "object" | undefined;
            } | {
                index: number;
                kind: "Input";
                type: "pure";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            amounts: ({
                index: number;
                kind: "Input";
                value?: any;
                type?: "object" | undefined;
            } | {
                index: number;
                kind: "Input";
                type: "pure";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
        } | {
            kind: "MergeCoins";
            destination: {
                index: number;
                kind: "Input";
                value?: any;
                type?: "object" | undefined;
            } | {
                index: number;
                kind: "Input";
                type: "pure";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
            sources: ({
                index: number;
                kind: "Input";
                value?: any;
                type?: "object" | undefined;
            } | {
                index: number;
                kind: "Input";
                type: "pure";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
        } | {
            kind: "Publish";
            modules: number[][];
            dependencies: string[];
        } | {
            kind: "Upgrade";
            modules: number[][];
            dependencies: string[];
            packageId: string;
            ticket: {
                index: number;
                kind: "Input";
                value?: any;
                type?: "object" | undefined;
            } | {
                index: number;
                kind: "Input";
                type: "pure";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            };
        } | {
            kind: "MakeMoveVec";
            type: {
                Some: import("@mysten/sui.js/bcs").TypeTag;
            } | {
                None: true | null;
            };
            objects: ({
                index: number;
                kind: "Input";
                value?: any;
                type?: "object" | undefined;
            } | {
                index: number;
                kind: "Input";
                type: "pure";
                value?: any;
            } | {
                kind: "GasCoin";
            } | {
                index: number;
                kind: "Result";
            } | {
                index: number;
                resultIndex: number;
                kind: "NestedResult";
            })[];
        })[];
        gasConfig: {
            payment?: {
                digest: string;
                objectId: string;
                version: string | number | bigint;
            }[] | undefined;
            owner?: string | undefined;
            price?: string | number | bigint | undefined;
            budget?: string | number | bigint | undefined;
        };
        sender?: string | undefined;
        expiration?: {
            Epoch: number;
        } | {
            None: true | null;
        } | null | undefined;
    };
    address(value: string): {
        index: number;
        kind: "Input";
        value?: any;
        type?: "object" | undefined;
    } | {
        index: number;
        kind: "Input";
        type: "pure";
        value?: any;
    };
    pure(value: unknown, type?: string): {
        index: number;
        kind: "Input";
        value?: any;
        type?: "object" | undefined;
    } | {
        index: number;
        kind: "Input";
        type: "pure";
        value?: any;
    };
    object(value: string | ObjectCallArg): TransactionObjectArgument;
    objectRef(ref: SuiObjectRef): TransactionObjectArgument;
    sharedObjectRef(ref: SharedObjectRef): TransactionObjectArgument;
    setSender(sender: string): void;
    setSenderIfNotSet(sender: string): void;
    setExpiration(expiration?: TransactionExpiration): void;
    setGasPrice(price: number | bigint): void;
    setGasBudget(budget: number | bigint): void;
    setGasOwner(owner: string): void;
    setGasPayment(payments: SuiObjectRef[]): void;
    serialize(): string;
    sign(params: {
        signer: Keypair;
        client?: SuiClient;
        onlyTransactionKind?: boolean;
    }): Promise<import("@mysten/sui.js/cryptography").SignatureWithBytes>;
    build(params?: {
        client?: SuiClient;
        onlyTransactionKind?: boolean;
    }): Promise<Uint8Array>;
    getDigest(params?: {
        client?: SuiClient;
    }): Promise<string>;
    add(...args: TransactionType): import("@mysten/sui.js/transactions").TransactionResult;
    publish({ modules, dependencies, }: {
        modules: number[][] | string[];
        dependencies: string[];
    }): import("@mysten/sui.js/transactions").TransactionResult;
    upgrade({ modules, dependencies, packageId, ticket, }: {
        modules: number[][] | string[];
        dependencies: string[];
        packageId: string;
        ticket: TransactionObjectArgument | string;
    }): import("@mysten/sui.js/transactions").TransactionResult;
    makeMoveVec({ objects, type, }: {
        objects: (TransactionObjectArgument | string)[];
        type?: string;
    }): import("@mysten/sui.js/transactions").TransactionResult;
    transferObjects(objects: SuiObjectArg[], address: SuiAddressArg): import("@mysten/sui.js/transactions").TransactionResult;
    splitCoins(coin: SuiObjectArg, amounts: SuiTxArg[]): {
        index: number;
        resultIndex: number;
        kind: "NestedResult";
    }[];
    mergeCoins(destination: SuiObjectArg, sources: SuiObjectArg[]): import("@mysten/sui.js/transactions").TransactionResult;
    /**
     * @description Move call
     * @param target `${string}::${string}::${string}`, e.g. `0x3::sui_system::request_add_stake`
     * @param args the arguments of the move call, such as `['0x1', '0x2']`
     * @param typeArgs the type arguments of the move call, such as `['0x2::sui::SUI']`
     */
    moveCall(target: string, args?: (SuiTxArg | SuiVecTxArg)[], typeArgs?: string[]): import("@mysten/sui.js/transactions").TransactionResult;
    transferSuiToMany(recipients: SuiAddressArg[], amounts: SuiTxArg[]): this;
    transferSui(address: SuiAddressArg, amount: SuiTxArg): this;
    takeAmountFromCoins(coins: SuiObjectArg[], amount: SuiTxArg): TransactionObjectArgument[];
    splitSUIFromGas(amounts: SuiTxArg[]): import("@mysten/sui.js/transactions").TransactionResult;
    splitMultiCoins(coins: SuiObjectArg[], amounts: SuiTxArg[]): {
        splitedCoins: import("@mysten/sui.js/transactions").TransactionResult;
        mergedCoin: TransactionObjectArgument;
    };
    transferCoinToMany(coins: SuiObjectArg[], sender: SuiAddressArg, recipients: SuiAddressArg[], amounts: SuiTxArg[]): this;
    transferCoin(coins: SuiObjectArg[], sender: SuiAddressArg, recipient: SuiAddressArg, amount: SuiTxArg): this;
    stakeSui(amount: SuiTxArg, validatorAddr: SuiAddressArg): import("@mysten/sui.js/transactions").TransactionResult;
}
