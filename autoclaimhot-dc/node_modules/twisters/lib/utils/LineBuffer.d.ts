import { LineBufferOptions, TwistersBuffer } from '../types';
export declare class LineBuffer implements TwistersBuffer {
    /**
     * Buffered line count.
     */
    lineCount: number;
    /**
     * Configuration options.
     */
    options: LineBufferOptions;
    readonly isDisabled: boolean;
    constructor(options?: Partial<LineBufferOptions>);
    /**
     * 1. Hide the terminal cursor.
     * 2. Mute stdin (if discardStdin option is true).
     */
    init(): void;
    /**
     * Reset the line counter.
     */
    updateBegin(): void;
    /**
     * 1. Clear from the cursor to the end of the screen.
     * 2. Move the cursor to top of buffered content.
     */
    updateEnd(): void;
    /**
     * Clear from the cursor to the end of the screen.
     */
    teardown(): void;
    /**
     * 1. Restore terminal cursor visibility and position.
     * 2. Unmute stdin (if it was previously muted).
     * @remarks If the handleSigint option is false, this method should be called from any custom
     * sigint handler.
     */
    cleanup(): void;
    /**
     * Write text to the stream.
     *
     * __Usage Notes:__
     * - The `updateStart` method should be called to start an update batch before writing buffered messages.
     * - The `updateEnd` method should be called to signify the end of an update batch after messages are written.
     * - Unbuffered messages should NOT be written AFTER buffered messages within an update batch.
     * - Unbuffered messages may be written outside of an update batch.
     */
    write(text: string | null, isBuffered?: boolean): void;
}
