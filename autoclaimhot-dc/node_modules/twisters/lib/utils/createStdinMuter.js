"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStdinMuter = void 0;
const readline_1 = __importDefault(require("readline"));
const mute_stream_1 = __importDefault(require("mute-stream"));
/**
 * Returns an object capable of muting stdin output.
 * @remarks This implementation was based on `StdinDiscarder` from [ora](https://github.com/sindresorhus/ora) (MIT).
 */
function createStdinMuter() {
    const { stdin: input, stdout } = process;
    // No known way to make this work reliably on Windows
    if (process.platform === 'win32' || !input.isTTY) {
        return;
    }
    const output = new mute_stream_1.default();
    output.pipe(stdout);
    output.mute();
    let rl;
    let isMuted = false;
    const unmute = () => {
        if (!isMuted) {
            return;
        }
        rl === null || rl === void 0 ? void 0 : rl.close();
        rl === null || rl === void 0 ? void 0 : rl.removeAllListeners('SIGINT');
        rl = undefined;
        isMuted = false;
    };
    const mute = () => {
        if (isMuted) {
            return;
        }
        isMuted = true;
        rl = readline_1.default.createInterface({ input, output });
        rl.on('SIGINT', () => {
            unmute();
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            process.emit('SIGINT');
        });
    };
    return { mute, unmute, isMuted: () => isMuted };
}
exports.createStdinMuter = createStdinMuter;
exports.default = createStdinMuter;
